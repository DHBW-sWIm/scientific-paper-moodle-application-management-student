<?php
/**
 * Process
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * sWIm Activiti REST API
 *
 * here be dragons
 *
 * OpenAPI spec version: v0.2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Process Class Doc Comment
 *
 * @category Class
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Process implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Process';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'xml_row_number' => 'int',
        'xml_column_number' => 'int',
        'extension_elements' => 'map[string,\Swagger\Client\Model\ExtensionElement[]]',
        'attributes' => 'map[string,\Swagger\Client\Model\ExtensionAttribute[]]',
        'name' => 'string',
        'executable' => 'bool',
        'documentation' => 'string',
        'io_specification' => '\Swagger\Client\Model\IOSpecification',
        'execution_listeners' => '\Swagger\Client\Model\ActivitiListener[]',
        'lanes' => '\Swagger\Client\Model\Lane[]',
        'data_objects' => '\Swagger\Client\Model\ValuedDataObject[]',
        'candidate_starter_users' => 'string[]',
        'candidate_starter_groups' => 'string[]',
        'event_listeners' => '\Swagger\Client\Model\EventListener[]',
        'flow_element_map' => 'map[string,\Swagger\Client\Model\FlowElement]',
        'initial_flow_element' => '\Swagger\Client\Model\FlowElement',
        'artifacts' => '\Swagger\Client\Model\Artifact[]',
        'flow_elements' => '\Swagger\Client\Model\FlowElement[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'xml_row_number' => 'int32',
        'xml_column_number' => 'int32',
        'extension_elements' => null,
        'attributes' => null,
        'name' => null,
        'executable' => null,
        'documentation' => null,
        'io_specification' => null,
        'execution_listeners' => null,
        'lanes' => null,
        'data_objects' => null,
        'candidate_starter_users' => null,
        'candidate_starter_groups' => null,
        'event_listeners' => null,
        'flow_element_map' => null,
        'initial_flow_element' => null,
        'artifacts' => null,
        'flow_elements' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'xml_row_number' => 'xmlRowNumber',
        'xml_column_number' => 'xmlColumnNumber',
        'extension_elements' => 'extensionElements',
        'attributes' => 'attributes',
        'name' => 'name',
        'executable' => 'executable',
        'documentation' => 'documentation',
        'io_specification' => 'ioSpecification',
        'execution_listeners' => 'executionListeners',
        'lanes' => 'lanes',
        'data_objects' => 'dataObjects',
        'candidate_starter_users' => 'candidateStarterUsers',
        'candidate_starter_groups' => 'candidateStarterGroups',
        'event_listeners' => 'eventListeners',
        'flow_element_map' => 'flowElementMap',
        'initial_flow_element' => 'initialFlowElement',
        'artifacts' => 'artifacts',
        'flow_elements' => 'flowElements'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'xml_row_number' => 'setXmlRowNumber',
        'xml_column_number' => 'setXmlColumnNumber',
        'extension_elements' => 'setExtensionElements',
        'attributes' => 'setAttributes',
        'name' => 'setName',
        'executable' => 'setExecutable',
        'documentation' => 'setDocumentation',
        'io_specification' => 'setIoSpecification',
        'execution_listeners' => 'setExecutionListeners',
        'lanes' => 'setLanes',
        'data_objects' => 'setDataObjects',
        'candidate_starter_users' => 'setCandidateStarterUsers',
        'candidate_starter_groups' => 'setCandidateStarterGroups',
        'event_listeners' => 'setEventListeners',
        'flow_element_map' => 'setFlowElementMap',
        'initial_flow_element' => 'setInitialFlowElement',
        'artifacts' => 'setArtifacts',
        'flow_elements' => 'setFlowElements'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'xml_row_number' => 'getXmlRowNumber',
        'xml_column_number' => 'getXmlColumnNumber',
        'extension_elements' => 'getExtensionElements',
        'attributes' => 'getAttributes',
        'name' => 'getName',
        'executable' => 'getExecutable',
        'documentation' => 'getDocumentation',
        'io_specification' => 'getIoSpecification',
        'execution_listeners' => 'getExecutionListeners',
        'lanes' => 'getLanes',
        'data_objects' => 'getDataObjects',
        'candidate_starter_users' => 'getCandidateStarterUsers',
        'candidate_starter_groups' => 'getCandidateStarterGroups',
        'event_listeners' => 'getEventListeners',
        'flow_element_map' => 'getFlowElementMap',
        'initial_flow_element' => 'getInitialFlowElement',
        'artifacts' => 'getArtifacts',
        'flow_elements' => 'getFlowElements'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['xml_row_number'] = isset($data['xml_row_number']) ? $data['xml_row_number'] : null;
        $this->container['xml_column_number'] = isset($data['xml_column_number']) ? $data['xml_column_number'] : null;
        $this->container['extension_elements'] = isset($data['extension_elements']) ? $data['extension_elements'] : null;
        $this->container['attributes'] = isset($data['attributes']) ? $data['attributes'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['executable'] = isset($data['executable']) ? $data['executable'] : false;
        $this->container['documentation'] = isset($data['documentation']) ? $data['documentation'] : null;
        $this->container['io_specification'] = isset($data['io_specification']) ? $data['io_specification'] : null;
        $this->container['execution_listeners'] = isset($data['execution_listeners']) ? $data['execution_listeners'] : null;
        $this->container['lanes'] = isset($data['lanes']) ? $data['lanes'] : null;
        $this->container['data_objects'] = isset($data['data_objects']) ? $data['data_objects'] : null;
        $this->container['candidate_starter_users'] = isset($data['candidate_starter_users']) ? $data['candidate_starter_users'] : null;
        $this->container['candidate_starter_groups'] = isset($data['candidate_starter_groups']) ? $data['candidate_starter_groups'] : null;
        $this->container['event_listeners'] = isset($data['event_listeners']) ? $data['event_listeners'] : null;
        $this->container['flow_element_map'] = isset($data['flow_element_map']) ? $data['flow_element_map'] : null;
        $this->container['initial_flow_element'] = isset($data['initial_flow_element']) ? $data['initial_flow_element'] : null;
        $this->container['artifacts'] = isset($data['artifacts']) ? $data['artifacts'] : null;
        $this->container['flow_elements'] = isset($data['flow_elements']) ? $data['flow_elements'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets xml_row_number
     *
     * @return int
     */
    public function getXmlRowNumber()
    {
        return $this->container['xml_row_number'];
    }

    /**
     * Sets xml_row_number
     *
     * @param int $xml_row_number xml_row_number
     *
     * @return $this
     */
    public function setXmlRowNumber($xml_row_number)
    {
        $this->container['xml_row_number'] = $xml_row_number;

        return $this;
    }

    /**
     * Gets xml_column_number
     *
     * @return int
     */
    public function getXmlColumnNumber()
    {
        return $this->container['xml_column_number'];
    }

    /**
     * Sets xml_column_number
     *
     * @param int $xml_column_number xml_column_number
     *
     * @return $this
     */
    public function setXmlColumnNumber($xml_column_number)
    {
        $this->container['xml_column_number'] = $xml_column_number;

        return $this;
    }

    /**
     * Gets extension_elements
     *
     * @return map[string,\Swagger\Client\Model\ExtensionElement[]]
     */
    public function getExtensionElements()
    {
        return $this->container['extension_elements'];
    }

    /**
     * Sets extension_elements
     *
     * @param map[string,\Swagger\Client\Model\ExtensionElement[]] $extension_elements extension_elements
     *
     * @return $this
     */
    public function setExtensionElements($extension_elements)
    {
        $this->container['extension_elements'] = $extension_elements;

        return $this;
    }

    /**
     * Gets attributes
     *
     * @return map[string,\Swagger\Client\Model\ExtensionAttribute[]]
     */
    public function getAttributes()
    {
        return $this->container['attributes'];
    }

    /**
     * Sets attributes
     *
     * @param map[string,\Swagger\Client\Model\ExtensionAttribute[]] $attributes attributes
     *
     * @return $this
     */
    public function setAttributes($attributes)
    {
        $this->container['attributes'] = $attributes;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets executable
     *
     * @return bool
     */
    public function getExecutable()
    {
        return $this->container['executable'];
    }

    /**
     * Sets executable
     *
     * @param bool $executable executable
     *
     * @return $this
     */
    public function setExecutable($executable)
    {
        $this->container['executable'] = $executable;

        return $this;
    }

    /**
     * Gets documentation
     *
     * @return string
     */
    public function getDocumentation()
    {
        return $this->container['documentation'];
    }

    /**
     * Sets documentation
     *
     * @param string $documentation documentation
     *
     * @return $this
     */
    public function setDocumentation($documentation)
    {
        $this->container['documentation'] = $documentation;

        return $this;
    }

    /**
     * Gets io_specification
     *
     * @return \Swagger\Client\Model\IOSpecification
     */
    public function getIoSpecification()
    {
        return $this->container['io_specification'];
    }

    /**
     * Sets io_specification
     *
     * @param \Swagger\Client\Model\IOSpecification $io_specification io_specification
     *
     * @return $this
     */
    public function setIoSpecification($io_specification)
    {
        $this->container['io_specification'] = $io_specification;

        return $this;
    }

    /**
     * Gets execution_listeners
     *
     * @return \Swagger\Client\Model\ActivitiListener[]
     */
    public function getExecutionListeners()
    {
        return $this->container['execution_listeners'];
    }

    /**
     * Sets execution_listeners
     *
     * @param \Swagger\Client\Model\ActivitiListener[] $execution_listeners execution_listeners
     *
     * @return $this
     */
    public function setExecutionListeners($execution_listeners)
    {
        $this->container['execution_listeners'] = $execution_listeners;

        return $this;
    }

    /**
     * Gets lanes
     *
     * @return \Swagger\Client\Model\Lane[]
     */
    public function getLanes()
    {
        return $this->container['lanes'];
    }

    /**
     * Sets lanes
     *
     * @param \Swagger\Client\Model\Lane[] $lanes lanes
     *
     * @return $this
     */
    public function setLanes($lanes)
    {
        $this->container['lanes'] = $lanes;

        return $this;
    }

    /**
     * Gets data_objects
     *
     * @return \Swagger\Client\Model\ValuedDataObject[]
     */
    public function getDataObjects()
    {
        return $this->container['data_objects'];
    }

    /**
     * Sets data_objects
     *
     * @param \Swagger\Client\Model\ValuedDataObject[] $data_objects data_objects
     *
     * @return $this
     */
    public function setDataObjects($data_objects)
    {
        $this->container['data_objects'] = $data_objects;

        return $this;
    }

    /**
     * Gets candidate_starter_users
     *
     * @return string[]
     */
    public function getCandidateStarterUsers()
    {
        return $this->container['candidate_starter_users'];
    }

    /**
     * Sets candidate_starter_users
     *
     * @param string[] $candidate_starter_users candidate_starter_users
     *
     * @return $this
     */
    public function setCandidateStarterUsers($candidate_starter_users)
    {
        $this->container['candidate_starter_users'] = $candidate_starter_users;

        return $this;
    }

    /**
     * Gets candidate_starter_groups
     *
     * @return string[]
     */
    public function getCandidateStarterGroups()
    {
        return $this->container['candidate_starter_groups'];
    }

    /**
     * Sets candidate_starter_groups
     *
     * @param string[] $candidate_starter_groups candidate_starter_groups
     *
     * @return $this
     */
    public function setCandidateStarterGroups($candidate_starter_groups)
    {
        $this->container['candidate_starter_groups'] = $candidate_starter_groups;

        return $this;
    }

    /**
     * Gets event_listeners
     *
     * @return \Swagger\Client\Model\EventListener[]
     */
    public function getEventListeners()
    {
        return $this->container['event_listeners'];
    }

    /**
     * Sets event_listeners
     *
     * @param \Swagger\Client\Model\EventListener[] $event_listeners event_listeners
     *
     * @return $this
     */
    public function setEventListeners($event_listeners)
    {
        $this->container['event_listeners'] = $event_listeners;

        return $this;
    }

    /**
     * Gets flow_element_map
     *
     * @return map[string,\Swagger\Client\Model\FlowElement]
     */
    public function getFlowElementMap()
    {
        return $this->container['flow_element_map'];
    }

    /**
     * Sets flow_element_map
     *
     * @param map[string,\Swagger\Client\Model\FlowElement] $flow_element_map flow_element_map
     *
     * @return $this
     */
    public function setFlowElementMap($flow_element_map)
    {
        $this->container['flow_element_map'] = $flow_element_map;

        return $this;
    }

    /**
     * Gets initial_flow_element
     *
     * @return \Swagger\Client\Model\FlowElement
     */
    public function getInitialFlowElement()
    {
        return $this->container['initial_flow_element'];
    }

    /**
     * Sets initial_flow_element
     *
     * @param \Swagger\Client\Model\FlowElement $initial_flow_element initial_flow_element
     *
     * @return $this
     */
    public function setInitialFlowElement($initial_flow_element)
    {
        $this->container['initial_flow_element'] = $initial_flow_element;

        return $this;
    }

    /**
     * Gets artifacts
     *
     * @return \Swagger\Client\Model\Artifact[]
     */
    public function getArtifacts()
    {
        return $this->container['artifacts'];
    }

    /**
     * Sets artifacts
     *
     * @param \Swagger\Client\Model\Artifact[] $artifacts artifacts
     *
     * @return $this
     */
    public function setArtifacts($artifacts)
    {
        $this->container['artifacts'] = $artifacts;

        return $this;
    }

    /**
     * Gets flow_elements
     *
     * @return \Swagger\Client\Model\FlowElement[]
     */
    public function getFlowElements()
    {
        return $this->container['flow_elements'];
    }

    /**
     * Sets flow_elements
     *
     * @param \Swagger\Client\Model\FlowElement[] $flow_elements flow_elements
     *
     * @return $this
     */
    public function setFlowElements($flow_elements)
    {
        $this->container['flow_elements'] = $flow_elements;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param  integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param  integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param  integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

