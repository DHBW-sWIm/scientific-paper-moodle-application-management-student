<?php
/**
 * HistoricTaskInstanceQueryRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * sWIm Activiti REST API
 *
 * here be dragons
 *
 * OpenAPI spec version: v0.2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * HistoricTaskInstanceQueryRequest Class Doc Comment
 *
 * @category Class
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class HistoricTaskInstanceQueryRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'HistoricTaskInstanceQueryRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'start' => 'int',
        'size' => 'int',
        'sort' => 'string',
        'order' => 'string',
        'task_id' => 'string',
        'process_instance_id' => 'string',
        'process_business_key' => 'string',
        'process_business_key_like' => 'string',
        'process_definition_id' => 'string',
        'process_definition_key' => 'string',
        'process_definition_key_like' => 'string',
        'process_definition_name' => 'string',
        'process_definition_name_like' => 'string',
        'execution_id' => 'string',
        'task_name' => 'string',
        'task_name_like' => 'string',
        'task_description' => 'string',
        'task_description_like' => 'string',
        'task_definition_key' => 'string',
        'task_definition_key_like' => 'string',
        'task_category' => 'string',
        'task_delete_reason' => 'string',
        'task_delete_reason_like' => 'string',
        'task_assignee' => 'string',
        'task_assignee_like' => 'string',
        'task_owner' => 'string',
        'task_owner_like' => 'string',
        'task_involved_user' => 'string',
        'task_priority' => 'int',
        'task_min_priority' => 'int',
        'task_max_priority' => 'int',
        'finished' => 'bool',
        'process_finished' => 'bool',
        'parent_task_id' => 'string',
        'due_date' => '\DateTime',
        'due_date_after' => '\DateTime',
        'due_date_before' => '\DateTime',
        'without_due_date' => 'bool',
        'task_created_on' => '\DateTime',
        'task_created_before' => '\DateTime',
        'task_created_after' => '\DateTime',
        'task_completed_on' => '\DateTime',
        'task_completed_before' => '\DateTime',
        'task_completed_after' => '\DateTime',
        'include_task_local_variables' => 'bool',
        'include_process_variables' => 'bool',
        'task_variables' => '\Swagger\Client\Model\QueryVariable[]',
        'process_variables' => '\Swagger\Client\Model\QueryVariable[]',
        'tenant_id' => 'string',
        'tenant_id_like' => 'string',
        'without_tenant_id' => 'bool',
        'task_candidate_group' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'start' => 'int32',
        'size' => 'int32',
        'sort' => null,
        'order' => null,
        'task_id' => null,
        'process_instance_id' => null,
        'process_business_key' => null,
        'process_business_key_like' => null,
        'process_definition_id' => null,
        'process_definition_key' => null,
        'process_definition_key_like' => null,
        'process_definition_name' => null,
        'process_definition_name_like' => null,
        'execution_id' => null,
        'task_name' => null,
        'task_name_like' => null,
        'task_description' => null,
        'task_description_like' => null,
        'task_definition_key' => null,
        'task_definition_key_like' => null,
        'task_category' => null,
        'task_delete_reason' => null,
        'task_delete_reason_like' => null,
        'task_assignee' => null,
        'task_assignee_like' => null,
        'task_owner' => null,
        'task_owner_like' => null,
        'task_involved_user' => null,
        'task_priority' => 'int32',
        'task_min_priority' => 'int32',
        'task_max_priority' => 'int32',
        'finished' => null,
        'process_finished' => null,
        'parent_task_id' => null,
        'due_date' => 'date-time',
        'due_date_after' => 'date-time',
        'due_date_before' => 'date-time',
        'without_due_date' => null,
        'task_created_on' => 'date-time',
        'task_created_before' => 'date-time',
        'task_created_after' => 'date-time',
        'task_completed_on' => 'date-time',
        'task_completed_before' => 'date-time',
        'task_completed_after' => 'date-time',
        'include_task_local_variables' => null,
        'include_process_variables' => null,
        'task_variables' => null,
        'process_variables' => null,
        'tenant_id' => null,
        'tenant_id_like' => null,
        'without_tenant_id' => null,
        'task_candidate_group' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'start' => 'start',
        'size' => 'size',
        'sort' => 'sort',
        'order' => 'order',
        'task_id' => 'taskId',
        'process_instance_id' => 'processInstanceId',
        'process_business_key' => 'processBusinessKey',
        'process_business_key_like' => 'processBusinessKeyLike',
        'process_definition_id' => 'processDefinitionId',
        'process_definition_key' => 'processDefinitionKey',
        'process_definition_key_like' => 'processDefinitionKeyLike',
        'process_definition_name' => 'processDefinitionName',
        'process_definition_name_like' => 'processDefinitionNameLike',
        'execution_id' => 'executionId',
        'task_name' => 'taskName',
        'task_name_like' => 'taskNameLike',
        'task_description' => 'taskDescription',
        'task_description_like' => 'taskDescriptionLike',
        'task_definition_key' => 'taskDefinitionKey',
        'task_definition_key_like' => 'taskDefinitionKeyLike',
        'task_category' => 'taskCategory',
        'task_delete_reason' => 'taskDeleteReason',
        'task_delete_reason_like' => 'taskDeleteReasonLike',
        'task_assignee' => 'taskAssignee',
        'task_assignee_like' => 'taskAssigneeLike',
        'task_owner' => 'taskOwner',
        'task_owner_like' => 'taskOwnerLike',
        'task_involved_user' => 'taskInvolvedUser',
        'task_priority' => 'taskPriority',
        'task_min_priority' => 'taskMinPriority',
        'task_max_priority' => 'taskMaxPriority',
        'finished' => 'finished',
        'process_finished' => 'processFinished',
        'parent_task_id' => 'parentTaskId',
        'due_date' => 'dueDate',
        'due_date_after' => 'dueDateAfter',
        'due_date_before' => 'dueDateBefore',
        'without_due_date' => 'withoutDueDate',
        'task_created_on' => 'taskCreatedOn',
        'task_created_before' => 'taskCreatedBefore',
        'task_created_after' => 'taskCreatedAfter',
        'task_completed_on' => 'taskCompletedOn',
        'task_completed_before' => 'taskCompletedBefore',
        'task_completed_after' => 'taskCompletedAfter',
        'include_task_local_variables' => 'includeTaskLocalVariables',
        'include_process_variables' => 'includeProcessVariables',
        'task_variables' => 'taskVariables',
        'process_variables' => 'processVariables',
        'tenant_id' => 'tenantId',
        'tenant_id_like' => 'tenantIdLike',
        'without_tenant_id' => 'withoutTenantId',
        'task_candidate_group' => 'taskCandidateGroup'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'start' => 'setStart',
        'size' => 'setSize',
        'sort' => 'setSort',
        'order' => 'setOrder',
        'task_id' => 'setTaskId',
        'process_instance_id' => 'setProcessInstanceId',
        'process_business_key' => 'setProcessBusinessKey',
        'process_business_key_like' => 'setProcessBusinessKeyLike',
        'process_definition_id' => 'setProcessDefinitionId',
        'process_definition_key' => 'setProcessDefinitionKey',
        'process_definition_key_like' => 'setProcessDefinitionKeyLike',
        'process_definition_name' => 'setProcessDefinitionName',
        'process_definition_name_like' => 'setProcessDefinitionNameLike',
        'execution_id' => 'setExecutionId',
        'task_name' => 'setTaskName',
        'task_name_like' => 'setTaskNameLike',
        'task_description' => 'setTaskDescription',
        'task_description_like' => 'setTaskDescriptionLike',
        'task_definition_key' => 'setTaskDefinitionKey',
        'task_definition_key_like' => 'setTaskDefinitionKeyLike',
        'task_category' => 'setTaskCategory',
        'task_delete_reason' => 'setTaskDeleteReason',
        'task_delete_reason_like' => 'setTaskDeleteReasonLike',
        'task_assignee' => 'setTaskAssignee',
        'task_assignee_like' => 'setTaskAssigneeLike',
        'task_owner' => 'setTaskOwner',
        'task_owner_like' => 'setTaskOwnerLike',
        'task_involved_user' => 'setTaskInvolvedUser',
        'task_priority' => 'setTaskPriority',
        'task_min_priority' => 'setTaskMinPriority',
        'task_max_priority' => 'setTaskMaxPriority',
        'finished' => 'setFinished',
        'process_finished' => 'setProcessFinished',
        'parent_task_id' => 'setParentTaskId',
        'due_date' => 'setDueDate',
        'due_date_after' => 'setDueDateAfter',
        'due_date_before' => 'setDueDateBefore',
        'without_due_date' => 'setWithoutDueDate',
        'task_created_on' => 'setTaskCreatedOn',
        'task_created_before' => 'setTaskCreatedBefore',
        'task_created_after' => 'setTaskCreatedAfter',
        'task_completed_on' => 'setTaskCompletedOn',
        'task_completed_before' => 'setTaskCompletedBefore',
        'task_completed_after' => 'setTaskCompletedAfter',
        'include_task_local_variables' => 'setIncludeTaskLocalVariables',
        'include_process_variables' => 'setIncludeProcessVariables',
        'task_variables' => 'setTaskVariables',
        'process_variables' => 'setProcessVariables',
        'tenant_id' => 'setTenantId',
        'tenant_id_like' => 'setTenantIdLike',
        'without_tenant_id' => 'setWithoutTenantId',
        'task_candidate_group' => 'setTaskCandidateGroup'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'start' => 'getStart',
        'size' => 'getSize',
        'sort' => 'getSort',
        'order' => 'getOrder',
        'task_id' => 'getTaskId',
        'process_instance_id' => 'getProcessInstanceId',
        'process_business_key' => 'getProcessBusinessKey',
        'process_business_key_like' => 'getProcessBusinessKeyLike',
        'process_definition_id' => 'getProcessDefinitionId',
        'process_definition_key' => 'getProcessDefinitionKey',
        'process_definition_key_like' => 'getProcessDefinitionKeyLike',
        'process_definition_name' => 'getProcessDefinitionName',
        'process_definition_name_like' => 'getProcessDefinitionNameLike',
        'execution_id' => 'getExecutionId',
        'task_name' => 'getTaskName',
        'task_name_like' => 'getTaskNameLike',
        'task_description' => 'getTaskDescription',
        'task_description_like' => 'getTaskDescriptionLike',
        'task_definition_key' => 'getTaskDefinitionKey',
        'task_definition_key_like' => 'getTaskDefinitionKeyLike',
        'task_category' => 'getTaskCategory',
        'task_delete_reason' => 'getTaskDeleteReason',
        'task_delete_reason_like' => 'getTaskDeleteReasonLike',
        'task_assignee' => 'getTaskAssignee',
        'task_assignee_like' => 'getTaskAssigneeLike',
        'task_owner' => 'getTaskOwner',
        'task_owner_like' => 'getTaskOwnerLike',
        'task_involved_user' => 'getTaskInvolvedUser',
        'task_priority' => 'getTaskPriority',
        'task_min_priority' => 'getTaskMinPriority',
        'task_max_priority' => 'getTaskMaxPriority',
        'finished' => 'getFinished',
        'process_finished' => 'getProcessFinished',
        'parent_task_id' => 'getParentTaskId',
        'due_date' => 'getDueDate',
        'due_date_after' => 'getDueDateAfter',
        'due_date_before' => 'getDueDateBefore',
        'without_due_date' => 'getWithoutDueDate',
        'task_created_on' => 'getTaskCreatedOn',
        'task_created_before' => 'getTaskCreatedBefore',
        'task_created_after' => 'getTaskCreatedAfter',
        'task_completed_on' => 'getTaskCompletedOn',
        'task_completed_before' => 'getTaskCompletedBefore',
        'task_completed_after' => 'getTaskCompletedAfter',
        'include_task_local_variables' => 'getIncludeTaskLocalVariables',
        'include_process_variables' => 'getIncludeProcessVariables',
        'task_variables' => 'getTaskVariables',
        'process_variables' => 'getProcessVariables',
        'tenant_id' => 'getTenantId',
        'tenant_id_like' => 'getTenantIdLike',
        'without_tenant_id' => 'getWithoutTenantId',
        'task_candidate_group' => 'getTaskCandidateGroup'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['start'] = isset($data['start']) ? $data['start'] : null;
        $this->container['size'] = isset($data['size']) ? $data['size'] : null;
        $this->container['sort'] = isset($data['sort']) ? $data['sort'] : null;
        $this->container['order'] = isset($data['order']) ? $data['order'] : null;
        $this->container['task_id'] = isset($data['task_id']) ? $data['task_id'] : null;
        $this->container['process_instance_id'] = isset($data['process_instance_id']) ? $data['process_instance_id'] : null;
        $this->container['process_business_key'] = isset($data['process_business_key']) ? $data['process_business_key'] : null;
        $this->container['process_business_key_like'] = isset($data['process_business_key_like']) ? $data['process_business_key_like'] : null;
        $this->container['process_definition_id'] = isset($data['process_definition_id']) ? $data['process_definition_id'] : null;
        $this->container['process_definition_key'] = isset($data['process_definition_key']) ? $data['process_definition_key'] : null;
        $this->container['process_definition_key_like'] = isset($data['process_definition_key_like']) ? $data['process_definition_key_like'] : null;
        $this->container['process_definition_name'] = isset($data['process_definition_name']) ? $data['process_definition_name'] : null;
        $this->container['process_definition_name_like'] = isset($data['process_definition_name_like']) ? $data['process_definition_name_like'] : null;
        $this->container['execution_id'] = isset($data['execution_id']) ? $data['execution_id'] : null;
        $this->container['task_name'] = isset($data['task_name']) ? $data['task_name'] : null;
        $this->container['task_name_like'] = isset($data['task_name_like']) ? $data['task_name_like'] : null;
        $this->container['task_description'] = isset($data['task_description']) ? $data['task_description'] : null;
        $this->container['task_description_like'] = isset($data['task_description_like']) ? $data['task_description_like'] : null;
        $this->container['task_definition_key'] = isset($data['task_definition_key']) ? $data['task_definition_key'] : null;
        $this->container['task_definition_key_like'] = isset($data['task_definition_key_like']) ? $data['task_definition_key_like'] : null;
        $this->container['task_category'] = isset($data['task_category']) ? $data['task_category'] : null;
        $this->container['task_delete_reason'] = isset($data['task_delete_reason']) ? $data['task_delete_reason'] : null;
        $this->container['task_delete_reason_like'] = isset($data['task_delete_reason_like']) ? $data['task_delete_reason_like'] : null;
        $this->container['task_assignee'] = isset($data['task_assignee']) ? $data['task_assignee'] : null;
        $this->container['task_assignee_like'] = isset($data['task_assignee_like']) ? $data['task_assignee_like'] : null;
        $this->container['task_owner'] = isset($data['task_owner']) ? $data['task_owner'] : null;
        $this->container['task_owner_like'] = isset($data['task_owner_like']) ? $data['task_owner_like'] : null;
        $this->container['task_involved_user'] = isset($data['task_involved_user']) ? $data['task_involved_user'] : null;
        $this->container['task_priority'] = isset($data['task_priority']) ? $data['task_priority'] : null;
        $this->container['task_min_priority'] = isset($data['task_min_priority']) ? $data['task_min_priority'] : null;
        $this->container['task_max_priority'] = isset($data['task_max_priority']) ? $data['task_max_priority'] : null;
        $this->container['finished'] = isset($data['finished']) ? $data['finished'] : false;
        $this->container['process_finished'] = isset($data['process_finished']) ? $data['process_finished'] : false;
        $this->container['parent_task_id'] = isset($data['parent_task_id']) ? $data['parent_task_id'] : null;
        $this->container['due_date'] = isset($data['due_date']) ? $data['due_date'] : null;
        $this->container['due_date_after'] = isset($data['due_date_after']) ? $data['due_date_after'] : null;
        $this->container['due_date_before'] = isset($data['due_date_before']) ? $data['due_date_before'] : null;
        $this->container['without_due_date'] = isset($data['without_due_date']) ? $data['without_due_date'] : false;
        $this->container['task_created_on'] = isset($data['task_created_on']) ? $data['task_created_on'] : null;
        $this->container['task_created_before'] = isset($data['task_created_before']) ? $data['task_created_before'] : null;
        $this->container['task_created_after'] = isset($data['task_created_after']) ? $data['task_created_after'] : null;
        $this->container['task_completed_on'] = isset($data['task_completed_on']) ? $data['task_completed_on'] : null;
        $this->container['task_completed_before'] = isset($data['task_completed_before']) ? $data['task_completed_before'] : null;
        $this->container['task_completed_after'] = isset($data['task_completed_after']) ? $data['task_completed_after'] : null;
        $this->container['include_task_local_variables'] = isset($data['include_task_local_variables']) ? $data['include_task_local_variables'] : false;
        $this->container['include_process_variables'] = isset($data['include_process_variables']) ? $data['include_process_variables'] : false;
        $this->container['task_variables'] = isset($data['task_variables']) ? $data['task_variables'] : null;
        $this->container['process_variables'] = isset($data['process_variables']) ? $data['process_variables'] : null;
        $this->container['tenant_id'] = isset($data['tenant_id']) ? $data['tenant_id'] : null;
        $this->container['tenant_id_like'] = isset($data['tenant_id_like']) ? $data['tenant_id_like'] : null;
        $this->container['without_tenant_id'] = isset($data['without_tenant_id']) ? $data['without_tenant_id'] : false;
        $this->container['task_candidate_group'] = isset($data['task_candidate_group']) ? $data['task_candidate_group'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets start
     *
     * @return int
     */
    public function getStart()
    {
        return $this->container['start'];
    }

    /**
     * Sets start
     *
     * @param int $start start
     *
     * @return $this
     */
    public function setStart($start)
    {
        $this->container['start'] = $start;

        return $this;
    }

    /**
     * Gets size
     *
     * @return int
     */
    public function getSize()
    {
        return $this->container['size'];
    }

    /**
     * Sets size
     *
     * @param int $size size
     *
     * @return $this
     */
    public function setSize($size)
    {
        $this->container['size'] = $size;

        return $this;
    }

    /**
     * Gets sort
     *
     * @return string
     */
    public function getSort()
    {
        return $this->container['sort'];
    }

    /**
     * Sets sort
     *
     * @param string $sort sort
     *
     * @return $this
     */
    public function setSort($sort)
    {
        $this->container['sort'] = $sort;

        return $this;
    }

    /**
     * Gets order
     *
     * @return string
     */
    public function getOrder()
    {
        return $this->container['order'];
    }

    /**
     * Sets order
     *
     * @param string $order order
     *
     * @return $this
     */
    public function setOrder($order)
    {
        $this->container['order'] = $order;

        return $this;
    }

    /**
     * Gets task_id
     *
     * @return string
     */
    public function getTaskId()
    {
        return $this->container['task_id'];
    }

    /**
     * Sets task_id
     *
     * @param string $task_id task_id
     *
     * @return $this
     */
    public function setTaskId($task_id)
    {
        $this->container['task_id'] = $task_id;

        return $this;
    }

    /**
     * Gets process_instance_id
     *
     * @return string
     */
    public function getProcessInstanceId()
    {
        return $this->container['process_instance_id'];
    }

    /**
     * Sets process_instance_id
     *
     * @param string $process_instance_id process_instance_id
     *
     * @return $this
     */
    public function setProcessInstanceId($process_instance_id)
    {
        $this->container['process_instance_id'] = $process_instance_id;

        return $this;
    }

    /**
     * Gets process_business_key
     *
     * @return string
     */
    public function getProcessBusinessKey()
    {
        return $this->container['process_business_key'];
    }

    /**
     * Sets process_business_key
     *
     * @param string $process_business_key process_business_key
     *
     * @return $this
     */
    public function setProcessBusinessKey($process_business_key)
    {
        $this->container['process_business_key'] = $process_business_key;

        return $this;
    }

    /**
     * Gets process_business_key_like
     *
     * @return string
     */
    public function getProcessBusinessKeyLike()
    {
        return $this->container['process_business_key_like'];
    }

    /**
     * Sets process_business_key_like
     *
     * @param string $process_business_key_like process_business_key_like
     *
     * @return $this
     */
    public function setProcessBusinessKeyLike($process_business_key_like)
    {
        $this->container['process_business_key_like'] = $process_business_key_like;

        return $this;
    }

    /**
     * Gets process_definition_id
     *
     * @return string
     */
    public function getProcessDefinitionId()
    {
        return $this->container['process_definition_id'];
    }

    /**
     * Sets process_definition_id
     *
     * @param string $process_definition_id process_definition_id
     *
     * @return $this
     */
    public function setProcessDefinitionId($process_definition_id)
    {
        $this->container['process_definition_id'] = $process_definition_id;

        return $this;
    }

    /**
     * Gets process_definition_key
     *
     * @return string
     */
    public function getProcessDefinitionKey()
    {
        return $this->container['process_definition_key'];
    }

    /**
     * Sets process_definition_key
     *
     * @param string $process_definition_key process_definition_key
     *
     * @return $this
     */
    public function setProcessDefinitionKey($process_definition_key)
    {
        $this->container['process_definition_key'] = $process_definition_key;

        return $this;
    }

    /**
     * Gets process_definition_key_like
     *
     * @return string
     */
    public function getProcessDefinitionKeyLike()
    {
        return $this->container['process_definition_key_like'];
    }

    /**
     * Sets process_definition_key_like
     *
     * @param string $process_definition_key_like process_definition_key_like
     *
     * @return $this
     */
    public function setProcessDefinitionKeyLike($process_definition_key_like)
    {
        $this->container['process_definition_key_like'] = $process_definition_key_like;

        return $this;
    }

    /**
     * Gets process_definition_name
     *
     * @return string
     */
    public function getProcessDefinitionName()
    {
        return $this->container['process_definition_name'];
    }

    /**
     * Sets process_definition_name
     *
     * @param string $process_definition_name process_definition_name
     *
     * @return $this
     */
    public function setProcessDefinitionName($process_definition_name)
    {
        $this->container['process_definition_name'] = $process_definition_name;

        return $this;
    }

    /**
     * Gets process_definition_name_like
     *
     * @return string
     */
    public function getProcessDefinitionNameLike()
    {
        return $this->container['process_definition_name_like'];
    }

    /**
     * Sets process_definition_name_like
     *
     * @param string $process_definition_name_like process_definition_name_like
     *
     * @return $this
     */
    public function setProcessDefinitionNameLike($process_definition_name_like)
    {
        $this->container['process_definition_name_like'] = $process_definition_name_like;

        return $this;
    }

    /**
     * Gets execution_id
     *
     * @return string
     */
    public function getExecutionId()
    {
        return $this->container['execution_id'];
    }

    /**
     * Sets execution_id
     *
     * @param string $execution_id execution_id
     *
     * @return $this
     */
    public function setExecutionId($execution_id)
    {
        $this->container['execution_id'] = $execution_id;

        return $this;
    }

    /**
     * Gets task_name
     *
     * @return string
     */
    public function getTaskName()
    {
        return $this->container['task_name'];
    }

    /**
     * Sets task_name
     *
     * @param string $task_name task_name
     *
     * @return $this
     */
    public function setTaskName($task_name)
    {
        $this->container['task_name'] = $task_name;

        return $this;
    }

    /**
     * Gets task_name_like
     *
     * @return string
     */
    public function getTaskNameLike()
    {
        return $this->container['task_name_like'];
    }

    /**
     * Sets task_name_like
     *
     * @param string $task_name_like task_name_like
     *
     * @return $this
     */
    public function setTaskNameLike($task_name_like)
    {
        $this->container['task_name_like'] = $task_name_like;

        return $this;
    }

    /**
     * Gets task_description
     *
     * @return string
     */
    public function getTaskDescription()
    {
        return $this->container['task_description'];
    }

    /**
     * Sets task_description
     *
     * @param string $task_description task_description
     *
     * @return $this
     */
    public function setTaskDescription($task_description)
    {
        $this->container['task_description'] = $task_description;

        return $this;
    }

    /**
     * Gets task_description_like
     *
     * @return string
     */
    public function getTaskDescriptionLike()
    {
        return $this->container['task_description_like'];
    }

    /**
     * Sets task_description_like
     *
     * @param string $task_description_like task_description_like
     *
     * @return $this
     */
    public function setTaskDescriptionLike($task_description_like)
    {
        $this->container['task_description_like'] = $task_description_like;

        return $this;
    }

    /**
     * Gets task_definition_key
     *
     * @return string
     */
    public function getTaskDefinitionKey()
    {
        return $this->container['task_definition_key'];
    }

    /**
     * Sets task_definition_key
     *
     * @param string $task_definition_key task_definition_key
     *
     * @return $this
     */
    public function setTaskDefinitionKey($task_definition_key)
    {
        $this->container['task_definition_key'] = $task_definition_key;

        return $this;
    }

    /**
     * Gets task_definition_key_like
     *
     * @return string
     */
    public function getTaskDefinitionKeyLike()
    {
        return $this->container['task_definition_key_like'];
    }

    /**
     * Sets task_definition_key_like
     *
     * @param string $task_definition_key_like task_definition_key_like
     *
     * @return $this
     */
    public function setTaskDefinitionKeyLike($task_definition_key_like)
    {
        $this->container['task_definition_key_like'] = $task_definition_key_like;

        return $this;
    }

    /**
     * Gets task_category
     *
     * @return string
     */
    public function getTaskCategory()
    {
        return $this->container['task_category'];
    }

    /**
     * Sets task_category
     *
     * @param string $task_category task_category
     *
     * @return $this
     */
    public function setTaskCategory($task_category)
    {
        $this->container['task_category'] = $task_category;

        return $this;
    }

    /**
     * Gets task_delete_reason
     *
     * @return string
     */
    public function getTaskDeleteReason()
    {
        return $this->container['task_delete_reason'];
    }

    /**
     * Sets task_delete_reason
     *
     * @param string $task_delete_reason task_delete_reason
     *
     * @return $this
     */
    public function setTaskDeleteReason($task_delete_reason)
    {
        $this->container['task_delete_reason'] = $task_delete_reason;

        return $this;
    }

    /**
     * Gets task_delete_reason_like
     *
     * @return string
     */
    public function getTaskDeleteReasonLike()
    {
        return $this->container['task_delete_reason_like'];
    }

    /**
     * Sets task_delete_reason_like
     *
     * @param string $task_delete_reason_like task_delete_reason_like
     *
     * @return $this
     */
    public function setTaskDeleteReasonLike($task_delete_reason_like)
    {
        $this->container['task_delete_reason_like'] = $task_delete_reason_like;

        return $this;
    }

    /**
     * Gets task_assignee
     *
     * @return string
     */
    public function getTaskAssignee()
    {
        return $this->container['task_assignee'];
    }

    /**
     * Sets task_assignee
     *
     * @param string $task_assignee task_assignee
     *
     * @return $this
     */
    public function setTaskAssignee($task_assignee)
    {
        $this->container['task_assignee'] = $task_assignee;

        return $this;
    }

    /**
     * Gets task_assignee_like
     *
     * @return string
     */
    public function getTaskAssigneeLike()
    {
        return $this->container['task_assignee_like'];
    }

    /**
     * Sets task_assignee_like
     *
     * @param string $task_assignee_like task_assignee_like
     *
     * @return $this
     */
    public function setTaskAssigneeLike($task_assignee_like)
    {
        $this->container['task_assignee_like'] = $task_assignee_like;

        return $this;
    }

    /**
     * Gets task_owner
     *
     * @return string
     */
    public function getTaskOwner()
    {
        return $this->container['task_owner'];
    }

    /**
     * Sets task_owner
     *
     * @param string $task_owner task_owner
     *
     * @return $this
     */
    public function setTaskOwner($task_owner)
    {
        $this->container['task_owner'] = $task_owner;

        return $this;
    }

    /**
     * Gets task_owner_like
     *
     * @return string
     */
    public function getTaskOwnerLike()
    {
        return $this->container['task_owner_like'];
    }

    /**
     * Sets task_owner_like
     *
     * @param string $task_owner_like task_owner_like
     *
     * @return $this
     */
    public function setTaskOwnerLike($task_owner_like)
    {
        $this->container['task_owner_like'] = $task_owner_like;

        return $this;
    }

    /**
     * Gets task_involved_user
     *
     * @return string
     */
    public function getTaskInvolvedUser()
    {
        return $this->container['task_involved_user'];
    }

    /**
     * Sets task_involved_user
     *
     * @param string $task_involved_user task_involved_user
     *
     * @return $this
     */
    public function setTaskInvolvedUser($task_involved_user)
    {
        $this->container['task_involved_user'] = $task_involved_user;

        return $this;
    }

    /**
     * Gets task_priority
     *
     * @return int
     */
    public function getTaskPriority()
    {
        return $this->container['task_priority'];
    }

    /**
     * Sets task_priority
     *
     * @param int $task_priority task_priority
     *
     * @return $this
     */
    public function setTaskPriority($task_priority)
    {
        $this->container['task_priority'] = $task_priority;

        return $this;
    }

    /**
     * Gets task_min_priority
     *
     * @return int
     */
    public function getTaskMinPriority()
    {
        return $this->container['task_min_priority'];
    }

    /**
     * Sets task_min_priority
     *
     * @param int $task_min_priority task_min_priority
     *
     * @return $this
     */
    public function setTaskMinPriority($task_min_priority)
    {
        $this->container['task_min_priority'] = $task_min_priority;

        return $this;
    }

    /**
     * Gets task_max_priority
     *
     * @return int
     */
    public function getTaskMaxPriority()
    {
        return $this->container['task_max_priority'];
    }

    /**
     * Sets task_max_priority
     *
     * @param int $task_max_priority task_max_priority
     *
     * @return $this
     */
    public function setTaskMaxPriority($task_max_priority)
    {
        $this->container['task_max_priority'] = $task_max_priority;

        return $this;
    }

    /**
     * Gets finished
     *
     * @return bool
     */
    public function getFinished()
    {
        return $this->container['finished'];
    }

    /**
     * Sets finished
     *
     * @param bool $finished finished
     *
     * @return $this
     */
    public function setFinished($finished)
    {
        $this->container['finished'] = $finished;

        return $this;
    }

    /**
     * Gets process_finished
     *
     * @return bool
     */
    public function getProcessFinished()
    {
        return $this->container['process_finished'];
    }

    /**
     * Sets process_finished
     *
     * @param bool $process_finished process_finished
     *
     * @return $this
     */
    public function setProcessFinished($process_finished)
    {
        $this->container['process_finished'] = $process_finished;

        return $this;
    }

    /**
     * Gets parent_task_id
     *
     * @return string
     */
    public function getParentTaskId()
    {
        return $this->container['parent_task_id'];
    }

    /**
     * Sets parent_task_id
     *
     * @param string $parent_task_id parent_task_id
     *
     * @return $this
     */
    public function setParentTaskId($parent_task_id)
    {
        $this->container['parent_task_id'] = $parent_task_id;

        return $this;
    }

    /**
     * Gets due_date
     *
     * @return \DateTime
     */
    public function getDueDate()
    {
        return $this->container['due_date'];
    }

    /**
     * Sets due_date
     *
     * @param \DateTime $due_date due_date
     *
     * @return $this
     */
    public function setDueDate($due_date)
    {
        $this->container['due_date'] = $due_date;

        return $this;
    }

    /**
     * Gets due_date_after
     *
     * @return \DateTime
     */
    public function getDueDateAfter()
    {
        return $this->container['due_date_after'];
    }

    /**
     * Sets due_date_after
     *
     * @param \DateTime $due_date_after due_date_after
     *
     * @return $this
     */
    public function setDueDateAfter($due_date_after)
    {
        $this->container['due_date_after'] = $due_date_after;

        return $this;
    }

    /**
     * Gets due_date_before
     *
     * @return \DateTime
     */
    public function getDueDateBefore()
    {
        return $this->container['due_date_before'];
    }

    /**
     * Sets due_date_before
     *
     * @param \DateTime $due_date_before due_date_before
     *
     * @return $this
     */
    public function setDueDateBefore($due_date_before)
    {
        $this->container['due_date_before'] = $due_date_before;

        return $this;
    }

    /**
     * Gets without_due_date
     *
     * @return bool
     */
    public function getWithoutDueDate()
    {
        return $this->container['without_due_date'];
    }

    /**
     * Sets without_due_date
     *
     * @param bool $without_due_date without_due_date
     *
     * @return $this
     */
    public function setWithoutDueDate($without_due_date)
    {
        $this->container['without_due_date'] = $without_due_date;

        return $this;
    }

    /**
     * Gets task_created_on
     *
     * @return \DateTime
     */
    public function getTaskCreatedOn()
    {
        return $this->container['task_created_on'];
    }

    /**
     * Sets task_created_on
     *
     * @param \DateTime $task_created_on task_created_on
     *
     * @return $this
     */
    public function setTaskCreatedOn($task_created_on)
    {
        $this->container['task_created_on'] = $task_created_on;

        return $this;
    }

    /**
     * Gets task_created_before
     *
     * @return \DateTime
     */
    public function getTaskCreatedBefore()
    {
        return $this->container['task_created_before'];
    }

    /**
     * Sets task_created_before
     *
     * @param \DateTime $task_created_before task_created_before
     *
     * @return $this
     */
    public function setTaskCreatedBefore($task_created_before)
    {
        $this->container['task_created_before'] = $task_created_before;

        return $this;
    }

    /**
     * Gets task_created_after
     *
     * @return \DateTime
     */
    public function getTaskCreatedAfter()
    {
        return $this->container['task_created_after'];
    }

    /**
     * Sets task_created_after
     *
     * @param \DateTime $task_created_after task_created_after
     *
     * @return $this
     */
    public function setTaskCreatedAfter($task_created_after)
    {
        $this->container['task_created_after'] = $task_created_after;

        return $this;
    }

    /**
     * Gets task_completed_on
     *
     * @return \DateTime
     */
    public function getTaskCompletedOn()
    {
        return $this->container['task_completed_on'];
    }

    /**
     * Sets task_completed_on
     *
     * @param \DateTime $task_completed_on task_completed_on
     *
     * @return $this
     */
    public function setTaskCompletedOn($task_completed_on)
    {
        $this->container['task_completed_on'] = $task_completed_on;

        return $this;
    }

    /**
     * Gets task_completed_before
     *
     * @return \DateTime
     */
    public function getTaskCompletedBefore()
    {
        return $this->container['task_completed_before'];
    }

    /**
     * Sets task_completed_before
     *
     * @param \DateTime $task_completed_before task_completed_before
     *
     * @return $this
     */
    public function setTaskCompletedBefore($task_completed_before)
    {
        $this->container['task_completed_before'] = $task_completed_before;

        return $this;
    }

    /**
     * Gets task_completed_after
     *
     * @return \DateTime
     */
    public function getTaskCompletedAfter()
    {
        return $this->container['task_completed_after'];
    }

    /**
     * Sets task_completed_after
     *
     * @param \DateTime $task_completed_after task_completed_after
     *
     * @return $this
     */
    public function setTaskCompletedAfter($task_completed_after)
    {
        $this->container['task_completed_after'] = $task_completed_after;

        return $this;
    }

    /**
     * Gets include_task_local_variables
     *
     * @return bool
     */
    public function getIncludeTaskLocalVariables()
    {
        return $this->container['include_task_local_variables'];
    }

    /**
     * Sets include_task_local_variables
     *
     * @param bool $include_task_local_variables include_task_local_variables
     *
     * @return $this
     */
    public function setIncludeTaskLocalVariables($include_task_local_variables)
    {
        $this->container['include_task_local_variables'] = $include_task_local_variables;

        return $this;
    }

    /**
     * Gets include_process_variables
     *
     * @return bool
     */
    public function getIncludeProcessVariables()
    {
        return $this->container['include_process_variables'];
    }

    /**
     * Sets include_process_variables
     *
     * @param bool $include_process_variables include_process_variables
     *
     * @return $this
     */
    public function setIncludeProcessVariables($include_process_variables)
    {
        $this->container['include_process_variables'] = $include_process_variables;

        return $this;
    }

    /**
     * Gets task_variables
     *
     * @return \Swagger\Client\Model\QueryVariable[]
     */
    public function getTaskVariables()
    {
        return $this->container['task_variables'];
    }

    /**
     * Sets task_variables
     *
     * @param \Swagger\Client\Model\QueryVariable[] $task_variables task_variables
     *
     * @return $this
     */
    public function setTaskVariables($task_variables)
    {
        $this->container['task_variables'] = $task_variables;

        return $this;
    }

    /**
     * Gets process_variables
     *
     * @return \Swagger\Client\Model\QueryVariable[]
     */
    public function getProcessVariables()
    {
        return $this->container['process_variables'];
    }

    /**
     * Sets process_variables
     *
     * @param \Swagger\Client\Model\QueryVariable[] $process_variables process_variables
     *
     * @return $this
     */
    public function setProcessVariables($process_variables)
    {
        $this->container['process_variables'] = $process_variables;

        return $this;
    }

    /**
     * Gets tenant_id
     *
     * @return string
     */
    public function getTenantId()
    {
        return $this->container['tenant_id'];
    }

    /**
     * Sets tenant_id
     *
     * @param string $tenant_id tenant_id
     *
     * @return $this
     */
    public function setTenantId($tenant_id)
    {
        $this->container['tenant_id'] = $tenant_id;

        return $this;
    }

    /**
     * Gets tenant_id_like
     *
     * @return string
     */
    public function getTenantIdLike()
    {
        return $this->container['tenant_id_like'];
    }

    /**
     * Sets tenant_id_like
     *
     * @param string $tenant_id_like tenant_id_like
     *
     * @return $this
     */
    public function setTenantIdLike($tenant_id_like)
    {
        $this->container['tenant_id_like'] = $tenant_id_like;

        return $this;
    }

    /**
     * Gets without_tenant_id
     *
     * @return bool
     */
    public function getWithoutTenantId()
    {
        return $this->container['without_tenant_id'];
    }

    /**
     * Sets without_tenant_id
     *
     * @param bool $without_tenant_id without_tenant_id
     *
     * @return $this
     */
    public function setWithoutTenantId($without_tenant_id)
    {
        $this->container['without_tenant_id'] = $without_tenant_id;

        return $this;
    }

    /**
     * Gets task_candidate_group
     *
     * @return string
     */
    public function getTaskCandidateGroup()
    {
        return $this->container['task_candidate_group'];
    }

    /**
     * Sets task_candidate_group
     *
     * @param string $task_candidate_group task_candidate_group
     *
     * @return $this
     */
    public function setTaskCandidateGroup($task_candidate_group)
    {
        $this->container['task_candidate_group'] = $task_candidate_group;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param  integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param  integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param  integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

