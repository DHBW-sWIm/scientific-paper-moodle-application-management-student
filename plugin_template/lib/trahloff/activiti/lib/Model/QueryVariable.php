<?php
/**
 * QueryVariable
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * sWIm Activiti REST API
 *
 * here be dragons
 *
 * OpenAPI spec version: v0.2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * QueryVariable Class Doc Comment
 *
 * @category Class
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class QueryVariable implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'QueryVariable';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'name' => 'string',
        'operation' => 'string',
        'value' => 'object',
        'type' => 'string',
        'variable_operation' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'name' => null,
        'operation' => null,
        'value' => null,
        'type' => null,
        'variable_operation' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'operation' => 'operation',
        'value' => 'value',
        'type' => 'type',
        'variable_operation' => 'variableOperation'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'operation' => 'setOperation',
        'value' => 'setValue',
        'type' => 'setType',
        'variable_operation' => 'setVariableOperation'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'operation' => 'getOperation',
        'value' => 'getValue',
        'type' => 'getType',
        'variable_operation' => 'getVariableOperation'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const VARIABLE_OPERATION_EQUALS = 'EQUALS';
    const VARIABLE_OPERATION_NOT_EQUALS = 'NOT_EQUALS';
    const VARIABLE_OPERATION_EQUALS_IGNORE_CASE = 'EQUALS_IGNORE_CASE';
    const VARIABLE_OPERATION_NOT_EQUALS_IGNORE_CASE = 'NOT_EQUALS_IGNORE_CASE';
    const VARIABLE_OPERATION_LIKE = 'LIKE';
    const VARIABLE_OPERATION_LIKE_IGNORE_CASE = 'LIKE_IGNORE_CASE';
    const VARIABLE_OPERATION_GREATER_THAN = 'GREATER_THAN';
    const VARIABLE_OPERATION_GREATER_THAN_OR_EQUALS = 'GREATER_THAN_OR_EQUALS';
    const VARIABLE_OPERATION_LESS_THAN = 'LESS_THAN';
    const VARIABLE_OPERATION_LESS_THAN_OR_EQUALS = 'LESS_THAN_OR_EQUALS';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getVariableOperationAllowableValues()
    {
        return [
            self::VARIABLE_OPERATION_EQUALS,
            self::VARIABLE_OPERATION_NOT_EQUALS,
            self::VARIABLE_OPERATION_EQUALS_IGNORE_CASE,
            self::VARIABLE_OPERATION_NOT_EQUALS_IGNORE_CASE,
            self::VARIABLE_OPERATION_LIKE,
            self::VARIABLE_OPERATION_LIKE_IGNORE_CASE,
            self::VARIABLE_OPERATION_GREATER_THAN,
            self::VARIABLE_OPERATION_GREATER_THAN_OR_EQUALS,
            self::VARIABLE_OPERATION_LESS_THAN,
            self::VARIABLE_OPERATION_LESS_THAN_OR_EQUALS,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['operation'] = isset($data['operation']) ? $data['operation'] : null;
        $this->container['value'] = isset($data['value']) ? $data['value'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['variable_operation'] = isset($data['variable_operation']) ? $data['variable_operation'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getVariableOperationAllowableValues();
        if (!in_array($this->container['variable_operation'], $allowedValues)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'variable_operation', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        $allowedValues = $this->getVariableOperationAllowableValues();
        if (!in_array($this->container['variable_operation'], $allowedValues)) {
            return false;
        }
        return true;
    }


    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets operation
     *
     * @return string
     */
    public function getOperation()
    {
        return $this->container['operation'];
    }

    /**
     * Sets operation
     *
     * @param string $operation operation
     *
     * @return $this
     */
    public function setOperation($operation)
    {
        $this->container['operation'] = $operation;

        return $this;
    }

    /**
     * Gets value
     *
     * @return object
     */
    public function getValue()
    {
        return $this->container['value'];
    }

    /**
     * Sets value
     *
     * @param object $value value
     *
     * @return $this
     */
    public function setValue($value)
    {
        $this->container['value'] = $value;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets variable_operation
     *
     * @return string
     */
    public function getVariableOperation()
    {
        return $this->container['variable_operation'];
    }

    /**
     * Sets variable_operation
     *
     * @param string $variable_operation variable_operation
     *
     * @return $this
     */
    public function setVariableOperation($variable_operation)
    {
        $allowedValues = $this->getVariableOperationAllowableValues();
        if (!is_null($variable_operation) && !in_array($variable_operation, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'variable_operation', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['variable_operation'] = $variable_operation;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param  integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param  integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param  integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

