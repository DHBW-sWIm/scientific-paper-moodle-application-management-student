<?php
/**
 * HistoricProcessInstanceResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * sWIm Activiti REST API
 *
 * here be dragons
 *
 * OpenAPI spec version: v0.2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * HistoricProcessInstanceResponse Class Doc Comment
 *
 * @category Class
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class HistoricProcessInstanceResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'HistoricProcessInstanceResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'url' => 'string',
        'business_key' => 'string',
        'process_definition_id' => 'string',
        'process_definition_url' => 'string',
        'start_time' => '\DateTime',
        'end_time' => '\DateTime',
        'duration_in_millis' => 'int',
        'start_user_id' => 'string',
        'start_activity_id' => 'string',
        'end_activity_id' => 'string',
        'delete_reason' => 'string',
        'super_process_instance_id' => 'string',
        'variables' => '\Swagger\Client\Model\RestVariable[]',
        'tenant_id' => 'string',
        'name' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'url' => null,
        'business_key' => null,
        'process_definition_id' => null,
        'process_definition_url' => null,
        'start_time' => 'date-time',
        'end_time' => 'date-time',
        'duration_in_millis' => 'int64',
        'start_user_id' => null,
        'start_activity_id' => null,
        'end_activity_id' => null,
        'delete_reason' => null,
        'super_process_instance_id' => null,
        'variables' => null,
        'tenant_id' => null,
        'name' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'url' => 'url',
        'business_key' => 'businessKey',
        'process_definition_id' => 'processDefinitionId',
        'process_definition_url' => 'processDefinitionUrl',
        'start_time' => 'startTime',
        'end_time' => 'endTime',
        'duration_in_millis' => 'durationInMillis',
        'start_user_id' => 'startUserId',
        'start_activity_id' => 'startActivityId',
        'end_activity_id' => 'endActivityId',
        'delete_reason' => 'deleteReason',
        'super_process_instance_id' => 'superProcessInstanceId',
        'variables' => 'variables',
        'tenant_id' => 'tenantId',
        'name' => 'name'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'url' => 'setUrl',
        'business_key' => 'setBusinessKey',
        'process_definition_id' => 'setProcessDefinitionId',
        'process_definition_url' => 'setProcessDefinitionUrl',
        'start_time' => 'setStartTime',
        'end_time' => 'setEndTime',
        'duration_in_millis' => 'setDurationInMillis',
        'start_user_id' => 'setStartUserId',
        'start_activity_id' => 'setStartActivityId',
        'end_activity_id' => 'setEndActivityId',
        'delete_reason' => 'setDeleteReason',
        'super_process_instance_id' => 'setSuperProcessInstanceId',
        'variables' => 'setVariables',
        'tenant_id' => 'setTenantId',
        'name' => 'setName'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'url' => 'getUrl',
        'business_key' => 'getBusinessKey',
        'process_definition_id' => 'getProcessDefinitionId',
        'process_definition_url' => 'getProcessDefinitionUrl',
        'start_time' => 'getStartTime',
        'end_time' => 'getEndTime',
        'duration_in_millis' => 'getDurationInMillis',
        'start_user_id' => 'getStartUserId',
        'start_activity_id' => 'getStartActivityId',
        'end_activity_id' => 'getEndActivityId',
        'delete_reason' => 'getDeleteReason',
        'super_process_instance_id' => 'getSuperProcessInstanceId',
        'variables' => 'getVariables',
        'tenant_id' => 'getTenantId',
        'name' => 'getName'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['url'] = isset($data['url']) ? $data['url'] : null;
        $this->container['business_key'] = isset($data['business_key']) ? $data['business_key'] : null;
        $this->container['process_definition_id'] = isset($data['process_definition_id']) ? $data['process_definition_id'] : null;
        $this->container['process_definition_url'] = isset($data['process_definition_url']) ? $data['process_definition_url'] : null;
        $this->container['start_time'] = isset($data['start_time']) ? $data['start_time'] : null;
        $this->container['end_time'] = isset($data['end_time']) ? $data['end_time'] : null;
        $this->container['duration_in_millis'] = isset($data['duration_in_millis']) ? $data['duration_in_millis'] : null;
        $this->container['start_user_id'] = isset($data['start_user_id']) ? $data['start_user_id'] : null;
        $this->container['start_activity_id'] = isset($data['start_activity_id']) ? $data['start_activity_id'] : null;
        $this->container['end_activity_id'] = isset($data['end_activity_id']) ? $data['end_activity_id'] : null;
        $this->container['delete_reason'] = isset($data['delete_reason']) ? $data['delete_reason'] : null;
        $this->container['super_process_instance_id'] = isset($data['super_process_instance_id']) ? $data['super_process_instance_id'] : null;
        $this->container['variables'] = isset($data['variables']) ? $data['variables'] : null;
        $this->container['tenant_id'] = isset($data['tenant_id']) ? $data['tenant_id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string $url url
     *
     * @return $this
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets business_key
     *
     * @return string
     */
    public function getBusinessKey()
    {
        return $this->container['business_key'];
    }

    /**
     * Sets business_key
     *
     * @param string $business_key business_key
     *
     * @return $this
     */
    public function setBusinessKey($business_key)
    {
        $this->container['business_key'] = $business_key;

        return $this;
    }

    /**
     * Gets process_definition_id
     *
     * @return string
     */
    public function getProcessDefinitionId()
    {
        return $this->container['process_definition_id'];
    }

    /**
     * Sets process_definition_id
     *
     * @param string $process_definition_id process_definition_id
     *
     * @return $this
     */
    public function setProcessDefinitionId($process_definition_id)
    {
        $this->container['process_definition_id'] = $process_definition_id;

        return $this;
    }

    /**
     * Gets process_definition_url
     *
     * @return string
     */
    public function getProcessDefinitionUrl()
    {
        return $this->container['process_definition_url'];
    }

    /**
     * Sets process_definition_url
     *
     * @param string $process_definition_url process_definition_url
     *
     * @return $this
     */
    public function setProcessDefinitionUrl($process_definition_url)
    {
        $this->container['process_definition_url'] = $process_definition_url;

        return $this;
    }

    /**
     * Gets start_time
     *
     * @return \DateTime
     */
    public function getStartTime()
    {
        return $this->container['start_time'];
    }

    /**
     * Sets start_time
     *
     * @param \DateTime $start_time start_time
     *
     * @return $this
     */
    public function setStartTime($start_time)
    {
        $this->container['start_time'] = $start_time;

        return $this;
    }

    /**
     * Gets end_time
     *
     * @return \DateTime
     */
    public function getEndTime()
    {
        return $this->container['end_time'];
    }

    /**
     * Sets end_time
     *
     * @param \DateTime $end_time end_time
     *
     * @return $this
     */
    public function setEndTime($end_time)
    {
        $this->container['end_time'] = $end_time;

        return $this;
    }

    /**
     * Gets duration_in_millis
     *
     * @return int
     */
    public function getDurationInMillis()
    {
        return $this->container['duration_in_millis'];
    }

    /**
     * Sets duration_in_millis
     *
     * @param int $duration_in_millis duration_in_millis
     *
     * @return $this
     */
    public function setDurationInMillis($duration_in_millis)
    {
        $this->container['duration_in_millis'] = $duration_in_millis;

        return $this;
    }

    /**
     * Gets start_user_id
     *
     * @return string
     */
    public function getStartUserId()
    {
        return $this->container['start_user_id'];
    }

    /**
     * Sets start_user_id
     *
     * @param string $start_user_id start_user_id
     *
     * @return $this
     */
    public function setStartUserId($start_user_id)
    {
        $this->container['start_user_id'] = $start_user_id;

        return $this;
    }

    /**
     * Gets start_activity_id
     *
     * @return string
     */
    public function getStartActivityId()
    {
        return $this->container['start_activity_id'];
    }

    /**
     * Sets start_activity_id
     *
     * @param string $start_activity_id start_activity_id
     *
     * @return $this
     */
    public function setStartActivityId($start_activity_id)
    {
        $this->container['start_activity_id'] = $start_activity_id;

        return $this;
    }

    /**
     * Gets end_activity_id
     *
     * @return string
     */
    public function getEndActivityId()
    {
        return $this->container['end_activity_id'];
    }

    /**
     * Sets end_activity_id
     *
     * @param string $end_activity_id end_activity_id
     *
     * @return $this
     */
    public function setEndActivityId($end_activity_id)
    {
        $this->container['end_activity_id'] = $end_activity_id;

        return $this;
    }

    /**
     * Gets delete_reason
     *
     * @return string
     */
    public function getDeleteReason()
    {
        return $this->container['delete_reason'];
    }

    /**
     * Sets delete_reason
     *
     * @param string $delete_reason delete_reason
     *
     * @return $this
     */
    public function setDeleteReason($delete_reason)
    {
        $this->container['delete_reason'] = $delete_reason;

        return $this;
    }

    /**
     * Gets super_process_instance_id
     *
     * @return string
     */
    public function getSuperProcessInstanceId()
    {
        return $this->container['super_process_instance_id'];
    }

    /**
     * Sets super_process_instance_id
     *
     * @param string $super_process_instance_id super_process_instance_id
     *
     * @return $this
     */
    public function setSuperProcessInstanceId($super_process_instance_id)
    {
        $this->container['super_process_instance_id'] = $super_process_instance_id;

        return $this;
    }

    /**
     * Gets variables
     *
     * @return \Swagger\Client\Model\RestVariable[]
     */
    public function getVariables()
    {
        return $this->container['variables'];
    }

    /**
     * Sets variables
     *
     * @param \Swagger\Client\Model\RestVariable[] $variables variables
     *
     * @return $this
     */
    public function setVariables($variables)
    {
        $this->container['variables'] = $variables;

        return $this;
    }

    /**
     * Gets tenant_id
     *
     * @return string
     */
    public function getTenantId()
    {
        return $this->container['tenant_id'];
    }

    /**
     * Sets tenant_id
     *
     * @param string $tenant_id tenant_id
     *
     * @return $this
     */
    public function setTenantId($tenant_id)
    {
        $this->container['tenant_id'] = $tenant_id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param  integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param  integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param  integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

