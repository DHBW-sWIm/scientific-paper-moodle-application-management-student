<?php
/**
 * ExecutionResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * sWIm Activiti REST API
 *
 * here be dragons
 *
 * OpenAPI spec version: v0.2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ExecutionResponse Class Doc Comment
 *
 * @category Class
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class ExecutionResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ExecutionResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'url' => 'string',
        'parent_id' => 'string',
        'parent_url' => 'string',
        'super_execution_id' => 'string',
        'super_execution_url' => 'string',
        'process_instance_id' => 'string',
        'process_instance_url' => 'string',
        'suspended' => 'bool',
        'activity_id' => 'string',
        'tenant_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'url' => null,
        'parent_id' => null,
        'parent_url' => null,
        'super_execution_id' => null,
        'super_execution_url' => null,
        'process_instance_id' => null,
        'process_instance_url' => null,
        'suspended' => null,
        'activity_id' => null,
        'tenant_id' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'url' => 'url',
        'parent_id' => 'parentId',
        'parent_url' => 'parentUrl',
        'super_execution_id' => 'superExecutionId',
        'super_execution_url' => 'superExecutionUrl',
        'process_instance_id' => 'processInstanceId',
        'process_instance_url' => 'processInstanceUrl',
        'suspended' => 'suspended',
        'activity_id' => 'activityId',
        'tenant_id' => 'tenantId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'url' => 'setUrl',
        'parent_id' => 'setParentId',
        'parent_url' => 'setParentUrl',
        'super_execution_id' => 'setSuperExecutionId',
        'super_execution_url' => 'setSuperExecutionUrl',
        'process_instance_id' => 'setProcessInstanceId',
        'process_instance_url' => 'setProcessInstanceUrl',
        'suspended' => 'setSuspended',
        'activity_id' => 'setActivityId',
        'tenant_id' => 'setTenantId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'url' => 'getUrl',
        'parent_id' => 'getParentId',
        'parent_url' => 'getParentUrl',
        'super_execution_id' => 'getSuperExecutionId',
        'super_execution_url' => 'getSuperExecutionUrl',
        'process_instance_id' => 'getProcessInstanceId',
        'process_instance_url' => 'getProcessInstanceUrl',
        'suspended' => 'getSuspended',
        'activity_id' => 'getActivityId',
        'tenant_id' => 'getTenantId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['url'] = isset($data['url']) ? $data['url'] : null;
        $this->container['parent_id'] = isset($data['parent_id']) ? $data['parent_id'] : null;
        $this->container['parent_url'] = isset($data['parent_url']) ? $data['parent_url'] : null;
        $this->container['super_execution_id'] = isset($data['super_execution_id']) ? $data['super_execution_id'] : null;
        $this->container['super_execution_url'] = isset($data['super_execution_url']) ? $data['super_execution_url'] : null;
        $this->container['process_instance_id'] = isset($data['process_instance_id']) ? $data['process_instance_id'] : null;
        $this->container['process_instance_url'] = isset($data['process_instance_url']) ? $data['process_instance_url'] : null;
        $this->container['suspended'] = isset($data['suspended']) ? $data['suspended'] : false;
        $this->container['activity_id'] = isset($data['activity_id']) ? $data['activity_id'] : null;
        $this->container['tenant_id'] = isset($data['tenant_id']) ? $data['tenant_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string $url url
     *
     * @return $this
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets parent_id
     *
     * @return string
     */
    public function getParentId()
    {
        return $this->container['parent_id'];
    }

    /**
     * Sets parent_id
     *
     * @param string $parent_id parent_id
     *
     * @return $this
     */
    public function setParentId($parent_id)
    {
        $this->container['parent_id'] = $parent_id;

        return $this;
    }

    /**
     * Gets parent_url
     *
     * @return string
     */
    public function getParentUrl()
    {
        return $this->container['parent_url'];
    }

    /**
     * Sets parent_url
     *
     * @param string $parent_url parent_url
     *
     * @return $this
     */
    public function setParentUrl($parent_url)
    {
        $this->container['parent_url'] = $parent_url;

        return $this;
    }

    /**
     * Gets super_execution_id
     *
     * @return string
     */
    public function getSuperExecutionId()
    {
        return $this->container['super_execution_id'];
    }

    /**
     * Sets super_execution_id
     *
     * @param string $super_execution_id super_execution_id
     *
     * @return $this
     */
    public function setSuperExecutionId($super_execution_id)
    {
        $this->container['super_execution_id'] = $super_execution_id;

        return $this;
    }

    /**
     * Gets super_execution_url
     *
     * @return string
     */
    public function getSuperExecutionUrl()
    {
        return $this->container['super_execution_url'];
    }

    /**
     * Sets super_execution_url
     *
     * @param string $super_execution_url super_execution_url
     *
     * @return $this
     */
    public function setSuperExecutionUrl($super_execution_url)
    {
        $this->container['super_execution_url'] = $super_execution_url;

        return $this;
    }

    /**
     * Gets process_instance_id
     *
     * @return string
     */
    public function getProcessInstanceId()
    {
        return $this->container['process_instance_id'];
    }

    /**
     * Sets process_instance_id
     *
     * @param string $process_instance_id process_instance_id
     *
     * @return $this
     */
    public function setProcessInstanceId($process_instance_id)
    {
        $this->container['process_instance_id'] = $process_instance_id;

        return $this;
    }

    /**
     * Gets process_instance_url
     *
     * @return string
     */
    public function getProcessInstanceUrl()
    {
        return $this->container['process_instance_url'];
    }

    /**
     * Sets process_instance_url
     *
     * @param string $process_instance_url process_instance_url
     *
     * @return $this
     */
    public function setProcessInstanceUrl($process_instance_url)
    {
        $this->container['process_instance_url'] = $process_instance_url;

        return $this;
    }

    /**
     * Gets suspended
     *
     * @return bool
     */
    public function getSuspended()
    {
        return $this->container['suspended'];
    }

    /**
     * Sets suspended
     *
     * @param bool $suspended suspended
     *
     * @return $this
     */
    public function setSuspended($suspended)
    {
        $this->container['suspended'] = $suspended;

        return $this;
    }

    /**
     * Gets activity_id
     *
     * @return string
     */
    public function getActivityId()
    {
        return $this->container['activity_id'];
    }

    /**
     * Sets activity_id
     *
     * @param string $activity_id activity_id
     *
     * @return $this
     */
    public function setActivityId($activity_id)
    {
        $this->container['activity_id'] = $activity_id;

        return $this;
    }

    /**
     * Gets tenant_id
     *
     * @return string
     */
    public function getTenantId()
    {
        return $this->container['tenant_id'];
    }

    /**
     * Sets tenant_id
     *
     * @param string $tenant_id tenant_id
     *
     * @return $this
     */
    public function setTenantId($tenant_id)
    {
        $this->container['tenant_id'] = $tenant_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param  integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param  integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param  integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

