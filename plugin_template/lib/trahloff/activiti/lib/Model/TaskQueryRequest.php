<?php
/**
 * TaskQueryRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * sWIm Activiti REST API
 *
 * here be dragons
 *
 * OpenAPI spec version: v0.2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * TaskQueryRequest Class Doc Comment
 *
 * @category Class
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class TaskQueryRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'TaskQueryRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'start' => 'int',
        'size' => 'int',
        'sort' => 'string',
        'order' => 'string',
        'name' => 'string',
        'name_like' => 'string',
        'description' => 'string',
        'description_like' => 'string',
        'priority' => 'int',
        'minimum_priority' => 'int',
        'maximum_priority' => 'int',
        'assignee' => 'string',
        'assignee_like' => 'string',
        'owner' => 'string',
        'owner_like' => 'string',
        'unassigned' => 'bool',
        'delegation_state' => 'string',
        'candidate_user' => 'string',
        'candidate_group' => 'string',
        'candidate_group_in' => 'string[]',
        'involved_user' => 'string',
        'process_instance_id' => 'string',
        'process_instance_business_key' => 'string',
        'process_instance_business_key_like' => 'string',
        'process_instance_id_in' => 'string[]',
        'process_definition_id' => 'string',
        'process_definition_key' => 'string',
        'process_definition_name' => 'string',
        'process_definition_key_like' => 'string',
        'process_definition_name_like' => 'string',
        'execution_id' => 'string',
        'created_on' => '\DateTime',
        'created_before' => '\DateTime',
        'created_after' => '\DateTime',
        'exclude_sub_tasks' => 'bool',
        'task_definition_key' => 'string',
        'task_definition_key_like' => 'string',
        'due_date' => '\DateTime',
        'due_before' => '\DateTime',
        'due_after' => '\DateTime',
        'without_due_date' => 'bool',
        'active' => 'bool',
        'include_task_local_variables' => 'bool',
        'include_process_variables' => 'bool',
        'tenant_id' => 'string',
        'tenant_id_like' => 'string',
        'without_tenant_id' => 'bool',
        'candidate_or_assigned' => 'string',
        'category' => 'string',
        'task_variables' => '\Swagger\Client\Model\QueryVariable[]',
        'process_instance_variables' => '\Swagger\Client\Model\QueryVariable[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'start' => 'int32',
        'size' => 'int32',
        'sort' => null,
        'order' => null,
        'name' => null,
        'name_like' => null,
        'description' => null,
        'description_like' => null,
        'priority' => 'int32',
        'minimum_priority' => 'int32',
        'maximum_priority' => 'int32',
        'assignee' => null,
        'assignee_like' => null,
        'owner' => null,
        'owner_like' => null,
        'unassigned' => null,
        'delegation_state' => null,
        'candidate_user' => null,
        'candidate_group' => null,
        'candidate_group_in' => null,
        'involved_user' => null,
        'process_instance_id' => null,
        'process_instance_business_key' => null,
        'process_instance_business_key_like' => null,
        'process_instance_id_in' => null,
        'process_definition_id' => null,
        'process_definition_key' => null,
        'process_definition_name' => null,
        'process_definition_key_like' => null,
        'process_definition_name_like' => null,
        'execution_id' => null,
        'created_on' => 'date-time',
        'created_before' => 'date-time',
        'created_after' => 'date-time',
        'exclude_sub_tasks' => null,
        'task_definition_key' => null,
        'task_definition_key_like' => null,
        'due_date' => 'date-time',
        'due_before' => 'date-time',
        'due_after' => 'date-time',
        'without_due_date' => null,
        'active' => null,
        'include_task_local_variables' => null,
        'include_process_variables' => null,
        'tenant_id' => null,
        'tenant_id_like' => null,
        'without_tenant_id' => null,
        'candidate_or_assigned' => null,
        'category' => null,
        'task_variables' => null,
        'process_instance_variables' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'start' => 'start',
        'size' => 'size',
        'sort' => 'sort',
        'order' => 'order',
        'name' => 'name',
        'name_like' => 'nameLike',
        'description' => 'description',
        'description_like' => 'descriptionLike',
        'priority' => 'priority',
        'minimum_priority' => 'minimumPriority',
        'maximum_priority' => 'maximumPriority',
        'assignee' => 'assignee',
        'assignee_like' => 'assigneeLike',
        'owner' => 'owner',
        'owner_like' => 'ownerLike',
        'unassigned' => 'unassigned',
        'delegation_state' => 'delegationState',
        'candidate_user' => 'candidateUser',
        'candidate_group' => 'candidateGroup',
        'candidate_group_in' => 'candidateGroupIn',
        'involved_user' => 'involvedUser',
        'process_instance_id' => 'processInstanceId',
        'process_instance_business_key' => 'processInstanceBusinessKey',
        'process_instance_business_key_like' => 'processInstanceBusinessKeyLike',
        'process_instance_id_in' => 'processInstanceIdIn',
        'process_definition_id' => 'processDefinitionId',
        'process_definition_key' => 'processDefinitionKey',
        'process_definition_name' => 'processDefinitionName',
        'process_definition_key_like' => 'processDefinitionKeyLike',
        'process_definition_name_like' => 'processDefinitionNameLike',
        'execution_id' => 'executionId',
        'created_on' => 'createdOn',
        'created_before' => 'createdBefore',
        'created_after' => 'createdAfter',
        'exclude_sub_tasks' => 'excludeSubTasks',
        'task_definition_key' => 'taskDefinitionKey',
        'task_definition_key_like' => 'taskDefinitionKeyLike',
        'due_date' => 'dueDate',
        'due_before' => 'dueBefore',
        'due_after' => 'dueAfter',
        'without_due_date' => 'withoutDueDate',
        'active' => 'active',
        'include_task_local_variables' => 'includeTaskLocalVariables',
        'include_process_variables' => 'includeProcessVariables',
        'tenant_id' => 'tenantId',
        'tenant_id_like' => 'tenantIdLike',
        'without_tenant_id' => 'withoutTenantId',
        'candidate_or_assigned' => 'candidateOrAssigned',
        'category' => 'category',
        'task_variables' => 'taskVariables',
        'process_instance_variables' => 'processInstanceVariables'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'start' => 'setStart',
        'size' => 'setSize',
        'sort' => 'setSort',
        'order' => 'setOrder',
        'name' => 'setName',
        'name_like' => 'setNameLike',
        'description' => 'setDescription',
        'description_like' => 'setDescriptionLike',
        'priority' => 'setPriority',
        'minimum_priority' => 'setMinimumPriority',
        'maximum_priority' => 'setMaximumPriority',
        'assignee' => 'setAssignee',
        'assignee_like' => 'setAssigneeLike',
        'owner' => 'setOwner',
        'owner_like' => 'setOwnerLike',
        'unassigned' => 'setUnassigned',
        'delegation_state' => 'setDelegationState',
        'candidate_user' => 'setCandidateUser',
        'candidate_group' => 'setCandidateGroup',
        'candidate_group_in' => 'setCandidateGroupIn',
        'involved_user' => 'setInvolvedUser',
        'process_instance_id' => 'setProcessInstanceId',
        'process_instance_business_key' => 'setProcessInstanceBusinessKey',
        'process_instance_business_key_like' => 'setProcessInstanceBusinessKeyLike',
        'process_instance_id_in' => 'setProcessInstanceIdIn',
        'process_definition_id' => 'setProcessDefinitionId',
        'process_definition_key' => 'setProcessDefinitionKey',
        'process_definition_name' => 'setProcessDefinitionName',
        'process_definition_key_like' => 'setProcessDefinitionKeyLike',
        'process_definition_name_like' => 'setProcessDefinitionNameLike',
        'execution_id' => 'setExecutionId',
        'created_on' => 'setCreatedOn',
        'created_before' => 'setCreatedBefore',
        'created_after' => 'setCreatedAfter',
        'exclude_sub_tasks' => 'setExcludeSubTasks',
        'task_definition_key' => 'setTaskDefinitionKey',
        'task_definition_key_like' => 'setTaskDefinitionKeyLike',
        'due_date' => 'setDueDate',
        'due_before' => 'setDueBefore',
        'due_after' => 'setDueAfter',
        'without_due_date' => 'setWithoutDueDate',
        'active' => 'setActive',
        'include_task_local_variables' => 'setIncludeTaskLocalVariables',
        'include_process_variables' => 'setIncludeProcessVariables',
        'tenant_id' => 'setTenantId',
        'tenant_id_like' => 'setTenantIdLike',
        'without_tenant_id' => 'setWithoutTenantId',
        'candidate_or_assigned' => 'setCandidateOrAssigned',
        'category' => 'setCategory',
        'task_variables' => 'setTaskVariables',
        'process_instance_variables' => 'setProcessInstanceVariables'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'start' => 'getStart',
        'size' => 'getSize',
        'sort' => 'getSort',
        'order' => 'getOrder',
        'name' => 'getName',
        'name_like' => 'getNameLike',
        'description' => 'getDescription',
        'description_like' => 'getDescriptionLike',
        'priority' => 'getPriority',
        'minimum_priority' => 'getMinimumPriority',
        'maximum_priority' => 'getMaximumPriority',
        'assignee' => 'getAssignee',
        'assignee_like' => 'getAssigneeLike',
        'owner' => 'getOwner',
        'owner_like' => 'getOwnerLike',
        'unassigned' => 'getUnassigned',
        'delegation_state' => 'getDelegationState',
        'candidate_user' => 'getCandidateUser',
        'candidate_group' => 'getCandidateGroup',
        'candidate_group_in' => 'getCandidateGroupIn',
        'involved_user' => 'getInvolvedUser',
        'process_instance_id' => 'getProcessInstanceId',
        'process_instance_business_key' => 'getProcessInstanceBusinessKey',
        'process_instance_business_key_like' => 'getProcessInstanceBusinessKeyLike',
        'process_instance_id_in' => 'getProcessInstanceIdIn',
        'process_definition_id' => 'getProcessDefinitionId',
        'process_definition_key' => 'getProcessDefinitionKey',
        'process_definition_name' => 'getProcessDefinitionName',
        'process_definition_key_like' => 'getProcessDefinitionKeyLike',
        'process_definition_name_like' => 'getProcessDefinitionNameLike',
        'execution_id' => 'getExecutionId',
        'created_on' => 'getCreatedOn',
        'created_before' => 'getCreatedBefore',
        'created_after' => 'getCreatedAfter',
        'exclude_sub_tasks' => 'getExcludeSubTasks',
        'task_definition_key' => 'getTaskDefinitionKey',
        'task_definition_key_like' => 'getTaskDefinitionKeyLike',
        'due_date' => 'getDueDate',
        'due_before' => 'getDueBefore',
        'due_after' => 'getDueAfter',
        'without_due_date' => 'getWithoutDueDate',
        'active' => 'getActive',
        'include_task_local_variables' => 'getIncludeTaskLocalVariables',
        'include_process_variables' => 'getIncludeProcessVariables',
        'tenant_id' => 'getTenantId',
        'tenant_id_like' => 'getTenantIdLike',
        'without_tenant_id' => 'getWithoutTenantId',
        'candidate_or_assigned' => 'getCandidateOrAssigned',
        'category' => 'getCategory',
        'task_variables' => 'getTaskVariables',
        'process_instance_variables' => 'getProcessInstanceVariables'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['start'] = isset($data['start']) ? $data['start'] : null;
        $this->container['size'] = isset($data['size']) ? $data['size'] : null;
        $this->container['sort'] = isset($data['sort']) ? $data['sort'] : null;
        $this->container['order'] = isset($data['order']) ? $data['order'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['name_like'] = isset($data['name_like']) ? $data['name_like'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['description_like'] = isset($data['description_like']) ? $data['description_like'] : null;
        $this->container['priority'] = isset($data['priority']) ? $data['priority'] : null;
        $this->container['minimum_priority'] = isset($data['minimum_priority']) ? $data['minimum_priority'] : null;
        $this->container['maximum_priority'] = isset($data['maximum_priority']) ? $data['maximum_priority'] : null;
        $this->container['assignee'] = isset($data['assignee']) ? $data['assignee'] : null;
        $this->container['assignee_like'] = isset($data['assignee_like']) ? $data['assignee_like'] : null;
        $this->container['owner'] = isset($data['owner']) ? $data['owner'] : null;
        $this->container['owner_like'] = isset($data['owner_like']) ? $data['owner_like'] : null;
        $this->container['unassigned'] = isset($data['unassigned']) ? $data['unassigned'] : false;
        $this->container['delegation_state'] = isset($data['delegation_state']) ? $data['delegation_state'] : null;
        $this->container['candidate_user'] = isset($data['candidate_user']) ? $data['candidate_user'] : null;
        $this->container['candidate_group'] = isset($data['candidate_group']) ? $data['candidate_group'] : null;
        $this->container['candidate_group_in'] = isset($data['candidate_group_in']) ? $data['candidate_group_in'] : null;
        $this->container['involved_user'] = isset($data['involved_user']) ? $data['involved_user'] : null;
        $this->container['process_instance_id'] = isset($data['process_instance_id']) ? $data['process_instance_id'] : null;
        $this->container['process_instance_business_key'] = isset($data['process_instance_business_key']) ? $data['process_instance_business_key'] : null;
        $this->container['process_instance_business_key_like'] = isset($data['process_instance_business_key_like']) ? $data['process_instance_business_key_like'] : null;
        $this->container['process_instance_id_in'] = isset($data['process_instance_id_in']) ? $data['process_instance_id_in'] : null;
        $this->container['process_definition_id'] = isset($data['process_definition_id']) ? $data['process_definition_id'] : null;
        $this->container['process_definition_key'] = isset($data['process_definition_key']) ? $data['process_definition_key'] : null;
        $this->container['process_definition_name'] = isset($data['process_definition_name']) ? $data['process_definition_name'] : null;
        $this->container['process_definition_key_like'] = isset($data['process_definition_key_like']) ? $data['process_definition_key_like'] : null;
        $this->container['process_definition_name_like'] = isset($data['process_definition_name_like']) ? $data['process_definition_name_like'] : null;
        $this->container['execution_id'] = isset($data['execution_id']) ? $data['execution_id'] : null;
        $this->container['created_on'] = isset($data['created_on']) ? $data['created_on'] : null;
        $this->container['created_before'] = isset($data['created_before']) ? $data['created_before'] : null;
        $this->container['created_after'] = isset($data['created_after']) ? $data['created_after'] : null;
        $this->container['exclude_sub_tasks'] = isset($data['exclude_sub_tasks']) ? $data['exclude_sub_tasks'] : false;
        $this->container['task_definition_key'] = isset($data['task_definition_key']) ? $data['task_definition_key'] : null;
        $this->container['task_definition_key_like'] = isset($data['task_definition_key_like']) ? $data['task_definition_key_like'] : null;
        $this->container['due_date'] = isset($data['due_date']) ? $data['due_date'] : null;
        $this->container['due_before'] = isset($data['due_before']) ? $data['due_before'] : null;
        $this->container['due_after'] = isset($data['due_after']) ? $data['due_after'] : null;
        $this->container['without_due_date'] = isset($data['without_due_date']) ? $data['without_due_date'] : false;
        $this->container['active'] = isset($data['active']) ? $data['active'] : false;
        $this->container['include_task_local_variables'] = isset($data['include_task_local_variables']) ? $data['include_task_local_variables'] : false;
        $this->container['include_process_variables'] = isset($data['include_process_variables']) ? $data['include_process_variables'] : false;
        $this->container['tenant_id'] = isset($data['tenant_id']) ? $data['tenant_id'] : null;
        $this->container['tenant_id_like'] = isset($data['tenant_id_like']) ? $data['tenant_id_like'] : null;
        $this->container['without_tenant_id'] = isset($data['without_tenant_id']) ? $data['without_tenant_id'] : false;
        $this->container['candidate_or_assigned'] = isset($data['candidate_or_assigned']) ? $data['candidate_or_assigned'] : null;
        $this->container['category'] = isset($data['category']) ? $data['category'] : null;
        $this->container['task_variables'] = isset($data['task_variables']) ? $data['task_variables'] : null;
        $this->container['process_instance_variables'] = isset($data['process_instance_variables']) ? $data['process_instance_variables'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets start
     *
     * @return int
     */
    public function getStart()
    {
        return $this->container['start'];
    }

    /**
     * Sets start
     *
     * @param int $start start
     *
     * @return $this
     */
    public function setStart($start)
    {
        $this->container['start'] = $start;

        return $this;
    }

    /**
     * Gets size
     *
     * @return int
     */
    public function getSize()
    {
        return $this->container['size'];
    }

    /**
     * Sets size
     *
     * @param int $size size
     *
     * @return $this
     */
    public function setSize($size)
    {
        $this->container['size'] = $size;

        return $this;
    }

    /**
     * Gets sort
     *
     * @return string
     */
    public function getSort()
    {
        return $this->container['sort'];
    }

    /**
     * Sets sort
     *
     * @param string $sort sort
     *
     * @return $this
     */
    public function setSort($sort)
    {
        $this->container['sort'] = $sort;

        return $this;
    }

    /**
     * Gets order
     *
     * @return string
     */
    public function getOrder()
    {
        return $this->container['order'];
    }

    /**
     * Sets order
     *
     * @param string $order order
     *
     * @return $this
     */
    public function setOrder($order)
    {
        $this->container['order'] = $order;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets name_like
     *
     * @return string
     */
    public function getNameLike()
    {
        return $this->container['name_like'];
    }

    /**
     * Sets name_like
     *
     * @param string $name_like name_like
     *
     * @return $this
     */
    public function setNameLike($name_like)
    {
        $this->container['name_like'] = $name_like;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets description_like
     *
     * @return string
     */
    public function getDescriptionLike()
    {
        return $this->container['description_like'];
    }

    /**
     * Sets description_like
     *
     * @param string $description_like description_like
     *
     * @return $this
     */
    public function setDescriptionLike($description_like)
    {
        $this->container['description_like'] = $description_like;

        return $this;
    }

    /**
     * Gets priority
     *
     * @return int
     */
    public function getPriority()
    {
        return $this->container['priority'];
    }

    /**
     * Sets priority
     *
     * @param int $priority priority
     *
     * @return $this
     */
    public function setPriority($priority)
    {
        $this->container['priority'] = $priority;

        return $this;
    }

    /**
     * Gets minimum_priority
     *
     * @return int
     */
    public function getMinimumPriority()
    {
        return $this->container['minimum_priority'];
    }

    /**
     * Sets minimum_priority
     *
     * @param int $minimum_priority minimum_priority
     *
     * @return $this
     */
    public function setMinimumPriority($minimum_priority)
    {
        $this->container['minimum_priority'] = $minimum_priority;

        return $this;
    }

    /**
     * Gets maximum_priority
     *
     * @return int
     */
    public function getMaximumPriority()
    {
        return $this->container['maximum_priority'];
    }

    /**
     * Sets maximum_priority
     *
     * @param int $maximum_priority maximum_priority
     *
     * @return $this
     */
    public function setMaximumPriority($maximum_priority)
    {
        $this->container['maximum_priority'] = $maximum_priority;

        return $this;
    }

    /**
     * Gets assignee
     *
     * @return string
     */
    public function getAssignee()
    {
        return $this->container['assignee'];
    }

    /**
     * Sets assignee
     *
     * @param string $assignee assignee
     *
     * @return $this
     */
    public function setAssignee($assignee)
    {
        $this->container['assignee'] = $assignee;

        return $this;
    }

    /**
     * Gets assignee_like
     *
     * @return string
     */
    public function getAssigneeLike()
    {
        return $this->container['assignee_like'];
    }

    /**
     * Sets assignee_like
     *
     * @param string $assignee_like assignee_like
     *
     * @return $this
     */
    public function setAssigneeLike($assignee_like)
    {
        $this->container['assignee_like'] = $assignee_like;

        return $this;
    }

    /**
     * Gets owner
     *
     * @return string
     */
    public function getOwner()
    {
        return $this->container['owner'];
    }

    /**
     * Sets owner
     *
     * @param string $owner owner
     *
     * @return $this
     */
    public function setOwner($owner)
    {
        $this->container['owner'] = $owner;

        return $this;
    }

    /**
     * Gets owner_like
     *
     * @return string
     */
    public function getOwnerLike()
    {
        return $this->container['owner_like'];
    }

    /**
     * Sets owner_like
     *
     * @param string $owner_like owner_like
     *
     * @return $this
     */
    public function setOwnerLike($owner_like)
    {
        $this->container['owner_like'] = $owner_like;

        return $this;
    }

    /**
     * Gets unassigned
     *
     * @return bool
     */
    public function getUnassigned()
    {
        return $this->container['unassigned'];
    }

    /**
     * Sets unassigned
     *
     * @param bool $unassigned unassigned
     *
     * @return $this
     */
    public function setUnassigned($unassigned)
    {
        $this->container['unassigned'] = $unassigned;

        return $this;
    }

    /**
     * Gets delegation_state
     *
     * @return string
     */
    public function getDelegationState()
    {
        return $this->container['delegation_state'];
    }

    /**
     * Sets delegation_state
     *
     * @param string $delegation_state delegation_state
     *
     * @return $this
     */
    public function setDelegationState($delegation_state)
    {
        $this->container['delegation_state'] = $delegation_state;

        return $this;
    }

    /**
     * Gets candidate_user
     *
     * @return string
     */
    public function getCandidateUser()
    {
        return $this->container['candidate_user'];
    }

    /**
     * Sets candidate_user
     *
     * @param string $candidate_user candidate_user
     *
     * @return $this
     */
    public function setCandidateUser($candidate_user)
    {
        $this->container['candidate_user'] = $candidate_user;

        return $this;
    }

    /**
     * Gets candidate_group
     *
     * @return string
     */
    public function getCandidateGroup()
    {
        return $this->container['candidate_group'];
    }

    /**
     * Sets candidate_group
     *
     * @param string $candidate_group candidate_group
     *
     * @return $this
     */
    public function setCandidateGroup($candidate_group)
    {
        $this->container['candidate_group'] = $candidate_group;

        return $this;
    }

    /**
     * Gets candidate_group_in
     *
     * @return string[]
     */
    public function getCandidateGroupIn()
    {
        return $this->container['candidate_group_in'];
    }

    /**
     * Sets candidate_group_in
     *
     * @param string[] $candidate_group_in candidate_group_in
     *
     * @return $this
     */
    public function setCandidateGroupIn($candidate_group_in)
    {
        $this->container['candidate_group_in'] = $candidate_group_in;

        return $this;
    }

    /**
     * Gets involved_user
     *
     * @return string
     */
    public function getInvolvedUser()
    {
        return $this->container['involved_user'];
    }

    /**
     * Sets involved_user
     *
     * @param string $involved_user involved_user
     *
     * @return $this
     */
    public function setInvolvedUser($involved_user)
    {
        $this->container['involved_user'] = $involved_user;

        return $this;
    }

    /**
     * Gets process_instance_id
     *
     * @return string
     */
    public function getProcessInstanceId()
    {
        return $this->container['process_instance_id'];
    }

    /**
     * Sets process_instance_id
     *
     * @param string $process_instance_id process_instance_id
     *
     * @return $this
     */
    public function setProcessInstanceId($process_instance_id)
    {
        $this->container['process_instance_id'] = $process_instance_id;

        return $this;
    }

    /**
     * Gets process_instance_business_key
     *
     * @return string
     */
    public function getProcessInstanceBusinessKey()
    {
        return $this->container['process_instance_business_key'];
    }

    /**
     * Sets process_instance_business_key
     *
     * @param string $process_instance_business_key process_instance_business_key
     *
     * @return $this
     */
    public function setProcessInstanceBusinessKey($process_instance_business_key)
    {
        $this->container['process_instance_business_key'] = $process_instance_business_key;

        return $this;
    }

    /**
     * Gets process_instance_business_key_like
     *
     * @return string
     */
    public function getProcessInstanceBusinessKeyLike()
    {
        return $this->container['process_instance_business_key_like'];
    }

    /**
     * Sets process_instance_business_key_like
     *
     * @param string $process_instance_business_key_like process_instance_business_key_like
     *
     * @return $this
     */
    public function setProcessInstanceBusinessKeyLike($process_instance_business_key_like)
    {
        $this->container['process_instance_business_key_like'] = $process_instance_business_key_like;

        return $this;
    }

    /**
     * Gets process_instance_id_in
     *
     * @return string[]
     */
    public function getProcessInstanceIdIn()
    {
        return $this->container['process_instance_id_in'];
    }

    /**
     * Sets process_instance_id_in
     *
     * @param string[] $process_instance_id_in process_instance_id_in
     *
     * @return $this
     */
    public function setProcessInstanceIdIn($process_instance_id_in)
    {
        $this->container['process_instance_id_in'] = $process_instance_id_in;

        return $this;
    }

    /**
     * Gets process_definition_id
     *
     * @return string
     */
    public function getProcessDefinitionId()
    {
        return $this->container['process_definition_id'];
    }

    /**
     * Sets process_definition_id
     *
     * @param string $process_definition_id process_definition_id
     *
     * @return $this
     */
    public function setProcessDefinitionId($process_definition_id)
    {
        $this->container['process_definition_id'] = $process_definition_id;

        return $this;
    }

    /**
     * Gets process_definition_key
     *
     * @return string
     */
    public function getProcessDefinitionKey()
    {
        return $this->container['process_definition_key'];
    }

    /**
     * Sets process_definition_key
     *
     * @param string $process_definition_key process_definition_key
     *
     * @return $this
     */
    public function setProcessDefinitionKey($process_definition_key)
    {
        $this->container['process_definition_key'] = $process_definition_key;

        return $this;
    }

    /**
     * Gets process_definition_name
     *
     * @return string
     */
    public function getProcessDefinitionName()
    {
        return $this->container['process_definition_name'];
    }

    /**
     * Sets process_definition_name
     *
     * @param string $process_definition_name process_definition_name
     *
     * @return $this
     */
    public function setProcessDefinitionName($process_definition_name)
    {
        $this->container['process_definition_name'] = $process_definition_name;

        return $this;
    }

    /**
     * Gets process_definition_key_like
     *
     * @return string
     */
    public function getProcessDefinitionKeyLike()
    {
        return $this->container['process_definition_key_like'];
    }

    /**
     * Sets process_definition_key_like
     *
     * @param string $process_definition_key_like process_definition_key_like
     *
     * @return $this
     */
    public function setProcessDefinitionKeyLike($process_definition_key_like)
    {
        $this->container['process_definition_key_like'] = $process_definition_key_like;

        return $this;
    }

    /**
     * Gets process_definition_name_like
     *
     * @return string
     */
    public function getProcessDefinitionNameLike()
    {
        return $this->container['process_definition_name_like'];
    }

    /**
     * Sets process_definition_name_like
     *
     * @param string $process_definition_name_like process_definition_name_like
     *
     * @return $this
     */
    public function setProcessDefinitionNameLike($process_definition_name_like)
    {
        $this->container['process_definition_name_like'] = $process_definition_name_like;

        return $this;
    }

    /**
     * Gets execution_id
     *
     * @return string
     */
    public function getExecutionId()
    {
        return $this->container['execution_id'];
    }

    /**
     * Sets execution_id
     *
     * @param string $execution_id execution_id
     *
     * @return $this
     */
    public function setExecutionId($execution_id)
    {
        $this->container['execution_id'] = $execution_id;

        return $this;
    }

    /**
     * Gets created_on
     *
     * @return \DateTime
     */
    public function getCreatedOn()
    {
        return $this->container['created_on'];
    }

    /**
     * Sets created_on
     *
     * @param \DateTime $created_on created_on
     *
     * @return $this
     */
    public function setCreatedOn($created_on)
    {
        $this->container['created_on'] = $created_on;

        return $this;
    }

    /**
     * Gets created_before
     *
     * @return \DateTime
     */
    public function getCreatedBefore()
    {
        return $this->container['created_before'];
    }

    /**
     * Sets created_before
     *
     * @param \DateTime $created_before created_before
     *
     * @return $this
     */
    public function setCreatedBefore($created_before)
    {
        $this->container['created_before'] = $created_before;

        return $this;
    }

    /**
     * Gets created_after
     *
     * @return \DateTime
     */
    public function getCreatedAfter()
    {
        return $this->container['created_after'];
    }

    /**
     * Sets created_after
     *
     * @param \DateTime $created_after created_after
     *
     * @return $this
     */
    public function setCreatedAfter($created_after)
    {
        $this->container['created_after'] = $created_after;

        return $this;
    }

    /**
     * Gets exclude_sub_tasks
     *
     * @return bool
     */
    public function getExcludeSubTasks()
    {
        return $this->container['exclude_sub_tasks'];
    }

    /**
     * Sets exclude_sub_tasks
     *
     * @param bool $exclude_sub_tasks exclude_sub_tasks
     *
     * @return $this
     */
    public function setExcludeSubTasks($exclude_sub_tasks)
    {
        $this->container['exclude_sub_tasks'] = $exclude_sub_tasks;

        return $this;
    }

    /**
     * Gets task_definition_key
     *
     * @return string
     */
    public function getTaskDefinitionKey()
    {
        return $this->container['task_definition_key'];
    }

    /**
     * Sets task_definition_key
     *
     * @param string $task_definition_key task_definition_key
     *
     * @return $this
     */
    public function setTaskDefinitionKey($task_definition_key)
    {
        $this->container['task_definition_key'] = $task_definition_key;

        return $this;
    }

    /**
     * Gets task_definition_key_like
     *
     * @return string
     */
    public function getTaskDefinitionKeyLike()
    {
        return $this->container['task_definition_key_like'];
    }

    /**
     * Sets task_definition_key_like
     *
     * @param string $task_definition_key_like task_definition_key_like
     *
     * @return $this
     */
    public function setTaskDefinitionKeyLike($task_definition_key_like)
    {
        $this->container['task_definition_key_like'] = $task_definition_key_like;

        return $this;
    }

    /**
     * Gets due_date
     *
     * @return \DateTime
     */
    public function getDueDate()
    {
        return $this->container['due_date'];
    }

    /**
     * Sets due_date
     *
     * @param \DateTime $due_date due_date
     *
     * @return $this
     */
    public function setDueDate($due_date)
    {
        $this->container['due_date'] = $due_date;

        return $this;
    }

    /**
     * Gets due_before
     *
     * @return \DateTime
     */
    public function getDueBefore()
    {
        return $this->container['due_before'];
    }

    /**
     * Sets due_before
     *
     * @param \DateTime $due_before due_before
     *
     * @return $this
     */
    public function setDueBefore($due_before)
    {
        $this->container['due_before'] = $due_before;

        return $this;
    }

    /**
     * Gets due_after
     *
     * @return \DateTime
     */
    public function getDueAfter()
    {
        return $this->container['due_after'];
    }

    /**
     * Sets due_after
     *
     * @param \DateTime $due_after due_after
     *
     * @return $this
     */
    public function setDueAfter($due_after)
    {
        $this->container['due_after'] = $due_after;

        return $this;
    }

    /**
     * Gets without_due_date
     *
     * @return bool
     */
    public function getWithoutDueDate()
    {
        return $this->container['without_due_date'];
    }

    /**
     * Sets without_due_date
     *
     * @param bool $without_due_date without_due_date
     *
     * @return $this
     */
    public function setWithoutDueDate($without_due_date)
    {
        $this->container['without_due_date'] = $without_due_date;

        return $this;
    }

    /**
     * Gets active
     *
     * @return bool
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param bool $active active
     *
     * @return $this
     */
    public function setActive($active)
    {
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets include_task_local_variables
     *
     * @return bool
     */
    public function getIncludeTaskLocalVariables()
    {
        return $this->container['include_task_local_variables'];
    }

    /**
     * Sets include_task_local_variables
     *
     * @param bool $include_task_local_variables include_task_local_variables
     *
     * @return $this
     */
    public function setIncludeTaskLocalVariables($include_task_local_variables)
    {
        $this->container['include_task_local_variables'] = $include_task_local_variables;

        return $this;
    }

    /**
     * Gets include_process_variables
     *
     * @return bool
     */
    public function getIncludeProcessVariables()
    {
        return $this->container['include_process_variables'];
    }

    /**
     * Sets include_process_variables
     *
     * @param bool $include_process_variables include_process_variables
     *
     * @return $this
     */
    public function setIncludeProcessVariables($include_process_variables)
    {
        $this->container['include_process_variables'] = $include_process_variables;

        return $this;
    }

    /**
     * Gets tenant_id
     *
     * @return string
     */
    public function getTenantId()
    {
        return $this->container['tenant_id'];
    }

    /**
     * Sets tenant_id
     *
     * @param string $tenant_id tenant_id
     *
     * @return $this
     */
    public function setTenantId($tenant_id)
    {
        $this->container['tenant_id'] = $tenant_id;

        return $this;
    }

    /**
     * Gets tenant_id_like
     *
     * @return string
     */
    public function getTenantIdLike()
    {
        return $this->container['tenant_id_like'];
    }

    /**
     * Sets tenant_id_like
     *
     * @param string $tenant_id_like tenant_id_like
     *
     * @return $this
     */
    public function setTenantIdLike($tenant_id_like)
    {
        $this->container['tenant_id_like'] = $tenant_id_like;

        return $this;
    }

    /**
     * Gets without_tenant_id
     *
     * @return bool
     */
    public function getWithoutTenantId()
    {
        return $this->container['without_tenant_id'];
    }

    /**
     * Sets without_tenant_id
     *
     * @param bool $without_tenant_id without_tenant_id
     *
     * @return $this
     */
    public function setWithoutTenantId($without_tenant_id)
    {
        $this->container['without_tenant_id'] = $without_tenant_id;

        return $this;
    }

    /**
     * Gets candidate_or_assigned
     *
     * @return string
     */
    public function getCandidateOrAssigned()
    {
        return $this->container['candidate_or_assigned'];
    }

    /**
     * Sets candidate_or_assigned
     *
     * @param string $candidate_or_assigned candidate_or_assigned
     *
     * @return $this
     */
    public function setCandidateOrAssigned($candidate_or_assigned)
    {
        $this->container['candidate_or_assigned'] = $candidate_or_assigned;

        return $this;
    }

    /**
     * Gets category
     *
     * @return string
     */
    public function getCategory()
    {
        return $this->container['category'];
    }

    /**
     * Sets category
     *
     * @param string $category category
     *
     * @return $this
     */
    public function setCategory($category)
    {
        $this->container['category'] = $category;

        return $this;
    }

    /**
     * Gets task_variables
     *
     * @return \Swagger\Client\Model\QueryVariable[]
     */
    public function getTaskVariables()
    {
        return $this->container['task_variables'];
    }

    /**
     * Sets task_variables
     *
     * @param \Swagger\Client\Model\QueryVariable[] $task_variables task_variables
     *
     * @return $this
     */
    public function setTaskVariables($task_variables)
    {
        $this->container['task_variables'] = $task_variables;

        return $this;
    }

    /**
     * Gets process_instance_variables
     *
     * @return \Swagger\Client\Model\QueryVariable[]
     */
    public function getProcessInstanceVariables()
    {
        return $this->container['process_instance_variables'];
    }

    /**
     * Sets process_instance_variables
     *
     * @param \Swagger\Client\Model\QueryVariable[] $process_instance_variables process_instance_variables
     *
     * @return $this
     */
    public function setProcessInstanceVariables($process_instance_variables)
    {
        $this->container['process_instance_variables'] = $process_instance_variables;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param  integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param  integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param  integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

