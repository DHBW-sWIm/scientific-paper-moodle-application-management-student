<?php
/**
 * HistoryApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * sWIm Activiti REST API
 *
 * here be dragons
 *
 * OpenAPI spec version: v0.2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * HistoryApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class HistoryApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation createComment
     *
     * Create a new comment on a historic process instance
     *
     * @param  string $process_instance_id processInstanceId (required)
     * @param  \Swagger\Client\Model\CommentResponse $body body (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\CommentResponse
     */
    public function createComment($process_instance_id, $body = null)
    {
        list($response) = $this->createCommentWithHttpInfo($process_instance_id, $body);
        return $response;
    }

    /**
     * Operation createCommentWithHttpInfo
     *
     * Create a new comment on a historic process instance
     *
     * @param  string $process_instance_id processInstanceId (required)
     * @param  \Swagger\Client\Model\CommentResponse $body (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\CommentResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createCommentWithHttpInfo($process_instance_id, $body = null)
    {
        $returnType = '\Swagger\Client\Model\CommentResponse';
        $request = $this->createCommentRequest($process_instance_id, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()->getBody()->getContents()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\CommentResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createCommentAsync
     *
     * Create a new comment on a historic process instance
     *
     * @param  string $process_instance_id processInstanceId (required)
     * @param  \Swagger\Client\Model\CommentResponse $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createCommentAsync($process_instance_id, $body = null)
    {
        return $this->createCommentAsyncWithHttpInfo($process_instance_id, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createCommentAsyncWithHttpInfo
     *
     * Create a new comment on a historic process instance
     *
     * @param  string $process_instance_id processInstanceId (required)
     * @param  \Swagger\Client\Model\CommentResponse $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createCommentAsyncWithHttpInfo($process_instance_id, $body = null)
    {
        $returnType = '\Swagger\Client\Model\CommentResponse';
        $request = $this->createCommentRequest($process_instance_id, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createComment'
     *
     * @param  string $process_instance_id processInstanceId (required)
     * @param  \Swagger\Client\Model\CommentResponse $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createCommentRequest($process_instance_id, $body = null)
    {
        // verify the required parameter 'process_instance_id' is set
        if ($process_instance_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $process_instance_id when calling createComment'
            );
        }

        $resourcePath = '/history/historic-process-instances/{processInstanceId}/comments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($process_instance_id !== null) {
            $resourcePath = str_replace(
                '{' . 'processInstanceId' . '}',
                ObjectSerializer::toPathValue($process_instance_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteComment
     *
     * Delete a comment on a historic process instance
     *
     * @param  string $process_instance_id The id of the historic process instance to delete the comment for. (required)
     * @param  string $comment_id The id of the comment. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteComment($process_instance_id, $comment_id)
    {
        $this->deleteCommentWithHttpInfo($process_instance_id, $comment_id);
    }

    /**
     * Operation deleteCommentWithHttpInfo
     *
     * Delete a comment on a historic process instance
     *
     * @param  string $process_instance_id The id of the historic process instance to delete the comment for. (required)
     * @param  string $comment_id The id of the comment. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteCommentWithHttpInfo($process_instance_id, $comment_id)
    {
        $returnType = '';
        $request = $this->deleteCommentRequest($process_instance_id, $comment_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()->getBody()->getContents()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteCommentAsync
     *
     * Delete a comment on a historic process instance
     *
     * @param  string $process_instance_id The id of the historic process instance to delete the comment for. (required)
     * @param  string $comment_id The id of the comment. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteCommentAsync($process_instance_id, $comment_id)
    {
        return $this->deleteCommentAsyncWithHttpInfo($process_instance_id, $comment_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteCommentAsyncWithHttpInfo
     *
     * Delete a comment on a historic process instance
     *
     * @param  string $process_instance_id The id of the historic process instance to delete the comment for. (required)
     * @param  string $comment_id The id of the comment. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteCommentAsyncWithHttpInfo($process_instance_id, $comment_id)
    {
        $returnType = '';
        $request = $this->deleteCommentRequest($process_instance_id, $comment_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteComment'
     *
     * @param  string $process_instance_id The id of the historic process instance to delete the comment for. (required)
     * @param  string $comment_id The id of the comment. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteCommentRequest($process_instance_id, $comment_id)
    {
        // verify the required parameter 'process_instance_id' is set
        if ($process_instance_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $process_instance_id when calling deleteComment'
            );
        }
        // verify the required parameter 'comment_id' is set
        if ($comment_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $comment_id when calling deleteComment'
            );
        }

        $resourcePath = '/history/historic-process-instances/{processInstanceId}/comments/{commentId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($process_instance_id !== null) {
            $resourcePath = str_replace(
                '{' . 'processInstanceId' . '}',
                ObjectSerializer::toPathValue($process_instance_id),
                $resourcePath
            );
        }
        // path params
        if ($comment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'commentId' . '}',
                ObjectSerializer::toPathValue($comment_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteHitoricProcessInstance
     *
     * Delete a historic process instance
     *
     * @param  string $process_instance_id process_instance_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteHitoricProcessInstance($process_instance_id)
    {
        $this->deleteHitoricProcessInstanceWithHttpInfo($process_instance_id);
    }

    /**
     * Operation deleteHitoricProcessInstanceWithHttpInfo
     *
     * Delete a historic process instance
     *
     * @param  string $process_instance_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteHitoricProcessInstanceWithHttpInfo($process_instance_id)
    {
        $returnType = '';
        $request = $this->deleteHitoricProcessInstanceRequest($process_instance_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()->getBody()->getContents()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteHitoricProcessInstanceAsync
     *
     * Delete a historic process instance
     *
     * @param  string $process_instance_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteHitoricProcessInstanceAsync($process_instance_id)
    {
        return $this->deleteHitoricProcessInstanceAsyncWithHttpInfo($process_instance_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteHitoricProcessInstanceAsyncWithHttpInfo
     *
     * Delete a historic process instance
     *
     * @param  string $process_instance_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteHitoricProcessInstanceAsyncWithHttpInfo($process_instance_id)
    {
        $returnType = '';
        $request = $this->deleteHitoricProcessInstanceRequest($process_instance_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteHitoricProcessInstance'
     *
     * @param  string $process_instance_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteHitoricProcessInstanceRequest($process_instance_id)
    {
        // verify the required parameter 'process_instance_id' is set
        if ($process_instance_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $process_instance_id when calling deleteHitoricProcessInstance'
            );
        }

        $resourcePath = '/history/historic-process-instances/{processInstanceId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($process_instance_id !== null) {
            $resourcePath = str_replace(
                '{' . 'processInstanceId' . '}',
                ObjectSerializer::toPathValue($process_instance_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteTaskInstance
     *
     * Delete a historic task instance
     *
     * @param  string $task_id task_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteTaskInstance($task_id)
    {
        $this->deleteTaskInstanceWithHttpInfo($task_id);
    }

    /**
     * Operation deleteTaskInstanceWithHttpInfo
     *
     * Delete a historic task instance
     *
     * @param  string $task_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteTaskInstanceWithHttpInfo($task_id)
    {
        $returnType = '';
        $request = $this->deleteTaskInstanceRequest($task_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()->getBody()->getContents()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteTaskInstanceAsync
     *
     * Delete a historic task instance
     *
     * @param  string $task_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteTaskInstanceAsync($task_id)
    {
        return $this->deleteTaskInstanceAsyncWithHttpInfo($task_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteTaskInstanceAsyncWithHttpInfo
     *
     * Delete a historic task instance
     *
     * @param  string $task_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteTaskInstanceAsyncWithHttpInfo($task_id)
    {
        $returnType = '';
        $request = $this->deleteTaskInstanceRequest($task_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteTaskInstance'
     *
     * @param  string $task_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteTaskInstanceRequest($task_id)
    {
        // verify the required parameter 'task_id' is set
        if ($task_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $task_id when calling deleteTaskInstance'
            );
        }

        $resourcePath = '/history/historic-task-instances/{taskId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($task_id !== null) {
            $resourcePath = str_replace(
                '{' . 'taskId' . '}',
                ObjectSerializer::toPathValue($task_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getComment
     *
     * Get a comment on a historic process instance
     *
     * @param  string $process_instance_id The id of the historic process instance to get the comment for. (required)
     * @param  string $comment_id The id of the comment. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\CommentResponse
     */
    public function getComment($process_instance_id, $comment_id)
    {
        list($response) = $this->getCommentWithHttpInfo($process_instance_id, $comment_id);
        return $response;
    }

    /**
     * Operation getCommentWithHttpInfo
     *
     * Get a comment on a historic process instance
     *
     * @param  string $process_instance_id The id of the historic process instance to get the comment for. (required)
     * @param  string $comment_id The id of the comment. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\CommentResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCommentWithHttpInfo($process_instance_id, $comment_id)
    {
        $returnType = '\Swagger\Client\Model\CommentResponse';
        $request = $this->getCommentRequest($process_instance_id, $comment_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()->getBody()->getContents()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\CommentResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCommentAsync
     *
     * Get a comment on a historic process instance
     *
     * @param  string $process_instance_id The id of the historic process instance to get the comment for. (required)
     * @param  string $comment_id The id of the comment. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCommentAsync($process_instance_id, $comment_id)
    {
        return $this->getCommentAsyncWithHttpInfo($process_instance_id, $comment_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCommentAsyncWithHttpInfo
     *
     * Get a comment on a historic process instance
     *
     * @param  string $process_instance_id The id of the historic process instance to get the comment for. (required)
     * @param  string $comment_id The id of the comment. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCommentAsyncWithHttpInfo($process_instance_id, $comment_id)
    {
        $returnType = '\Swagger\Client\Model\CommentResponse';
        $request = $this->getCommentRequest($process_instance_id, $comment_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getComment'
     *
     * @param  string $process_instance_id The id of the historic process instance to get the comment for. (required)
     * @param  string $comment_id The id of the comment. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getCommentRequest($process_instance_id, $comment_id)
    {
        // verify the required parameter 'process_instance_id' is set
        if ($process_instance_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $process_instance_id when calling getComment'
            );
        }
        // verify the required parameter 'comment_id' is set
        if ($comment_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $comment_id when calling getComment'
            );
        }

        $resourcePath = '/history/historic-process-instances/{processInstanceId}/comments/{commentId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($process_instance_id !== null) {
            $resourcePath = str_replace(
                '{' . 'processInstanceId' . '}',
                ObjectSerializer::toPathValue($process_instance_id),
                $resourcePath
            );
        }
        // path params
        if ($comment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'commentId' . '}',
                ObjectSerializer::toPathValue($comment_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getComments
     *
     * Get all comments on a historic process instance
     *
     * @param  string $process_instance_id The id of the process instance to get the comments for. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\CommentResponse[]
     */
    public function getComments($process_instance_id)
    {
        list($response) = $this->getCommentsWithHttpInfo($process_instance_id);
        return $response;
    }

    /**
     * Operation getCommentsWithHttpInfo
     *
     * Get all comments on a historic process instance
     *
     * @param  string $process_instance_id The id of the process instance to get the comments for. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\CommentResponse[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getCommentsWithHttpInfo($process_instance_id)
    {
        $returnType = '\Swagger\Client\Model\CommentResponse[]';
        $request = $this->getCommentsRequest($process_instance_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()->getBody()->getContents()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\CommentResponse[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCommentsAsync
     *
     * Get all comments on a historic process instance
     *
     * @param  string $process_instance_id The id of the process instance to get the comments for. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCommentsAsync($process_instance_id)
    {
        return $this->getCommentsAsyncWithHttpInfo($process_instance_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCommentsAsyncWithHttpInfo
     *
     * Get all comments on a historic process instance
     *
     * @param  string $process_instance_id The id of the process instance to get the comments for. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCommentsAsyncWithHttpInfo($process_instance_id)
    {
        $returnType = '\Swagger\Client\Model\CommentResponse[]';
        $request = $this->getCommentsRequest($process_instance_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getComments'
     *
     * @param  string $process_instance_id The id of the process instance to get the comments for. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getCommentsRequest($process_instance_id)
    {
        // verify the required parameter 'process_instance_id' is set
        if ($process_instance_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $process_instance_id when calling getComments'
            );
        }

        $resourcePath = '/history/historic-process-instances/{processInstanceId}/comments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($process_instance_id !== null) {
            $resourcePath = str_replace(
                '{' . 'processInstanceId' . '}',
                ObjectSerializer::toPathValue($process_instance_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getHistoricActivityInstances
     *
     * Get historic activity instances
     *
     * @param  string $activity_id An id of the activity instance. (optional)
     * @param  string $activity_instance_id An id of the historic activity instance. (optional)
     * @param  string $activity_name The name of the historic activity instance. (optional)
     * @param  string $activity_type The element type of the historic activity instance. (optional)
     * @param  string $execution_id The execution id of the historic activity instance. (optional)
     * @param  bool $finished Indication if the historic activity instance is finished. (optional)
     * @param  string $task_assignee The assignee of the historic activity instance. (optional)
     * @param  string $process_instance_id The process instance id of the historic activity instance. (optional)
     * @param  string $process_definition_id The process definition id of the historic activity instance. (optional)
     * @param  string $tenant_id Only return instances with the given tenantId. (optional)
     * @param  string $tenant_id_like Only return instances with a tenantId like the given value. (optional)
     * @param  bool $without_tenant_id If true, only returns instances without a tenantId set. If false, the withoutTenantId parameter is ignored. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\DataResponse
     */
    public function getHistoricActivityInstances($activity_id = null, $activity_instance_id = null, $activity_name = null, $activity_type = null, $execution_id = null, $finished = null, $task_assignee = null, $process_instance_id = null, $process_definition_id = null, $tenant_id = null, $tenant_id_like = null, $without_tenant_id = null)
    {
        list($response) = $this->getHistoricActivityInstancesWithHttpInfo($activity_id, $activity_instance_id, $activity_name, $activity_type, $execution_id, $finished, $task_assignee, $process_instance_id, $process_definition_id, $tenant_id, $tenant_id_like, $without_tenant_id);
        return $response;
    }

    /**
     * Operation getHistoricActivityInstancesWithHttpInfo
     *
     * Get historic activity instances
     *
     * @param  string $activity_id An id of the activity instance. (optional)
     * @param  string $activity_instance_id An id of the historic activity instance. (optional)
     * @param  string $activity_name The name of the historic activity instance. (optional)
     * @param  string $activity_type The element type of the historic activity instance. (optional)
     * @param  string $execution_id The execution id of the historic activity instance. (optional)
     * @param  bool $finished Indication if the historic activity instance is finished. (optional)
     * @param  string $task_assignee The assignee of the historic activity instance. (optional)
     * @param  string $process_instance_id The process instance id of the historic activity instance. (optional)
     * @param  string $process_definition_id The process definition id of the historic activity instance. (optional)
     * @param  string $tenant_id Only return instances with the given tenantId. (optional)
     * @param  string $tenant_id_like Only return instances with a tenantId like the given value. (optional)
     * @param  bool $without_tenant_id If true, only returns instances without a tenantId set. If false, the withoutTenantId parameter is ignored. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\DataResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getHistoricActivityInstancesWithHttpInfo($activity_id = null, $activity_instance_id = null, $activity_name = null, $activity_type = null, $execution_id = null, $finished = null, $task_assignee = null, $process_instance_id = null, $process_definition_id = null, $tenant_id = null, $tenant_id_like = null, $without_tenant_id = null)
    {
        $returnType = '\Swagger\Client\Model\DataResponse';
        $request = $this->getHistoricActivityInstancesRequest($activity_id, $activity_instance_id, $activity_name, $activity_type, $execution_id, $finished, $task_assignee, $process_instance_id, $process_definition_id, $tenant_id, $tenant_id_like, $without_tenant_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()->getBody()->getContents()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\DataResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getHistoricActivityInstancesAsync
     *
     * Get historic activity instances
     *
     * @param  string $activity_id An id of the activity instance. (optional)
     * @param  string $activity_instance_id An id of the historic activity instance. (optional)
     * @param  string $activity_name The name of the historic activity instance. (optional)
     * @param  string $activity_type The element type of the historic activity instance. (optional)
     * @param  string $execution_id The execution id of the historic activity instance. (optional)
     * @param  bool $finished Indication if the historic activity instance is finished. (optional)
     * @param  string $task_assignee The assignee of the historic activity instance. (optional)
     * @param  string $process_instance_id The process instance id of the historic activity instance. (optional)
     * @param  string $process_definition_id The process definition id of the historic activity instance. (optional)
     * @param  string $tenant_id Only return instances with the given tenantId. (optional)
     * @param  string $tenant_id_like Only return instances with a tenantId like the given value. (optional)
     * @param  bool $without_tenant_id If true, only returns instances without a tenantId set. If false, the withoutTenantId parameter is ignored. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getHistoricActivityInstancesAsync($activity_id = null, $activity_instance_id = null, $activity_name = null, $activity_type = null, $execution_id = null, $finished = null, $task_assignee = null, $process_instance_id = null, $process_definition_id = null, $tenant_id = null, $tenant_id_like = null, $without_tenant_id = null)
    {
        return $this->getHistoricActivityInstancesAsyncWithHttpInfo($activity_id, $activity_instance_id, $activity_name, $activity_type, $execution_id, $finished, $task_assignee, $process_instance_id, $process_definition_id, $tenant_id, $tenant_id_like, $without_tenant_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getHistoricActivityInstancesAsyncWithHttpInfo
     *
     * Get historic activity instances
     *
     * @param  string $activity_id An id of the activity instance. (optional)
     * @param  string $activity_instance_id An id of the historic activity instance. (optional)
     * @param  string $activity_name The name of the historic activity instance. (optional)
     * @param  string $activity_type The element type of the historic activity instance. (optional)
     * @param  string $execution_id The execution id of the historic activity instance. (optional)
     * @param  bool $finished Indication if the historic activity instance is finished. (optional)
     * @param  string $task_assignee The assignee of the historic activity instance. (optional)
     * @param  string $process_instance_id The process instance id of the historic activity instance. (optional)
     * @param  string $process_definition_id The process definition id of the historic activity instance. (optional)
     * @param  string $tenant_id Only return instances with the given tenantId. (optional)
     * @param  string $tenant_id_like Only return instances with a tenantId like the given value. (optional)
     * @param  bool $without_tenant_id If true, only returns instances without a tenantId set. If false, the withoutTenantId parameter is ignored. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getHistoricActivityInstancesAsyncWithHttpInfo($activity_id = null, $activity_instance_id = null, $activity_name = null, $activity_type = null, $execution_id = null, $finished = null, $task_assignee = null, $process_instance_id = null, $process_definition_id = null, $tenant_id = null, $tenant_id_like = null, $without_tenant_id = null)
    {
        $returnType = '\Swagger\Client\Model\DataResponse';
        $request = $this->getHistoricActivityInstancesRequest($activity_id, $activity_instance_id, $activity_name, $activity_type, $execution_id, $finished, $task_assignee, $process_instance_id, $process_definition_id, $tenant_id, $tenant_id_like, $without_tenant_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getHistoricActivityInstances'
     *
     * @param  string $activity_id An id of the activity instance. (optional)
     * @param  string $activity_instance_id An id of the historic activity instance. (optional)
     * @param  string $activity_name The name of the historic activity instance. (optional)
     * @param  string $activity_type The element type of the historic activity instance. (optional)
     * @param  string $execution_id The execution id of the historic activity instance. (optional)
     * @param  bool $finished Indication if the historic activity instance is finished. (optional)
     * @param  string $task_assignee The assignee of the historic activity instance. (optional)
     * @param  string $process_instance_id The process instance id of the historic activity instance. (optional)
     * @param  string $process_definition_id The process definition id of the historic activity instance. (optional)
     * @param  string $tenant_id Only return instances with the given tenantId. (optional)
     * @param  string $tenant_id_like Only return instances with a tenantId like the given value. (optional)
     * @param  bool $without_tenant_id If true, only returns instances without a tenantId set. If false, the withoutTenantId parameter is ignored. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getHistoricActivityInstancesRequest($activity_id = null, $activity_instance_id = null, $activity_name = null, $activity_type = null, $execution_id = null, $finished = null, $task_assignee = null, $process_instance_id = null, $process_definition_id = null, $tenant_id = null, $tenant_id_like = null, $without_tenant_id = null)
    {

        $resourcePath = '/history/historic-activity-instances';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($activity_id !== null) {
            $queryParams['activityId'] = ObjectSerializer::toQueryValue($activity_id);
        }
        // query params
        if ($activity_instance_id !== null) {
            $queryParams['activityInstanceId'] = ObjectSerializer::toQueryValue($activity_instance_id);
        }
        // query params
        if ($activity_name !== null) {
            $queryParams['activityName'] = ObjectSerializer::toQueryValue($activity_name);
        }
        // query params
        if ($activity_type !== null) {
            $queryParams['activityType'] = ObjectSerializer::toQueryValue($activity_type);
        }
        // query params
        if ($execution_id !== null) {
            $queryParams['executionId'] = ObjectSerializer::toQueryValue($execution_id);
        }
        // query params
        if ($finished !== null) {
            $queryParams['finished'] = ObjectSerializer::toQueryValue($finished);
        }
        // query params
        if ($task_assignee !== null) {
            $queryParams['taskAssignee'] = ObjectSerializer::toQueryValue($task_assignee);
        }
        // query params
        if ($process_instance_id !== null) {
            $queryParams['processInstanceId'] = ObjectSerializer::toQueryValue($process_instance_id);
        }
        // query params
        if ($process_definition_id !== null) {
            $queryParams['processDefinitionId'] = ObjectSerializer::toQueryValue($process_definition_id);
        }
        // query params
        if ($tenant_id !== null) {
            $queryParams['tenantId'] = ObjectSerializer::toQueryValue($tenant_id);
        }
        // query params
        if ($tenant_id_like !== null) {
            $queryParams['tenantIdLike'] = ObjectSerializer::toQueryValue($tenant_id_like);
        }
        // query params
        if ($without_tenant_id !== null) {
            $queryParams['withoutTenantId'] = ObjectSerializer::toQueryValue($without_tenant_id);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getHistoricDetailInfo
     *
     * Get historic detail
     *
     * @param  string $id The id of the historic detail. (optional)
     * @param  string $process_instance_id The process instance id of the historic detail. (optional)
     * @param  string $execution_id The execution id of the historic detail. (optional)
     * @param  string $activity_instance_id The activity instance id of the historic detail. (optional)
     * @param  string $task_id The task id of the historic detail. (optional)
     * @param  bool $select_only_form_properties Indication to only return form properties in the result. (optional)
     * @param  bool $select_only_variable_updates Indication to only return variable updates in the result. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\DataResponse
     */
    public function getHistoricDetailInfo($id = null, $process_instance_id = null, $execution_id = null, $activity_instance_id = null, $task_id = null, $select_only_form_properties = null, $select_only_variable_updates = null)
    {
        list($response) = $this->getHistoricDetailInfoWithHttpInfo($id, $process_instance_id, $execution_id, $activity_instance_id, $task_id, $select_only_form_properties, $select_only_variable_updates);
        return $response;
    }

    /**
     * Operation getHistoricDetailInfoWithHttpInfo
     *
     * Get historic detail
     *
     * @param  string $id The id of the historic detail. (optional)
     * @param  string $process_instance_id The process instance id of the historic detail. (optional)
     * @param  string $execution_id The execution id of the historic detail. (optional)
     * @param  string $activity_instance_id The activity instance id of the historic detail. (optional)
     * @param  string $task_id The task id of the historic detail. (optional)
     * @param  bool $select_only_form_properties Indication to only return form properties in the result. (optional)
     * @param  bool $select_only_variable_updates Indication to only return variable updates in the result. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\DataResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getHistoricDetailInfoWithHttpInfo($id = null, $process_instance_id = null, $execution_id = null, $activity_instance_id = null, $task_id = null, $select_only_form_properties = null, $select_only_variable_updates = null)
    {
        $returnType = '\Swagger\Client\Model\DataResponse';
        $request = $this->getHistoricDetailInfoRequest($id, $process_instance_id, $execution_id, $activity_instance_id, $task_id, $select_only_form_properties, $select_only_variable_updates);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()->getBody()->getContents()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\DataResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getHistoricDetailInfoAsync
     *
     * Get historic detail
     *
     * @param  string $id The id of the historic detail. (optional)
     * @param  string $process_instance_id The process instance id of the historic detail. (optional)
     * @param  string $execution_id The execution id of the historic detail. (optional)
     * @param  string $activity_instance_id The activity instance id of the historic detail. (optional)
     * @param  string $task_id The task id of the historic detail. (optional)
     * @param  bool $select_only_form_properties Indication to only return form properties in the result. (optional)
     * @param  bool $select_only_variable_updates Indication to only return variable updates in the result. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getHistoricDetailInfoAsync($id = null, $process_instance_id = null, $execution_id = null, $activity_instance_id = null, $task_id = null, $select_only_form_properties = null, $select_only_variable_updates = null)
    {
        return $this->getHistoricDetailInfoAsyncWithHttpInfo($id, $process_instance_id, $execution_id, $activity_instance_id, $task_id, $select_only_form_properties, $select_only_variable_updates)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getHistoricDetailInfoAsyncWithHttpInfo
     *
     * Get historic detail
     *
     * @param  string $id The id of the historic detail. (optional)
     * @param  string $process_instance_id The process instance id of the historic detail. (optional)
     * @param  string $execution_id The execution id of the historic detail. (optional)
     * @param  string $activity_instance_id The activity instance id of the historic detail. (optional)
     * @param  string $task_id The task id of the historic detail. (optional)
     * @param  bool $select_only_form_properties Indication to only return form properties in the result. (optional)
     * @param  bool $select_only_variable_updates Indication to only return variable updates in the result. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getHistoricDetailInfoAsyncWithHttpInfo($id = null, $process_instance_id = null, $execution_id = null, $activity_instance_id = null, $task_id = null, $select_only_form_properties = null, $select_only_variable_updates = null)
    {
        $returnType = '\Swagger\Client\Model\DataResponse';
        $request = $this->getHistoricDetailInfoRequest($id, $process_instance_id, $execution_id, $activity_instance_id, $task_id, $select_only_form_properties, $select_only_variable_updates);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getHistoricDetailInfo'
     *
     * @param  string $id The id of the historic detail. (optional)
     * @param  string $process_instance_id The process instance id of the historic detail. (optional)
     * @param  string $execution_id The execution id of the historic detail. (optional)
     * @param  string $activity_instance_id The activity instance id of the historic detail. (optional)
     * @param  string $task_id The task id of the historic detail. (optional)
     * @param  bool $select_only_form_properties Indication to only return form properties in the result. (optional)
     * @param  bool $select_only_variable_updates Indication to only return variable updates in the result. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getHistoricDetailInfoRequest($id = null, $process_instance_id = null, $execution_id = null, $activity_instance_id = null, $task_id = null, $select_only_form_properties = null, $select_only_variable_updates = null)
    {

        $resourcePath = '/history/historic-detail';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($id !== null) {
            $queryParams['id'] = ObjectSerializer::toQueryValue($id);
        }
        // query params
        if ($process_instance_id !== null) {
            $queryParams['processInstanceId'] = ObjectSerializer::toQueryValue($process_instance_id);
        }
        // query params
        if ($execution_id !== null) {
            $queryParams['executionId'] = ObjectSerializer::toQueryValue($execution_id);
        }
        // query params
        if ($activity_instance_id !== null) {
            $queryParams['activityInstanceId'] = ObjectSerializer::toQueryValue($activity_instance_id);
        }
        // query params
        if ($task_id !== null) {
            $queryParams['taskId'] = ObjectSerializer::toQueryValue($task_id);
        }
        // query params
        if ($select_only_form_properties !== null) {
            $queryParams['selectOnlyFormProperties'] = ObjectSerializer::toQueryValue($select_only_form_properties);
        }
        // query params
        if ($select_only_variable_updates !== null) {
            $queryParams['selectOnlyVariableUpdates'] = ObjectSerializer::toQueryValue($select_only_variable_updates);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getHistoricDetailVariableData
     *
     * Get the binary data for a historic detail variable
     *
     * @param  string $detail_id detail_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string[]
     */
    public function getHistoricDetailVariableData($detail_id)
    {
        list($response) = $this->getHistoricDetailVariableDataWithHttpInfo($detail_id);
        return $response;
    }

    /**
     * Operation getHistoricDetailVariableDataWithHttpInfo
     *
     * Get the binary data for a historic detail variable
     *
     * @param  string $detail_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getHistoricDetailVariableDataWithHttpInfo($detail_id)
    {
        $returnType = 'string[]';
        $request = $this->getHistoricDetailVariableDataRequest($detail_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()->getBody()->getContents()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getHistoricDetailVariableDataAsync
     *
     * Get the binary data for a historic detail variable
     *
     * @param  string $detail_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getHistoricDetailVariableDataAsync($detail_id)
    {
        return $this->getHistoricDetailVariableDataAsyncWithHttpInfo($detail_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getHistoricDetailVariableDataAsyncWithHttpInfo
     *
     * Get the binary data for a historic detail variable
     *
     * @param  string $detail_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getHistoricDetailVariableDataAsyncWithHttpInfo($detail_id)
    {
        $returnType = 'string[]';
        $request = $this->getHistoricDetailVariableDataRequest($detail_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getHistoricDetailVariableData'
     *
     * @param  string $detail_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getHistoricDetailVariableDataRequest($detail_id)
    {
        // verify the required parameter 'detail_id' is set
        if ($detail_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $detail_id when calling getHistoricDetailVariableData'
            );
        }

        $resourcePath = '/history/historic-detail/{detailId}/data';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($detail_id !== null) {
            $resourcePath = str_replace(
                '{' . 'detailId' . '}',
                ObjectSerializer::toPathValue($detail_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getHistoricInstanceVariableData
     *
     * Get the binary data for a historic task instance variable
     *
     * @param  string $var_instance_id var_instance_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string[]
     */
    public function getHistoricInstanceVariableData($var_instance_id)
    {
        list($response) = $this->getHistoricInstanceVariableDataWithHttpInfo($var_instance_id);
        return $response;
    }

    /**
     * Operation getHistoricInstanceVariableDataWithHttpInfo
     *
     * Get the binary data for a historic task instance variable
     *
     * @param  string $var_instance_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getHistoricInstanceVariableDataWithHttpInfo($var_instance_id)
    {
        $returnType = 'string[]';
        $request = $this->getHistoricInstanceVariableDataRequest($var_instance_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()->getBody()->getContents()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getHistoricInstanceVariableDataAsync
     *
     * Get the binary data for a historic task instance variable
     *
     * @param  string $var_instance_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getHistoricInstanceVariableDataAsync($var_instance_id)
    {
        return $this->getHistoricInstanceVariableDataAsyncWithHttpInfo($var_instance_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getHistoricInstanceVariableDataAsyncWithHttpInfo
     *
     * Get the binary data for a historic task instance variable
     *
     * @param  string $var_instance_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getHistoricInstanceVariableDataAsyncWithHttpInfo($var_instance_id)
    {
        $returnType = 'string[]';
        $request = $this->getHistoricInstanceVariableDataRequest($var_instance_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getHistoricInstanceVariableData'
     *
     * @param  string $var_instance_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getHistoricInstanceVariableDataRequest($var_instance_id)
    {
        // verify the required parameter 'var_instance_id' is set
        if ($var_instance_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $var_instance_id when calling getHistoricInstanceVariableData'
            );
        }

        $resourcePath = '/history/historic-variable-instances/{varInstanceId}/data';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($var_instance_id !== null) {
            $resourcePath = str_replace(
                '{' . 'varInstanceId' . '}',
                ObjectSerializer::toPathValue($var_instance_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getHistoricProcessInstance
     *
     * Get a historic process instance
     *
     * @param  string $process_instance_id process_instance_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\HistoricProcessInstanceResponse
     */
    public function getHistoricProcessInstance($process_instance_id)
    {
        list($response) = $this->getHistoricProcessInstanceWithHttpInfo($process_instance_id);
        return $response;
    }

    /**
     * Operation getHistoricProcessInstanceWithHttpInfo
     *
     * Get a historic process instance
     *
     * @param  string $process_instance_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\HistoricProcessInstanceResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getHistoricProcessInstanceWithHttpInfo($process_instance_id)
    {
        $returnType = '\Swagger\Client\Model\HistoricProcessInstanceResponse';
        $request = $this->getHistoricProcessInstanceRequest($process_instance_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()->getBody()->getContents()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\HistoricProcessInstanceResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getHistoricProcessInstanceAsync
     *
     * Get a historic process instance
     *
     * @param  string $process_instance_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getHistoricProcessInstanceAsync($process_instance_id)
    {
        return $this->getHistoricProcessInstanceAsyncWithHttpInfo($process_instance_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getHistoricProcessInstanceAsyncWithHttpInfo
     *
     * Get a historic process instance
     *
     * @param  string $process_instance_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getHistoricProcessInstanceAsyncWithHttpInfo($process_instance_id)
    {
        $returnType = '\Swagger\Client\Model\HistoricProcessInstanceResponse';
        $request = $this->getHistoricProcessInstanceRequest($process_instance_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getHistoricProcessInstance'
     *
     * @param  string $process_instance_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getHistoricProcessInstanceRequest($process_instance_id)
    {
        // verify the required parameter 'process_instance_id' is set
        if ($process_instance_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $process_instance_id when calling getHistoricProcessInstance'
            );
        }

        $resourcePath = '/history/historic-process-instances/{processInstanceId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($process_instance_id !== null) {
            $resourcePath = str_replace(
                '{' . 'processInstanceId' . '}',
                ObjectSerializer::toPathValue($process_instance_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getHistoricProcessInstanceVariableData
     *
     * Get the binary data for a historic process instance variable
     *
     * @param  string $process_instance_id process_instance_id (required)
     * @param  string $variable_name variable_name (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string[]
     */
    public function getHistoricProcessInstanceVariableData($process_instance_id, $variable_name)
    {
        list($response) = $this->getHistoricProcessInstanceVariableDataWithHttpInfo($process_instance_id, $variable_name);
        return $response;
    }

    /**
     * Operation getHistoricProcessInstanceVariableDataWithHttpInfo
     *
     * Get the binary data for a historic process instance variable
     *
     * @param  string $process_instance_id (required)
     * @param  string $variable_name (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getHistoricProcessInstanceVariableDataWithHttpInfo($process_instance_id, $variable_name)
    {
        $returnType = 'string[]';
        $request = $this->getHistoricProcessInstanceVariableDataRequest($process_instance_id, $variable_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()->getBody()->getContents()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getHistoricProcessInstanceVariableDataAsync
     *
     * Get the binary data for a historic process instance variable
     *
     * @param  string $process_instance_id (required)
     * @param  string $variable_name (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getHistoricProcessInstanceVariableDataAsync($process_instance_id, $variable_name)
    {
        return $this->getHistoricProcessInstanceVariableDataAsyncWithHttpInfo($process_instance_id, $variable_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getHistoricProcessInstanceVariableDataAsyncWithHttpInfo
     *
     * Get the binary data for a historic process instance variable
     *
     * @param  string $process_instance_id (required)
     * @param  string $variable_name (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getHistoricProcessInstanceVariableDataAsyncWithHttpInfo($process_instance_id, $variable_name)
    {
        $returnType = 'string[]';
        $request = $this->getHistoricProcessInstanceVariableDataRequest($process_instance_id, $variable_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getHistoricProcessInstanceVariableData'
     *
     * @param  string $process_instance_id (required)
     * @param  string $variable_name (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getHistoricProcessInstanceVariableDataRequest($process_instance_id, $variable_name)
    {
        // verify the required parameter 'process_instance_id' is set
        if ($process_instance_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $process_instance_id when calling getHistoricProcessInstanceVariableData'
            );
        }
        // verify the required parameter 'variable_name' is set
        if ($variable_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $variable_name when calling getHistoricProcessInstanceVariableData'
            );
        }

        $resourcePath = '/history/historic-process-instances/{processInstanceId}/variables/{variableName}/data';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($process_instance_id !== null) {
            $resourcePath = str_replace(
                '{' . 'processInstanceId' . '}',
                ObjectSerializer::toPathValue($process_instance_id),
                $resourcePath
            );
        }
        // path params
        if ($variable_name !== null) {
            $resourcePath = str_replace(
                '{' . 'variableName' . '}',
                ObjectSerializer::toPathValue($variable_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getHistoricTaskInstanceVariableData
     *
     * Get the binary data for a historic task instance variable
     *
     * @param  string $task_id task_id (required)
     * @param  string $variable_name variable_name (required)
     * @param  string $scope scope (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string[]
     */
    public function getHistoricTaskInstanceVariableData($task_id, $variable_name, $scope = null)
    {
        list($response) = $this->getHistoricTaskInstanceVariableDataWithHttpInfo($task_id, $variable_name, $scope);
        return $response;
    }

    /**
     * Operation getHistoricTaskInstanceVariableDataWithHttpInfo
     *
     * Get the binary data for a historic task instance variable
     *
     * @param  string $task_id (required)
     * @param  string $variable_name (required)
     * @param  string $scope (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getHistoricTaskInstanceVariableDataWithHttpInfo($task_id, $variable_name, $scope = null)
    {
        $returnType = 'string[]';
        $request = $this->getHistoricTaskInstanceVariableDataRequest($task_id, $variable_name, $scope);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()->getBody()->getContents()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getHistoricTaskInstanceVariableDataAsync
     *
     * Get the binary data for a historic task instance variable
     *
     * @param  string $task_id (required)
     * @param  string $variable_name (required)
     * @param  string $scope (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getHistoricTaskInstanceVariableDataAsync($task_id, $variable_name, $scope = null)
    {
        return $this->getHistoricTaskInstanceVariableDataAsyncWithHttpInfo($task_id, $variable_name, $scope)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getHistoricTaskInstanceVariableDataAsyncWithHttpInfo
     *
     * Get the binary data for a historic task instance variable
     *
     * @param  string $task_id (required)
     * @param  string $variable_name (required)
     * @param  string $scope (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getHistoricTaskInstanceVariableDataAsyncWithHttpInfo($task_id, $variable_name, $scope = null)
    {
        $returnType = 'string[]';
        $request = $this->getHistoricTaskInstanceVariableDataRequest($task_id, $variable_name, $scope);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getHistoricTaskInstanceVariableData'
     *
     * @param  string $task_id (required)
     * @param  string $variable_name (required)
     * @param  string $scope (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getHistoricTaskInstanceVariableDataRequest($task_id, $variable_name, $scope = null)
    {
        // verify the required parameter 'task_id' is set
        if ($task_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $task_id when calling getHistoricTaskInstanceVariableData'
            );
        }
        // verify the required parameter 'variable_name' is set
        if ($variable_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $variable_name when calling getHistoricTaskInstanceVariableData'
            );
        }

        $resourcePath = '/history/historic-task-instances/{taskId}/variables/{variableName}/data';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($scope !== null) {
            $queryParams['scope'] = ObjectSerializer::toQueryValue($scope);
        }

        // path params
        if ($task_id !== null) {
            $resourcePath = str_replace(
                '{' . 'taskId' . '}',
                ObjectSerializer::toPathValue($task_id),
                $resourcePath
            );
        }
        // path params
        if ($variable_name !== null) {
            $resourcePath = str_replace(
                '{' . 'variableName' . '}',
                ObjectSerializer::toPathValue($variable_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getHistoricVariableInstances
     *
     * List of historic variable instances
     *
     * @param  string $process_instance_id The process instance id of the historic variable instance. (optional)
     * @param  string $task_id The task id of the historic variable instance. (optional)
     * @param  bool $exclude_task_variables Indication to exclude the task variables from the result. (optional)
     * @param  string $variable_name The variable name of the historic variable instance. (optional)
     * @param  string $variable_name_like The variable name using the like operator for the historic variable instance. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\DataResponse
     */
    public function getHistoricVariableInstances($process_instance_id = null, $task_id = null, $exclude_task_variables = null, $variable_name = null, $variable_name_like = null)
    {
        list($response) = $this->getHistoricVariableInstancesWithHttpInfo($process_instance_id, $task_id, $exclude_task_variables, $variable_name, $variable_name_like);
        return $response;
    }

    /**
     * Operation getHistoricVariableInstancesWithHttpInfo
     *
     * List of historic variable instances
     *
     * @param  string $process_instance_id The process instance id of the historic variable instance. (optional)
     * @param  string $task_id The task id of the historic variable instance. (optional)
     * @param  bool $exclude_task_variables Indication to exclude the task variables from the result. (optional)
     * @param  string $variable_name The variable name of the historic variable instance. (optional)
     * @param  string $variable_name_like The variable name using the like operator for the historic variable instance. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\DataResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getHistoricVariableInstancesWithHttpInfo($process_instance_id = null, $task_id = null, $exclude_task_variables = null, $variable_name = null, $variable_name_like = null)
    {
        $returnType = '\Swagger\Client\Model\DataResponse';
        $request = $this->getHistoricVariableInstancesRequest($process_instance_id, $task_id, $exclude_task_variables, $variable_name, $variable_name_like);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()->getBody()->getContents()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\DataResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getHistoricVariableInstancesAsync
     *
     * List of historic variable instances
     *
     * @param  string $process_instance_id The process instance id of the historic variable instance. (optional)
     * @param  string $task_id The task id of the historic variable instance. (optional)
     * @param  bool $exclude_task_variables Indication to exclude the task variables from the result. (optional)
     * @param  string $variable_name The variable name of the historic variable instance. (optional)
     * @param  string $variable_name_like The variable name using the like operator for the historic variable instance. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getHistoricVariableInstancesAsync($process_instance_id = null, $task_id = null, $exclude_task_variables = null, $variable_name = null, $variable_name_like = null)
    {
        return $this->getHistoricVariableInstancesAsyncWithHttpInfo($process_instance_id, $task_id, $exclude_task_variables, $variable_name, $variable_name_like)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getHistoricVariableInstancesAsyncWithHttpInfo
     *
     * List of historic variable instances
     *
     * @param  string $process_instance_id The process instance id of the historic variable instance. (optional)
     * @param  string $task_id The task id of the historic variable instance. (optional)
     * @param  bool $exclude_task_variables Indication to exclude the task variables from the result. (optional)
     * @param  string $variable_name The variable name of the historic variable instance. (optional)
     * @param  string $variable_name_like The variable name using the like operator for the historic variable instance. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getHistoricVariableInstancesAsyncWithHttpInfo($process_instance_id = null, $task_id = null, $exclude_task_variables = null, $variable_name = null, $variable_name_like = null)
    {
        $returnType = '\Swagger\Client\Model\DataResponse';
        $request = $this->getHistoricVariableInstancesRequest($process_instance_id, $task_id, $exclude_task_variables, $variable_name, $variable_name_like);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getHistoricVariableInstances'
     *
     * @param  string $process_instance_id The process instance id of the historic variable instance. (optional)
     * @param  string $task_id The task id of the historic variable instance. (optional)
     * @param  bool $exclude_task_variables Indication to exclude the task variables from the result. (optional)
     * @param  string $variable_name The variable name of the historic variable instance. (optional)
     * @param  string $variable_name_like The variable name using the like operator for the historic variable instance. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getHistoricVariableInstancesRequest($process_instance_id = null, $task_id = null, $exclude_task_variables = null, $variable_name = null, $variable_name_like = null)
    {

        $resourcePath = '/history/historic-variable-instances';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($process_instance_id !== null) {
            $queryParams['processInstanceId'] = ObjectSerializer::toQueryValue($process_instance_id);
        }
        // query params
        if ($task_id !== null) {
            $queryParams['taskId'] = ObjectSerializer::toQueryValue($task_id);
        }
        // query params
        if ($exclude_task_variables !== null) {
            $queryParams['excludeTaskVariables'] = ObjectSerializer::toQueryValue($exclude_task_variables);
        }
        // query params
        if ($variable_name !== null) {
            $queryParams['variableName'] = ObjectSerializer::toQueryValue($variable_name);
        }
        // query params
        if ($variable_name_like !== null) {
            $queryParams['variableNameLike'] = ObjectSerializer::toQueryValue($variable_name_like);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getProcessIdentityLinks
     *
     * Get the identity links of a historic process instance
     *
     * @param  string $process_instance_id process_instance_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\HistoricIdentityLinkResponse[]
     */
    public function getProcessIdentityLinks($process_instance_id)
    {
        list($response) = $this->getProcessIdentityLinksWithHttpInfo($process_instance_id);
        return $response;
    }

    /**
     * Operation getProcessIdentityLinksWithHttpInfo
     *
     * Get the identity links of a historic process instance
     *
     * @param  string $process_instance_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\HistoricIdentityLinkResponse[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getProcessIdentityLinksWithHttpInfo($process_instance_id)
    {
        $returnType = '\Swagger\Client\Model\HistoricIdentityLinkResponse[]';
        $request = $this->getProcessIdentityLinksRequest($process_instance_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()->getBody()->getContents()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\HistoricIdentityLinkResponse[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getProcessIdentityLinksAsync
     *
     * Get the identity links of a historic process instance
     *
     * @param  string $process_instance_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProcessIdentityLinksAsync($process_instance_id)
    {
        return $this->getProcessIdentityLinksAsyncWithHttpInfo($process_instance_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getProcessIdentityLinksAsyncWithHttpInfo
     *
     * Get the identity links of a historic process instance
     *
     * @param  string $process_instance_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProcessIdentityLinksAsyncWithHttpInfo($process_instance_id)
    {
        $returnType = '\Swagger\Client\Model\HistoricIdentityLinkResponse[]';
        $request = $this->getProcessIdentityLinksRequest($process_instance_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getProcessIdentityLinks'
     *
     * @param  string $process_instance_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getProcessIdentityLinksRequest($process_instance_id)
    {
        // verify the required parameter 'process_instance_id' is set
        if ($process_instance_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $process_instance_id when calling getProcessIdentityLinks'
            );
        }

        $resourcePath = '/history/historic-process-instances/{processInstanceId}/identitylinks';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($process_instance_id !== null) {
            $resourcePath = str_replace(
                '{' . 'processInstanceId' . '}',
                ObjectSerializer::toPathValue($process_instance_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getTaskIdentityLinks
     *
     * Get the identity links of a historic task instance
     *
     * @param  string $task_id task_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\HistoricIdentityLinkResponse[]
     */
    public function getTaskIdentityLinks($task_id)
    {
        list($response) = $this->getTaskIdentityLinksWithHttpInfo($task_id);
        return $response;
    }

    /**
     * Operation getTaskIdentityLinksWithHttpInfo
     *
     * Get the identity links of a historic task instance
     *
     * @param  string $task_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\HistoricIdentityLinkResponse[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getTaskIdentityLinksWithHttpInfo($task_id)
    {
        $returnType = '\Swagger\Client\Model\HistoricIdentityLinkResponse[]';
        $request = $this->getTaskIdentityLinksRequest($task_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()->getBody()->getContents()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\HistoricIdentityLinkResponse[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getTaskIdentityLinksAsync
     *
     * Get the identity links of a historic task instance
     *
     * @param  string $task_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTaskIdentityLinksAsync($task_id)
    {
        return $this->getTaskIdentityLinksAsyncWithHttpInfo($task_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getTaskIdentityLinksAsyncWithHttpInfo
     *
     * Get the identity links of a historic task instance
     *
     * @param  string $task_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTaskIdentityLinksAsyncWithHttpInfo($task_id)
    {
        $returnType = '\Swagger\Client\Model\HistoricIdentityLinkResponse[]';
        $request = $this->getTaskIdentityLinksRequest($task_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getTaskIdentityLinks'
     *
     * @param  string $task_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getTaskIdentityLinksRequest($task_id)
    {
        // verify the required parameter 'task_id' is set
        if ($task_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $task_id when calling getTaskIdentityLinks'
            );
        }

        $resourcePath = '/history/historic-task-instances/{taskId}/identitylinks';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($task_id !== null) {
            $resourcePath = str_replace(
                '{' . 'taskId' . '}',
                ObjectSerializer::toPathValue($task_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getTaskInstance
     *
     * Get a single historic task instance
     *
     * @param  string $task_id task_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\HistoricTaskInstanceResponse
     */
    public function getTaskInstance($task_id)
    {
        list($response) = $this->getTaskInstanceWithHttpInfo($task_id);
        return $response;
    }

    /**
     * Operation getTaskInstanceWithHttpInfo
     *
     * Get a single historic task instance
     *
     * @param  string $task_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\HistoricTaskInstanceResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getTaskInstanceWithHttpInfo($task_id)
    {
        $returnType = '\Swagger\Client\Model\HistoricTaskInstanceResponse';
        $request = $this->getTaskInstanceRequest($task_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()->getBody()->getContents()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\HistoricTaskInstanceResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getTaskInstanceAsync
     *
     * Get a single historic task instance
     *
     * @param  string $task_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTaskInstanceAsync($task_id)
    {
        return $this->getTaskInstanceAsyncWithHttpInfo($task_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getTaskInstanceAsyncWithHttpInfo
     *
     * Get a single historic task instance
     *
     * @param  string $task_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTaskInstanceAsyncWithHttpInfo($task_id)
    {
        $returnType = '\Swagger\Client\Model\HistoricTaskInstanceResponse';
        $request = $this->getTaskInstanceRequest($task_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getTaskInstance'
     *
     * @param  string $task_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getTaskInstanceRequest($task_id)
    {
        // verify the required parameter 'task_id' is set
        if ($task_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $task_id when calling getTaskInstance'
            );
        }

        $resourcePath = '/history/historic-task-instances/{taskId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($task_id !== null) {
            $resourcePath = str_replace(
                '{' . 'taskId' . '}',
                ObjectSerializer::toPathValue($task_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listHistoricProcessInstances
     *
     * List of historic process instances
     *
     * @param  string $process_instance_id An id of the historic process instance. (optional)
     * @param  string $process_definition_key The process definition key of the historic process instance. (optional)
     * @param  string $process_definition_id The process definition id of the historic process instance. (optional)
     * @param  string $business_key The business key of the historic process instance. (optional)
     * @param  string $involved_user An involved user of the historic process instance. (optional)
     * @param  bool $finished Indication if the historic process instance is finished. (optional)
     * @param  string $super_process_instance_id An optional parent process id of the historic process instance. (optional)
     * @param  bool $exclude_subprocesses Return only historic process instances which aren�t sub processes. (optional)
     * @param  string $finished_after Return only historic process instances that were finished after this date. (optional)
     * @param  string $finished_before Return only historic process instances that were finished before this date. (optional)
     * @param  string $started_after Return only historic process instances that were started after this date. (optional)
     * @param  string $started_before Return only historic process instances that were started before this date. (optional)
     * @param  string $started_by Return only historic process instances that were started by this user. (optional)
     * @param  bool $include_process_variables An indication if the historic process instance variables should be returned as well. (optional)
     * @param  string $tenant_id Only return instances with the given tenantId. (optional)
     * @param  string $tenant_id_like Only return instances with a tenantId like the given value. (optional)
     * @param  bool $without_tenant_id If true, only returns instances without a tenantId set. If false, the withoutTenantId parameter is ignored. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\DataResponse
     */
    public function listHistoricProcessInstances($process_instance_id = null, $process_definition_key = null, $process_definition_id = null, $business_key = null, $involved_user = null, $finished = null, $super_process_instance_id = null, $exclude_subprocesses = null, $finished_after = null, $finished_before = null, $started_after = null, $started_before = null, $started_by = null, $include_process_variables = null, $tenant_id = null, $tenant_id_like = null, $without_tenant_id = null)
    {
        list($response) = $this->listHistoricProcessInstancesWithHttpInfo($process_instance_id, $process_definition_key, $process_definition_id, $business_key, $involved_user, $finished, $super_process_instance_id, $exclude_subprocesses, $finished_after, $finished_before, $started_after, $started_before, $started_by, $include_process_variables, $tenant_id, $tenant_id_like, $without_tenant_id);
        return $response;
    }

    /**
     * Operation listHistoricProcessInstancesWithHttpInfo
     *
     * List of historic process instances
     *
     * @param  string $process_instance_id An id of the historic process instance. (optional)
     * @param  string $process_definition_key The process definition key of the historic process instance. (optional)
     * @param  string $process_definition_id The process definition id of the historic process instance. (optional)
     * @param  string $business_key The business key of the historic process instance. (optional)
     * @param  string $involved_user An involved user of the historic process instance. (optional)
     * @param  bool $finished Indication if the historic process instance is finished. (optional)
     * @param  string $super_process_instance_id An optional parent process id of the historic process instance. (optional)
     * @param  bool $exclude_subprocesses Return only historic process instances which aren�t sub processes. (optional)
     * @param  string $finished_after Return only historic process instances that were finished after this date. (optional)
     * @param  string $finished_before Return only historic process instances that were finished before this date. (optional)
     * @param  string $started_after Return only historic process instances that were started after this date. (optional)
     * @param  string $started_before Return only historic process instances that were started before this date. (optional)
     * @param  string $started_by Return only historic process instances that were started by this user. (optional)
     * @param  bool $include_process_variables An indication if the historic process instance variables should be returned as well. (optional)
     * @param  string $tenant_id Only return instances with the given tenantId. (optional)
     * @param  string $tenant_id_like Only return instances with a tenantId like the given value. (optional)
     * @param  bool $without_tenant_id If true, only returns instances without a tenantId set. If false, the withoutTenantId parameter is ignored. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\DataResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function listHistoricProcessInstancesWithHttpInfo($process_instance_id = null, $process_definition_key = null, $process_definition_id = null, $business_key = null, $involved_user = null, $finished = null, $super_process_instance_id = null, $exclude_subprocesses = null, $finished_after = null, $finished_before = null, $started_after = null, $started_before = null, $started_by = null, $include_process_variables = null, $tenant_id = null, $tenant_id_like = null, $without_tenant_id = null)
    {
        $returnType = '\Swagger\Client\Model\DataResponse';
        $request = $this->listHistoricProcessInstancesRequest($process_instance_id, $process_definition_key, $process_definition_id, $business_key, $involved_user, $finished, $super_process_instance_id, $exclude_subprocesses, $finished_after, $finished_before, $started_after, $started_before, $started_by, $include_process_variables, $tenant_id, $tenant_id_like, $without_tenant_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()->getBody()->getContents()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\DataResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listHistoricProcessInstancesAsync
     *
     * List of historic process instances
     *
     * @param  string $process_instance_id An id of the historic process instance. (optional)
     * @param  string $process_definition_key The process definition key of the historic process instance. (optional)
     * @param  string $process_definition_id The process definition id of the historic process instance. (optional)
     * @param  string $business_key The business key of the historic process instance. (optional)
     * @param  string $involved_user An involved user of the historic process instance. (optional)
     * @param  bool $finished Indication if the historic process instance is finished. (optional)
     * @param  string $super_process_instance_id An optional parent process id of the historic process instance. (optional)
     * @param  bool $exclude_subprocesses Return only historic process instances which aren�t sub processes. (optional)
     * @param  string $finished_after Return only historic process instances that were finished after this date. (optional)
     * @param  string $finished_before Return only historic process instances that were finished before this date. (optional)
     * @param  string $started_after Return only historic process instances that were started after this date. (optional)
     * @param  string $started_before Return only historic process instances that were started before this date. (optional)
     * @param  string $started_by Return only historic process instances that were started by this user. (optional)
     * @param  bool $include_process_variables An indication if the historic process instance variables should be returned as well. (optional)
     * @param  string $tenant_id Only return instances with the given tenantId. (optional)
     * @param  string $tenant_id_like Only return instances with a tenantId like the given value. (optional)
     * @param  bool $without_tenant_id If true, only returns instances without a tenantId set. If false, the withoutTenantId parameter is ignored. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listHistoricProcessInstancesAsync($process_instance_id = null, $process_definition_key = null, $process_definition_id = null, $business_key = null, $involved_user = null, $finished = null, $super_process_instance_id = null, $exclude_subprocesses = null, $finished_after = null, $finished_before = null, $started_after = null, $started_before = null, $started_by = null, $include_process_variables = null, $tenant_id = null, $tenant_id_like = null, $without_tenant_id = null)
    {
        return $this->listHistoricProcessInstancesAsyncWithHttpInfo($process_instance_id, $process_definition_key, $process_definition_id, $business_key, $involved_user, $finished, $super_process_instance_id, $exclude_subprocesses, $finished_after, $finished_before, $started_after, $started_before, $started_by, $include_process_variables, $tenant_id, $tenant_id_like, $without_tenant_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listHistoricProcessInstancesAsyncWithHttpInfo
     *
     * List of historic process instances
     *
     * @param  string $process_instance_id An id of the historic process instance. (optional)
     * @param  string $process_definition_key The process definition key of the historic process instance. (optional)
     * @param  string $process_definition_id The process definition id of the historic process instance. (optional)
     * @param  string $business_key The business key of the historic process instance. (optional)
     * @param  string $involved_user An involved user of the historic process instance. (optional)
     * @param  bool $finished Indication if the historic process instance is finished. (optional)
     * @param  string $super_process_instance_id An optional parent process id of the historic process instance. (optional)
     * @param  bool $exclude_subprocesses Return only historic process instances which aren�t sub processes. (optional)
     * @param  string $finished_after Return only historic process instances that were finished after this date. (optional)
     * @param  string $finished_before Return only historic process instances that were finished before this date. (optional)
     * @param  string $started_after Return only historic process instances that were started after this date. (optional)
     * @param  string $started_before Return only historic process instances that were started before this date. (optional)
     * @param  string $started_by Return only historic process instances that were started by this user. (optional)
     * @param  bool $include_process_variables An indication if the historic process instance variables should be returned as well. (optional)
     * @param  string $tenant_id Only return instances with the given tenantId. (optional)
     * @param  string $tenant_id_like Only return instances with a tenantId like the given value. (optional)
     * @param  bool $without_tenant_id If true, only returns instances without a tenantId set. If false, the withoutTenantId parameter is ignored. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listHistoricProcessInstancesAsyncWithHttpInfo($process_instance_id = null, $process_definition_key = null, $process_definition_id = null, $business_key = null, $involved_user = null, $finished = null, $super_process_instance_id = null, $exclude_subprocesses = null, $finished_after = null, $finished_before = null, $started_after = null, $started_before = null, $started_by = null, $include_process_variables = null, $tenant_id = null, $tenant_id_like = null, $without_tenant_id = null)
    {
        $returnType = '\Swagger\Client\Model\DataResponse';
        $request = $this->listHistoricProcessInstancesRequest($process_instance_id, $process_definition_key, $process_definition_id, $business_key, $involved_user, $finished, $super_process_instance_id, $exclude_subprocesses, $finished_after, $finished_before, $started_after, $started_before, $started_by, $include_process_variables, $tenant_id, $tenant_id_like, $without_tenant_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listHistoricProcessInstances'
     *
     * @param  string $process_instance_id An id of the historic process instance. (optional)
     * @param  string $process_definition_key The process definition key of the historic process instance. (optional)
     * @param  string $process_definition_id The process definition id of the historic process instance. (optional)
     * @param  string $business_key The business key of the historic process instance. (optional)
     * @param  string $involved_user An involved user of the historic process instance. (optional)
     * @param  bool $finished Indication if the historic process instance is finished. (optional)
     * @param  string $super_process_instance_id An optional parent process id of the historic process instance. (optional)
     * @param  bool $exclude_subprocesses Return only historic process instances which aren�t sub processes. (optional)
     * @param  string $finished_after Return only historic process instances that were finished after this date. (optional)
     * @param  string $finished_before Return only historic process instances that were finished before this date. (optional)
     * @param  string $started_after Return only historic process instances that were started after this date. (optional)
     * @param  string $started_before Return only historic process instances that were started before this date. (optional)
     * @param  string $started_by Return only historic process instances that were started by this user. (optional)
     * @param  bool $include_process_variables An indication if the historic process instance variables should be returned as well. (optional)
     * @param  string $tenant_id Only return instances with the given tenantId. (optional)
     * @param  string $tenant_id_like Only return instances with a tenantId like the given value. (optional)
     * @param  bool $without_tenant_id If true, only returns instances without a tenantId set. If false, the withoutTenantId parameter is ignored. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function listHistoricProcessInstancesRequest($process_instance_id = null, $process_definition_key = null, $process_definition_id = null, $business_key = null, $involved_user = null, $finished = null, $super_process_instance_id = null, $exclude_subprocesses = null, $finished_after = null, $finished_before = null, $started_after = null, $started_before = null, $started_by = null, $include_process_variables = null, $tenant_id = null, $tenant_id_like = null, $without_tenant_id = null)
    {

        $resourcePath = '/history/historic-process-instances';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($process_instance_id !== null) {
            $queryParams['processInstanceId'] = ObjectSerializer::toQueryValue($process_instance_id);
        }
        // query params
        if ($process_definition_key !== null) {
            $queryParams['processDefinitionKey'] = ObjectSerializer::toQueryValue($process_definition_key);
        }
        // query params
        if ($process_definition_id !== null) {
            $queryParams['processDefinitionId'] = ObjectSerializer::toQueryValue($process_definition_id);
        }
        // query params
        if ($business_key !== null) {
            $queryParams['businessKey'] = ObjectSerializer::toQueryValue($business_key);
        }
        // query params
        if ($involved_user !== null) {
            $queryParams['involvedUser'] = ObjectSerializer::toQueryValue($involved_user);
        }
        // query params
        if ($finished !== null) {
            $queryParams['finished'] = ObjectSerializer::toQueryValue($finished);
        }
        // query params
        if ($super_process_instance_id !== null) {
            $queryParams['superProcessInstanceId'] = ObjectSerializer::toQueryValue($super_process_instance_id);
        }
        // query params
        if ($exclude_subprocesses !== null) {
            $queryParams['excludeSubprocesses'] = ObjectSerializer::toQueryValue($exclude_subprocesses);
        }
        // query params
        if ($finished_after !== null) {
            $queryParams['finishedAfter'] = ObjectSerializer::toQueryValue($finished_after);
        }
        // query params
        if ($finished_before !== null) {
            $queryParams['finishedBefore'] = ObjectSerializer::toQueryValue($finished_before);
        }
        // query params
        if ($started_after !== null) {
            $queryParams['startedAfter'] = ObjectSerializer::toQueryValue($started_after);
        }
        // query params
        if ($started_before !== null) {
            $queryParams['startedBefore'] = ObjectSerializer::toQueryValue($started_before);
        }
        // query params
        if ($started_by !== null) {
            $queryParams['startedBy'] = ObjectSerializer::toQueryValue($started_by);
        }
        // query params
        if ($include_process_variables !== null) {
            $queryParams['includeProcessVariables'] = ObjectSerializer::toQueryValue($include_process_variables);
        }
        // query params
        if ($tenant_id !== null) {
            $queryParams['tenantId'] = ObjectSerializer::toQueryValue($tenant_id);
        }
        // query params
        if ($tenant_id_like !== null) {
            $queryParams['tenantIdLike'] = ObjectSerializer::toQueryValue($tenant_id_like);
        }
        // query params
        if ($without_tenant_id !== null) {
            $queryParams['withoutTenantId'] = ObjectSerializer::toQueryValue($without_tenant_id);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listHistoricTaskInstances
     *
     * Get historic task instances
     *
     * @param  string $task_id An id of the historic task instance. (optional)
     * @param  string $process_instance_id The process instance id of the historic task instance. (optional)
     * @param  string $process_definition_key The process definition key of the historic task instance. (optional)
     * @param  string $process_definition_key_like The process definition key of the historic task instance, which matches the given value. (optional)
     * @param  string $process_definition_id The process definition id of the historic task instance. (optional)
     * @param  string $process_definition_name The process definition name of the historic task instance. (optional)
     * @param  string $process_definition_name_like The process definition name of the historic task instance, which matches the given value. (optional)
     * @param  string $process_business_key The process instance business key of the historic task instance. (optional)
     * @param  string $process_business_key_like The process instance business key of the historic task instance that matches the given value. (optional)
     * @param  string $execution_id The execution id of the historic task instance. (optional)
     * @param  string $task_definition_key The task definition key for tasks part of a process (optional)
     * @param  string $task_name The task name of the historic task instance. (optional)
     * @param  string $task_name_like The task name with like operator for the historic task instance. (optional)
     * @param  string $task_description The task description of the historic task instance. (optional)
     * @param  string $task_description_like The task description with like operator for the historic task instance. (optional)
     * @param  string $task_category Select tasks with the given category. Note that this is the task category, not the category of the process definition (namespace within the BPMN Xml). (optional)
     * @param  string $task_delete_reason The task delete reason of the historic task instance. (optional)
     * @param  string $task_delete_reason_like The task delete reason with like operator for the historic task instance. (optional)
     * @param  string $task_assignee The assignee of the historic task instance. (optional)
     * @param  string $task_assignee_like The assignee with like operator for the historic task instance. (optional)
     * @param  string $task_owner The owner of the historic task instance. (optional)
     * @param  string $task_owner_like The owner with like operator for the historic task instance. (optional)
     * @param  string $task_involved_user An involved user of the historic task instance (optional)
     * @param  string $task_priority The priority of the historic task instance. (optional)
     * @param  bool $finished Indication if the historic task instance is finished. (optional)
     * @param  bool $process_finished Indication if the process instance of the historic task instance is finished. (optional)
     * @param  string $parent_task_id An optional parent task id of the historic task instance. (optional)
     * @param  string $due_date Return only historic task instances that have a due date equal this date. (optional)
     * @param  string $due_date_after Return only historic task instances that have a due date after this date. (optional)
     * @param  string $due_date_before Return only historic task instances that have a due date before this date. (optional)
     * @param  bool $without_due_date Return only historic task instances that have no due-date. When false is provided as value, this parameter is ignored. (optional)
     * @param  string $task_completed_on Return only historic task instances that have been completed on this date. (optional)
     * @param  string $task_completed_after Return only historic task instances that have been completed after this date. (optional)
     * @param  string $task_completed_before Return only historic task instances that have been completed before this date. (optional)
     * @param  string $task_created_on Return only historic task instances that were created on this date. (optional)
     * @param  string $task_created_before Return only historic task instances that were created before this date. (optional)
     * @param  string $task_created_after Return only historic task instances that were created after this date. (optional)
     * @param  bool $include_task_local_variables An indication if the historic task instance local variables should be returned as well. (optional)
     * @param  bool $include_process_variables An indication if the historic task instance global variables should be returned as well. (optional)
     * @param  string $tenant_id Only return historic task instances with the given tenantId. (optional)
     * @param  string $tenant_id_like Only return historic task instances with a tenantId like the given value. (optional)
     * @param  bool $without_tenant_id If true, only returns historic task instances without a tenantId set. If false, the withoutTenantId parameter is ignored. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\DataResponse
     */
    public function listHistoricTaskInstances($task_id = null, $process_instance_id = null, $process_definition_key = null, $process_definition_key_like = null, $process_definition_id = null, $process_definition_name = null, $process_definition_name_like = null, $process_business_key = null, $process_business_key_like = null, $execution_id = null, $task_definition_key = null, $task_name = null, $task_name_like = null, $task_description = null, $task_description_like = null, $task_category = null, $task_delete_reason = null, $task_delete_reason_like = null, $task_assignee = null, $task_assignee_like = null, $task_owner = null, $task_owner_like = null, $task_involved_user = null, $task_priority = null, $finished = null, $process_finished = null, $parent_task_id = null, $due_date = null, $due_date_after = null, $due_date_before = null, $without_due_date = null, $task_completed_on = null, $task_completed_after = null, $task_completed_before = null, $task_created_on = null, $task_created_before = null, $task_created_after = null, $include_task_local_variables = null, $include_process_variables = null, $tenant_id = null, $tenant_id_like = null, $without_tenant_id = null)
    {
        list($response) = $this->listHistoricTaskInstancesWithHttpInfo($task_id, $process_instance_id, $process_definition_key, $process_definition_key_like, $process_definition_id, $process_definition_name, $process_definition_name_like, $process_business_key, $process_business_key_like, $execution_id, $task_definition_key, $task_name, $task_name_like, $task_description, $task_description_like, $task_category, $task_delete_reason, $task_delete_reason_like, $task_assignee, $task_assignee_like, $task_owner, $task_owner_like, $task_involved_user, $task_priority, $finished, $process_finished, $parent_task_id, $due_date, $due_date_after, $due_date_before, $without_due_date, $task_completed_on, $task_completed_after, $task_completed_before, $task_created_on, $task_created_before, $task_created_after, $include_task_local_variables, $include_process_variables, $tenant_id, $tenant_id_like, $without_tenant_id);
        return $response;
    }

    /**
     * Operation listHistoricTaskInstancesWithHttpInfo
     *
     * Get historic task instances
     *
     * @param  string $task_id An id of the historic task instance. (optional)
     * @param  string $process_instance_id The process instance id of the historic task instance. (optional)
     * @param  string $process_definition_key The process definition key of the historic task instance. (optional)
     * @param  string $process_definition_key_like The process definition key of the historic task instance, which matches the given value. (optional)
     * @param  string $process_definition_id The process definition id of the historic task instance. (optional)
     * @param  string $process_definition_name The process definition name of the historic task instance. (optional)
     * @param  string $process_definition_name_like The process definition name of the historic task instance, which matches the given value. (optional)
     * @param  string $process_business_key The process instance business key of the historic task instance. (optional)
     * @param  string $process_business_key_like The process instance business key of the historic task instance that matches the given value. (optional)
     * @param  string $execution_id The execution id of the historic task instance. (optional)
     * @param  string $task_definition_key The task definition key for tasks part of a process (optional)
     * @param  string $task_name The task name of the historic task instance. (optional)
     * @param  string $task_name_like The task name with like operator for the historic task instance. (optional)
     * @param  string $task_description The task description of the historic task instance. (optional)
     * @param  string $task_description_like The task description with like operator for the historic task instance. (optional)
     * @param  string $task_category Select tasks with the given category. Note that this is the task category, not the category of the process definition (namespace within the BPMN Xml). (optional)
     * @param  string $task_delete_reason The task delete reason of the historic task instance. (optional)
     * @param  string $task_delete_reason_like The task delete reason with like operator for the historic task instance. (optional)
     * @param  string $task_assignee The assignee of the historic task instance. (optional)
     * @param  string $task_assignee_like The assignee with like operator for the historic task instance. (optional)
     * @param  string $task_owner The owner of the historic task instance. (optional)
     * @param  string $task_owner_like The owner with like operator for the historic task instance. (optional)
     * @param  string $task_involved_user An involved user of the historic task instance (optional)
     * @param  string $task_priority The priority of the historic task instance. (optional)
     * @param  bool $finished Indication if the historic task instance is finished. (optional)
     * @param  bool $process_finished Indication if the process instance of the historic task instance is finished. (optional)
     * @param  string $parent_task_id An optional parent task id of the historic task instance. (optional)
     * @param  string $due_date Return only historic task instances that have a due date equal this date. (optional)
     * @param  string $due_date_after Return only historic task instances that have a due date after this date. (optional)
     * @param  string $due_date_before Return only historic task instances that have a due date before this date. (optional)
     * @param  bool $without_due_date Return only historic task instances that have no due-date. When false is provided as value, this parameter is ignored. (optional)
     * @param  string $task_completed_on Return only historic task instances that have been completed on this date. (optional)
     * @param  string $task_completed_after Return only historic task instances that have been completed after this date. (optional)
     * @param  string $task_completed_before Return only historic task instances that have been completed before this date. (optional)
     * @param  string $task_created_on Return only historic task instances that were created on this date. (optional)
     * @param  string $task_created_before Return only historic task instances that were created before this date. (optional)
     * @param  string $task_created_after Return only historic task instances that were created after this date. (optional)
     * @param  bool $include_task_local_variables An indication if the historic task instance local variables should be returned as well. (optional)
     * @param  bool $include_process_variables An indication if the historic task instance global variables should be returned as well. (optional)
     * @param  string $tenant_id Only return historic task instances with the given tenantId. (optional)
     * @param  string $tenant_id_like Only return historic task instances with a tenantId like the given value. (optional)
     * @param  bool $without_tenant_id If true, only returns historic task instances without a tenantId set. If false, the withoutTenantId parameter is ignored. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\DataResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function listHistoricTaskInstancesWithHttpInfo($task_id = null, $process_instance_id = null, $process_definition_key = null, $process_definition_key_like = null, $process_definition_id = null, $process_definition_name = null, $process_definition_name_like = null, $process_business_key = null, $process_business_key_like = null, $execution_id = null, $task_definition_key = null, $task_name = null, $task_name_like = null, $task_description = null, $task_description_like = null, $task_category = null, $task_delete_reason = null, $task_delete_reason_like = null, $task_assignee = null, $task_assignee_like = null, $task_owner = null, $task_owner_like = null, $task_involved_user = null, $task_priority = null, $finished = null, $process_finished = null, $parent_task_id = null, $due_date = null, $due_date_after = null, $due_date_before = null, $without_due_date = null, $task_completed_on = null, $task_completed_after = null, $task_completed_before = null, $task_created_on = null, $task_created_before = null, $task_created_after = null, $include_task_local_variables = null, $include_process_variables = null, $tenant_id = null, $tenant_id_like = null, $without_tenant_id = null)
    {
        $returnType = '\Swagger\Client\Model\DataResponse';
        $request = $this->listHistoricTaskInstancesRequest($task_id, $process_instance_id, $process_definition_key, $process_definition_key_like, $process_definition_id, $process_definition_name, $process_definition_name_like, $process_business_key, $process_business_key_like, $execution_id, $task_definition_key, $task_name, $task_name_like, $task_description, $task_description_like, $task_category, $task_delete_reason, $task_delete_reason_like, $task_assignee, $task_assignee_like, $task_owner, $task_owner_like, $task_involved_user, $task_priority, $finished, $process_finished, $parent_task_id, $due_date, $due_date_after, $due_date_before, $without_due_date, $task_completed_on, $task_completed_after, $task_completed_before, $task_created_on, $task_created_before, $task_created_after, $include_task_local_variables, $include_process_variables, $tenant_id, $tenant_id_like, $without_tenant_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()->getBody()->getContents()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\DataResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listHistoricTaskInstancesAsync
     *
     * Get historic task instances
     *
     * @param  string $task_id An id of the historic task instance. (optional)
     * @param  string $process_instance_id The process instance id of the historic task instance. (optional)
     * @param  string $process_definition_key The process definition key of the historic task instance. (optional)
     * @param  string $process_definition_key_like The process definition key of the historic task instance, which matches the given value. (optional)
     * @param  string $process_definition_id The process definition id of the historic task instance. (optional)
     * @param  string $process_definition_name The process definition name of the historic task instance. (optional)
     * @param  string $process_definition_name_like The process definition name of the historic task instance, which matches the given value. (optional)
     * @param  string $process_business_key The process instance business key of the historic task instance. (optional)
     * @param  string $process_business_key_like The process instance business key of the historic task instance that matches the given value. (optional)
     * @param  string $execution_id The execution id of the historic task instance. (optional)
     * @param  string $task_definition_key The task definition key for tasks part of a process (optional)
     * @param  string $task_name The task name of the historic task instance. (optional)
     * @param  string $task_name_like The task name with like operator for the historic task instance. (optional)
     * @param  string $task_description The task description of the historic task instance. (optional)
     * @param  string $task_description_like The task description with like operator for the historic task instance. (optional)
     * @param  string $task_category Select tasks with the given category. Note that this is the task category, not the category of the process definition (namespace within the BPMN Xml). (optional)
     * @param  string $task_delete_reason The task delete reason of the historic task instance. (optional)
     * @param  string $task_delete_reason_like The task delete reason with like operator for the historic task instance. (optional)
     * @param  string $task_assignee The assignee of the historic task instance. (optional)
     * @param  string $task_assignee_like The assignee with like operator for the historic task instance. (optional)
     * @param  string $task_owner The owner of the historic task instance. (optional)
     * @param  string $task_owner_like The owner with like operator for the historic task instance. (optional)
     * @param  string $task_involved_user An involved user of the historic task instance (optional)
     * @param  string $task_priority The priority of the historic task instance. (optional)
     * @param  bool $finished Indication if the historic task instance is finished. (optional)
     * @param  bool $process_finished Indication if the process instance of the historic task instance is finished. (optional)
     * @param  string $parent_task_id An optional parent task id of the historic task instance. (optional)
     * @param  string $due_date Return only historic task instances that have a due date equal this date. (optional)
     * @param  string $due_date_after Return only historic task instances that have a due date after this date. (optional)
     * @param  string $due_date_before Return only historic task instances that have a due date before this date. (optional)
     * @param  bool $without_due_date Return only historic task instances that have no due-date. When false is provided as value, this parameter is ignored. (optional)
     * @param  string $task_completed_on Return only historic task instances that have been completed on this date. (optional)
     * @param  string $task_completed_after Return only historic task instances that have been completed after this date. (optional)
     * @param  string $task_completed_before Return only historic task instances that have been completed before this date. (optional)
     * @param  string $task_created_on Return only historic task instances that were created on this date. (optional)
     * @param  string $task_created_before Return only historic task instances that were created before this date. (optional)
     * @param  string $task_created_after Return only historic task instances that were created after this date. (optional)
     * @param  bool $include_task_local_variables An indication if the historic task instance local variables should be returned as well. (optional)
     * @param  bool $include_process_variables An indication if the historic task instance global variables should be returned as well. (optional)
     * @param  string $tenant_id Only return historic task instances with the given tenantId. (optional)
     * @param  string $tenant_id_like Only return historic task instances with a tenantId like the given value. (optional)
     * @param  bool $without_tenant_id If true, only returns historic task instances without a tenantId set. If false, the withoutTenantId parameter is ignored. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listHistoricTaskInstancesAsync($task_id = null, $process_instance_id = null, $process_definition_key = null, $process_definition_key_like = null, $process_definition_id = null, $process_definition_name = null, $process_definition_name_like = null, $process_business_key = null, $process_business_key_like = null, $execution_id = null, $task_definition_key = null, $task_name = null, $task_name_like = null, $task_description = null, $task_description_like = null, $task_category = null, $task_delete_reason = null, $task_delete_reason_like = null, $task_assignee = null, $task_assignee_like = null, $task_owner = null, $task_owner_like = null, $task_involved_user = null, $task_priority = null, $finished = null, $process_finished = null, $parent_task_id = null, $due_date = null, $due_date_after = null, $due_date_before = null, $without_due_date = null, $task_completed_on = null, $task_completed_after = null, $task_completed_before = null, $task_created_on = null, $task_created_before = null, $task_created_after = null, $include_task_local_variables = null, $include_process_variables = null, $tenant_id = null, $tenant_id_like = null, $without_tenant_id = null)
    {
        return $this->listHistoricTaskInstancesAsyncWithHttpInfo($task_id, $process_instance_id, $process_definition_key, $process_definition_key_like, $process_definition_id, $process_definition_name, $process_definition_name_like, $process_business_key, $process_business_key_like, $execution_id, $task_definition_key, $task_name, $task_name_like, $task_description, $task_description_like, $task_category, $task_delete_reason, $task_delete_reason_like, $task_assignee, $task_assignee_like, $task_owner, $task_owner_like, $task_involved_user, $task_priority, $finished, $process_finished, $parent_task_id, $due_date, $due_date_after, $due_date_before, $without_due_date, $task_completed_on, $task_completed_after, $task_completed_before, $task_created_on, $task_created_before, $task_created_after, $include_task_local_variables, $include_process_variables, $tenant_id, $tenant_id_like, $without_tenant_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listHistoricTaskInstancesAsyncWithHttpInfo
     *
     * Get historic task instances
     *
     * @param  string $task_id An id of the historic task instance. (optional)
     * @param  string $process_instance_id The process instance id of the historic task instance. (optional)
     * @param  string $process_definition_key The process definition key of the historic task instance. (optional)
     * @param  string $process_definition_key_like The process definition key of the historic task instance, which matches the given value. (optional)
     * @param  string $process_definition_id The process definition id of the historic task instance. (optional)
     * @param  string $process_definition_name The process definition name of the historic task instance. (optional)
     * @param  string $process_definition_name_like The process definition name of the historic task instance, which matches the given value. (optional)
     * @param  string $process_business_key The process instance business key of the historic task instance. (optional)
     * @param  string $process_business_key_like The process instance business key of the historic task instance that matches the given value. (optional)
     * @param  string $execution_id The execution id of the historic task instance. (optional)
     * @param  string $task_definition_key The task definition key for tasks part of a process (optional)
     * @param  string $task_name The task name of the historic task instance. (optional)
     * @param  string $task_name_like The task name with like operator for the historic task instance. (optional)
     * @param  string $task_description The task description of the historic task instance. (optional)
     * @param  string $task_description_like The task description with like operator for the historic task instance. (optional)
     * @param  string $task_category Select tasks with the given category. Note that this is the task category, not the category of the process definition (namespace within the BPMN Xml). (optional)
     * @param  string $task_delete_reason The task delete reason of the historic task instance. (optional)
     * @param  string $task_delete_reason_like The task delete reason with like operator for the historic task instance. (optional)
     * @param  string $task_assignee The assignee of the historic task instance. (optional)
     * @param  string $task_assignee_like The assignee with like operator for the historic task instance. (optional)
     * @param  string $task_owner The owner of the historic task instance. (optional)
     * @param  string $task_owner_like The owner with like operator for the historic task instance. (optional)
     * @param  string $task_involved_user An involved user of the historic task instance (optional)
     * @param  string $task_priority The priority of the historic task instance. (optional)
     * @param  bool $finished Indication if the historic task instance is finished. (optional)
     * @param  bool $process_finished Indication if the process instance of the historic task instance is finished. (optional)
     * @param  string $parent_task_id An optional parent task id of the historic task instance. (optional)
     * @param  string $due_date Return only historic task instances that have a due date equal this date. (optional)
     * @param  string $due_date_after Return only historic task instances that have a due date after this date. (optional)
     * @param  string $due_date_before Return only historic task instances that have a due date before this date. (optional)
     * @param  bool $without_due_date Return only historic task instances that have no due-date. When false is provided as value, this parameter is ignored. (optional)
     * @param  string $task_completed_on Return only historic task instances that have been completed on this date. (optional)
     * @param  string $task_completed_after Return only historic task instances that have been completed after this date. (optional)
     * @param  string $task_completed_before Return only historic task instances that have been completed before this date. (optional)
     * @param  string $task_created_on Return only historic task instances that were created on this date. (optional)
     * @param  string $task_created_before Return only historic task instances that were created before this date. (optional)
     * @param  string $task_created_after Return only historic task instances that were created after this date. (optional)
     * @param  bool $include_task_local_variables An indication if the historic task instance local variables should be returned as well. (optional)
     * @param  bool $include_process_variables An indication if the historic task instance global variables should be returned as well. (optional)
     * @param  string $tenant_id Only return historic task instances with the given tenantId. (optional)
     * @param  string $tenant_id_like Only return historic task instances with a tenantId like the given value. (optional)
     * @param  bool $without_tenant_id If true, only returns historic task instances without a tenantId set. If false, the withoutTenantId parameter is ignored. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listHistoricTaskInstancesAsyncWithHttpInfo($task_id = null, $process_instance_id = null, $process_definition_key = null, $process_definition_key_like = null, $process_definition_id = null, $process_definition_name = null, $process_definition_name_like = null, $process_business_key = null, $process_business_key_like = null, $execution_id = null, $task_definition_key = null, $task_name = null, $task_name_like = null, $task_description = null, $task_description_like = null, $task_category = null, $task_delete_reason = null, $task_delete_reason_like = null, $task_assignee = null, $task_assignee_like = null, $task_owner = null, $task_owner_like = null, $task_involved_user = null, $task_priority = null, $finished = null, $process_finished = null, $parent_task_id = null, $due_date = null, $due_date_after = null, $due_date_before = null, $without_due_date = null, $task_completed_on = null, $task_completed_after = null, $task_completed_before = null, $task_created_on = null, $task_created_before = null, $task_created_after = null, $include_task_local_variables = null, $include_process_variables = null, $tenant_id = null, $tenant_id_like = null, $without_tenant_id = null)
    {
        $returnType = '\Swagger\Client\Model\DataResponse';
        $request = $this->listHistoricTaskInstancesRequest($task_id, $process_instance_id, $process_definition_key, $process_definition_key_like, $process_definition_id, $process_definition_name, $process_definition_name_like, $process_business_key, $process_business_key_like, $execution_id, $task_definition_key, $task_name, $task_name_like, $task_description, $task_description_like, $task_category, $task_delete_reason, $task_delete_reason_like, $task_assignee, $task_assignee_like, $task_owner, $task_owner_like, $task_involved_user, $task_priority, $finished, $process_finished, $parent_task_id, $due_date, $due_date_after, $due_date_before, $without_due_date, $task_completed_on, $task_completed_after, $task_completed_before, $task_created_on, $task_created_before, $task_created_after, $include_task_local_variables, $include_process_variables, $tenant_id, $tenant_id_like, $without_tenant_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listHistoricTaskInstances'
     *
     * @param  string $task_id An id of the historic task instance. (optional)
     * @param  string $process_instance_id The process instance id of the historic task instance. (optional)
     * @param  string $process_definition_key The process definition key of the historic task instance. (optional)
     * @param  string $process_definition_key_like The process definition key of the historic task instance, which matches the given value. (optional)
     * @param  string $process_definition_id The process definition id of the historic task instance. (optional)
     * @param  string $process_definition_name The process definition name of the historic task instance. (optional)
     * @param  string $process_definition_name_like The process definition name of the historic task instance, which matches the given value. (optional)
     * @param  string $process_business_key The process instance business key of the historic task instance. (optional)
     * @param  string $process_business_key_like The process instance business key of the historic task instance that matches the given value. (optional)
     * @param  string $execution_id The execution id of the historic task instance. (optional)
     * @param  string $task_definition_key The task definition key for tasks part of a process (optional)
     * @param  string $task_name The task name of the historic task instance. (optional)
     * @param  string $task_name_like The task name with like operator for the historic task instance. (optional)
     * @param  string $task_description The task description of the historic task instance. (optional)
     * @param  string $task_description_like The task description with like operator for the historic task instance. (optional)
     * @param  string $task_category Select tasks with the given category. Note that this is the task category, not the category of the process definition (namespace within the BPMN Xml). (optional)
     * @param  string $task_delete_reason The task delete reason of the historic task instance. (optional)
     * @param  string $task_delete_reason_like The task delete reason with like operator for the historic task instance. (optional)
     * @param  string $task_assignee The assignee of the historic task instance. (optional)
     * @param  string $task_assignee_like The assignee with like operator for the historic task instance. (optional)
     * @param  string $task_owner The owner of the historic task instance. (optional)
     * @param  string $task_owner_like The owner with like operator for the historic task instance. (optional)
     * @param  string $task_involved_user An involved user of the historic task instance (optional)
     * @param  string $task_priority The priority of the historic task instance. (optional)
     * @param  bool $finished Indication if the historic task instance is finished. (optional)
     * @param  bool $process_finished Indication if the process instance of the historic task instance is finished. (optional)
     * @param  string $parent_task_id An optional parent task id of the historic task instance. (optional)
     * @param  string $due_date Return only historic task instances that have a due date equal this date. (optional)
     * @param  string $due_date_after Return only historic task instances that have a due date after this date. (optional)
     * @param  string $due_date_before Return only historic task instances that have a due date before this date. (optional)
     * @param  bool $without_due_date Return only historic task instances that have no due-date. When false is provided as value, this parameter is ignored. (optional)
     * @param  string $task_completed_on Return only historic task instances that have been completed on this date. (optional)
     * @param  string $task_completed_after Return only historic task instances that have been completed after this date. (optional)
     * @param  string $task_completed_before Return only historic task instances that have been completed before this date. (optional)
     * @param  string $task_created_on Return only historic task instances that were created on this date. (optional)
     * @param  string $task_created_before Return only historic task instances that were created before this date. (optional)
     * @param  string $task_created_after Return only historic task instances that were created after this date. (optional)
     * @param  bool $include_task_local_variables An indication if the historic task instance local variables should be returned as well. (optional)
     * @param  bool $include_process_variables An indication if the historic task instance global variables should be returned as well. (optional)
     * @param  string $tenant_id Only return historic task instances with the given tenantId. (optional)
     * @param  string $tenant_id_like Only return historic task instances with a tenantId like the given value. (optional)
     * @param  bool $without_tenant_id If true, only returns historic task instances without a tenantId set. If false, the withoutTenantId parameter is ignored. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function listHistoricTaskInstancesRequest($task_id = null, $process_instance_id = null, $process_definition_key = null, $process_definition_key_like = null, $process_definition_id = null, $process_definition_name = null, $process_definition_name_like = null, $process_business_key = null, $process_business_key_like = null, $execution_id = null, $task_definition_key = null, $task_name = null, $task_name_like = null, $task_description = null, $task_description_like = null, $task_category = null, $task_delete_reason = null, $task_delete_reason_like = null, $task_assignee = null, $task_assignee_like = null, $task_owner = null, $task_owner_like = null, $task_involved_user = null, $task_priority = null, $finished = null, $process_finished = null, $parent_task_id = null, $due_date = null, $due_date_after = null, $due_date_before = null, $without_due_date = null, $task_completed_on = null, $task_completed_after = null, $task_completed_before = null, $task_created_on = null, $task_created_before = null, $task_created_after = null, $include_task_local_variables = null, $include_process_variables = null, $tenant_id = null, $tenant_id_like = null, $without_tenant_id = null)
    {

        $resourcePath = '/history/historic-task-instances';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($task_id !== null) {
            $queryParams['taskId'] = ObjectSerializer::toQueryValue($task_id);
        }
        // query params
        if ($process_instance_id !== null) {
            $queryParams['processInstanceId'] = ObjectSerializer::toQueryValue($process_instance_id);
        }
        // query params
        if ($process_definition_key !== null) {
            $queryParams['processDefinitionKey'] = ObjectSerializer::toQueryValue($process_definition_key);
        }
        // query params
        if ($process_definition_key_like !== null) {
            $queryParams['processDefinitionKeyLike'] = ObjectSerializer::toQueryValue($process_definition_key_like);
        }
        // query params
        if ($process_definition_id !== null) {
            $queryParams['processDefinitionId'] = ObjectSerializer::toQueryValue($process_definition_id);
        }
        // query params
        if ($process_definition_name !== null) {
            $queryParams['processDefinitionName'] = ObjectSerializer::toQueryValue($process_definition_name);
        }
        // query params
        if ($process_definition_name_like !== null) {
            $queryParams['processDefinitionNameLike'] = ObjectSerializer::toQueryValue($process_definition_name_like);
        }
        // query params
        if ($process_business_key !== null) {
            $queryParams['processBusinessKey'] = ObjectSerializer::toQueryValue($process_business_key);
        }
        // query params
        if ($process_business_key_like !== null) {
            $queryParams['processBusinessKeyLike'] = ObjectSerializer::toQueryValue($process_business_key_like);
        }
        // query params
        if ($execution_id !== null) {
            $queryParams['executionId'] = ObjectSerializer::toQueryValue($execution_id);
        }
        // query params
        if ($task_definition_key !== null) {
            $queryParams['taskDefinitionKey'] = ObjectSerializer::toQueryValue($task_definition_key);
        }
        // query params
        if ($task_name !== null) {
            $queryParams['taskName'] = ObjectSerializer::toQueryValue($task_name);
        }
        // query params
        if ($task_name_like !== null) {
            $queryParams['taskNameLike'] = ObjectSerializer::toQueryValue($task_name_like);
        }
        // query params
        if ($task_description !== null) {
            $queryParams['taskDescription'] = ObjectSerializer::toQueryValue($task_description);
        }
        // query params
        if ($task_description_like !== null) {
            $queryParams['taskDescriptionLike'] = ObjectSerializer::toQueryValue($task_description_like);
        }
        // query params
        if ($task_category !== null) {
            $queryParams['taskCategory'] = ObjectSerializer::toQueryValue($task_category);
        }
        // query params
        if ($task_delete_reason !== null) {
            $queryParams['taskDeleteReason'] = ObjectSerializer::toQueryValue($task_delete_reason);
        }
        // query params
        if ($task_delete_reason_like !== null) {
            $queryParams['taskDeleteReasonLike'] = ObjectSerializer::toQueryValue($task_delete_reason_like);
        }
        // query params
        if ($task_assignee !== null) {
            $queryParams['taskAssignee'] = ObjectSerializer::toQueryValue($task_assignee);
        }
        // query params
        if ($task_assignee_like !== null) {
            $queryParams['taskAssigneeLike'] = ObjectSerializer::toQueryValue($task_assignee_like);
        }
        // query params
        if ($task_owner !== null) {
            $queryParams['taskOwner'] = ObjectSerializer::toQueryValue($task_owner);
        }
        // query params
        if ($task_owner_like !== null) {
            $queryParams['taskOwnerLike'] = ObjectSerializer::toQueryValue($task_owner_like);
        }
        // query params
        if ($task_involved_user !== null) {
            $queryParams['taskInvolvedUser'] = ObjectSerializer::toQueryValue($task_involved_user);
        }
        // query params
        if ($task_priority !== null) {
            $queryParams['taskPriority'] = ObjectSerializer::toQueryValue($task_priority);
        }
        // query params
        if ($finished !== null) {
            $queryParams['finished'] = ObjectSerializer::toQueryValue($finished);
        }
        // query params
        if ($process_finished !== null) {
            $queryParams['processFinished'] = ObjectSerializer::toQueryValue($process_finished);
        }
        // query params
        if ($parent_task_id !== null) {
            $queryParams['parentTaskId'] = ObjectSerializer::toQueryValue($parent_task_id);
        }
        // query params
        if ($due_date !== null) {
            $queryParams['dueDate'] = ObjectSerializer::toQueryValue($due_date);
        }
        // query params
        if ($due_date_after !== null) {
            $queryParams['dueDateAfter'] = ObjectSerializer::toQueryValue($due_date_after);
        }
        // query params
        if ($due_date_before !== null) {
            $queryParams['dueDateBefore'] = ObjectSerializer::toQueryValue($due_date_before);
        }
        // query params
        if ($without_due_date !== null) {
            $queryParams['withoutDueDate'] = ObjectSerializer::toQueryValue($without_due_date);
        }
        // query params
        if ($task_completed_on !== null) {
            $queryParams['taskCompletedOn'] = ObjectSerializer::toQueryValue($task_completed_on);
        }
        // query params
        if ($task_completed_after !== null) {
            $queryParams['taskCompletedAfter'] = ObjectSerializer::toQueryValue($task_completed_after);
        }
        // query params
        if ($task_completed_before !== null) {
            $queryParams['taskCompletedBefore'] = ObjectSerializer::toQueryValue($task_completed_before);
        }
        // query params
        if ($task_created_on !== null) {
            $queryParams['taskCreatedOn'] = ObjectSerializer::toQueryValue($task_created_on);
        }
        // query params
        if ($task_created_before !== null) {
            $queryParams['taskCreatedBefore'] = ObjectSerializer::toQueryValue($task_created_before);
        }
        // query params
        if ($task_created_after !== null) {
            $queryParams['taskCreatedAfter'] = ObjectSerializer::toQueryValue($task_created_after);
        }
        // query params
        if ($include_task_local_variables !== null) {
            $queryParams['includeTaskLocalVariables'] = ObjectSerializer::toQueryValue($include_task_local_variables);
        }
        // query params
        if ($include_process_variables !== null) {
            $queryParams['includeProcessVariables'] = ObjectSerializer::toQueryValue($include_process_variables);
        }
        // query params
        if ($tenant_id !== null) {
            $queryParams['tenantId'] = ObjectSerializer::toQueryValue($tenant_id);
        }
        // query params
        if ($tenant_id_like !== null) {
            $queryParams['tenantIdLike'] = ObjectSerializer::toQueryValue($tenant_id_like);
        }
        // query params
        if ($without_tenant_id !== null) {
            $queryParams['withoutTenantId'] = ObjectSerializer::toQueryValue($without_tenant_id);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation queryActivityInstances
     *
     * Query for historic activity instances
     *
     * @param  \Swagger\Client\Model\HistoricActivityInstanceQueryRequest $body body (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\DataResponse
     */
    public function queryActivityInstances($body = null)
    {
        list($response) = $this->queryActivityInstancesWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation queryActivityInstancesWithHttpInfo
     *
     * Query for historic activity instances
     *
     * @param  \Swagger\Client\Model\HistoricActivityInstanceQueryRequest $body (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\DataResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function queryActivityInstancesWithHttpInfo($body = null)
    {
        $returnType = '\Swagger\Client\Model\DataResponse';
        $request = $this->queryActivityInstancesRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()->getBody()->getContents()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\DataResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation queryActivityInstancesAsync
     *
     * Query for historic activity instances
     *
     * @param  \Swagger\Client\Model\HistoricActivityInstanceQueryRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function queryActivityInstancesAsync($body = null)
    {
        return $this->queryActivityInstancesAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation queryActivityInstancesAsyncWithHttpInfo
     *
     * Query for historic activity instances
     *
     * @param  \Swagger\Client\Model\HistoricActivityInstanceQueryRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function queryActivityInstancesAsyncWithHttpInfo($body = null)
    {
        $returnType = '\Swagger\Client\Model\DataResponse';
        $request = $this->queryActivityInstancesRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'queryActivityInstances'
     *
     * @param  \Swagger\Client\Model\HistoricActivityInstanceQueryRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function queryActivityInstancesRequest($body = null)
    {

        $resourcePath = '/query/historic-activity-instances';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation queryHistoricDetail
     *
     * Query for historic details
     *
     * @param  \Swagger\Client\Model\HistoricDetailQueryRequest $body body (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\DataResponse
     */
    public function queryHistoricDetail($body = null)
    {
        list($response) = $this->queryHistoricDetailWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation queryHistoricDetailWithHttpInfo
     *
     * Query for historic details
     *
     * @param  \Swagger\Client\Model\HistoricDetailQueryRequest $body (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\DataResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function queryHistoricDetailWithHttpInfo($body = null)
    {
        $returnType = '\Swagger\Client\Model\DataResponse';
        $request = $this->queryHistoricDetailRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()->getBody()->getContents()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\DataResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation queryHistoricDetailAsync
     *
     * Query for historic details
     *
     * @param  \Swagger\Client\Model\HistoricDetailQueryRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function queryHistoricDetailAsync($body = null)
    {
        return $this->queryHistoricDetailAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation queryHistoricDetailAsyncWithHttpInfo
     *
     * Query for historic details
     *
     * @param  \Swagger\Client\Model\HistoricDetailQueryRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function queryHistoricDetailAsyncWithHttpInfo($body = null)
    {
        $returnType = '\Swagger\Client\Model\DataResponse';
        $request = $this->queryHistoricDetailRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'queryHistoricDetail'
     *
     * @param  \Swagger\Client\Model\HistoricDetailQueryRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function queryHistoricDetailRequest($body = null)
    {

        $resourcePath = '/query/historic-detail';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation queryHistoricProcessInstance
     *
     * Query for historic process instances
     *
     * @param  \Swagger\Client\Model\HistoricProcessInstanceQueryRequest $body body (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\DataResponse
     */
    public function queryHistoricProcessInstance($body = null)
    {
        list($response) = $this->queryHistoricProcessInstanceWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation queryHistoricProcessInstanceWithHttpInfo
     *
     * Query for historic process instances
     *
     * @param  \Swagger\Client\Model\HistoricProcessInstanceQueryRequest $body (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\DataResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function queryHistoricProcessInstanceWithHttpInfo($body = null)
    {
        $returnType = '\Swagger\Client\Model\DataResponse';
        $request = $this->queryHistoricProcessInstanceRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()->getBody()->getContents()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\DataResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation queryHistoricProcessInstanceAsync
     *
     * Query for historic process instances
     *
     * @param  \Swagger\Client\Model\HistoricProcessInstanceQueryRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function queryHistoricProcessInstanceAsync($body = null)
    {
        return $this->queryHistoricProcessInstanceAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation queryHistoricProcessInstanceAsyncWithHttpInfo
     *
     * Query for historic process instances
     *
     * @param  \Swagger\Client\Model\HistoricProcessInstanceQueryRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function queryHistoricProcessInstanceAsyncWithHttpInfo($body = null)
    {
        $returnType = '\Swagger\Client\Model\DataResponse';
        $request = $this->queryHistoricProcessInstanceRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'queryHistoricProcessInstance'
     *
     * @param  \Swagger\Client\Model\HistoricProcessInstanceQueryRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function queryHistoricProcessInstanceRequest($body = null)
    {

        $resourcePath = '/query/historic-process-instances';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation queryHistoricTaskInstance
     *
     * Query for historic task instances
     *
     * @param  \Swagger\Client\Model\HistoricTaskInstanceQueryRequest $body body (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\DataResponse
     */
    public function queryHistoricTaskInstance($body = null)
    {
        list($response) = $this->queryHistoricTaskInstanceWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation queryHistoricTaskInstanceWithHttpInfo
     *
     * Query for historic task instances
     *
     * @param  \Swagger\Client\Model\HistoricTaskInstanceQueryRequest $body (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\DataResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function queryHistoricTaskInstanceWithHttpInfo($body = null)
    {
        $returnType = '\Swagger\Client\Model\DataResponse';
        $request = $this->queryHistoricTaskInstanceRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()->getBody()->getContents()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\DataResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation queryHistoricTaskInstanceAsync
     *
     * Query for historic task instances
     *
     * @param  \Swagger\Client\Model\HistoricTaskInstanceQueryRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function queryHistoricTaskInstanceAsync($body = null)
    {
        return $this->queryHistoricTaskInstanceAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation queryHistoricTaskInstanceAsyncWithHttpInfo
     *
     * Query for historic task instances
     *
     * @param  \Swagger\Client\Model\HistoricTaskInstanceQueryRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function queryHistoricTaskInstanceAsyncWithHttpInfo($body = null)
    {
        $returnType = '\Swagger\Client\Model\DataResponse';
        $request = $this->queryHistoricTaskInstanceRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'queryHistoricTaskInstance'
     *
     * @param  \Swagger\Client\Model\HistoricTaskInstanceQueryRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function queryHistoricTaskInstanceRequest($body = null)
    {

        $resourcePath = '/query/historic-task-instances';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation queryVariableInstances
     *
     * Query for historic variable instances
     *
     * @param  \Swagger\Client\Model\HistoricVariableInstanceQueryRequest $body body (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\DataResponse
     */
    public function queryVariableInstances($body = null)
    {
        list($response) = $this->queryVariableInstancesWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation queryVariableInstancesWithHttpInfo
     *
     * Query for historic variable instances
     *
     * @param  \Swagger\Client\Model\HistoricVariableInstanceQueryRequest $body (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\DataResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function queryVariableInstancesWithHttpInfo($body = null)
    {
        $returnType = '\Swagger\Client\Model\DataResponse';
        $request = $this->queryVariableInstancesRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()->getBody()->getContents()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\DataResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation queryVariableInstancesAsync
     *
     * Query for historic variable instances
     *
     * @param  \Swagger\Client\Model\HistoricVariableInstanceQueryRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function queryVariableInstancesAsync($body = null)
    {
        return $this->queryVariableInstancesAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation queryVariableInstancesAsyncWithHttpInfo
     *
     * Query for historic variable instances
     *
     * @param  \Swagger\Client\Model\HistoricVariableInstanceQueryRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function queryVariableInstancesAsyncWithHttpInfo($body = null)
    {
        $returnType = '\Swagger\Client\Model\DataResponse';
        $request = $this->queryVariableInstancesRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'queryVariableInstances'
     *
     * @param  \Swagger\Client\Model\HistoricVariableInstanceQueryRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function queryVariableInstancesRequest($body = null)
    {

        $resourcePath = '/query/historic-variable-instances';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
