<?php
/**
 * ProcessInstancesApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * sWIm Activiti REST API
 *
 * here be dragons
 *
 * OpenAPI spec version: v0.2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * ProcessInstancesApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ProcessInstancesApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation createOrUpdateProcessVariable
     *
     * Update a single or binary variable or multiple variables on a process instance
     *
     * @param  string $process_instance_id The id of the process instance to create the new variable for. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function createOrUpdateProcessVariable($process_instance_id)
    {
        list($response) = $this->createOrUpdateProcessVariableWithHttpInfo($process_instance_id);
        return $response;
    }

    /**
     * Operation createOrUpdateProcessVariableWithHttpInfo
     *
     * Update a single or binary variable or multiple variables on a process instance
     *
     * @param  string $process_instance_id The id of the process instance to create the new variable for. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function createOrUpdateProcessVariableWithHttpInfo($process_instance_id)
    {
        $returnType = 'object';
        $request = $this->createOrUpdateProcessVariableRequest($process_instance_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()->getBody()->getContents()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createOrUpdateProcessVariableAsync
     *
     * Update a single or binary variable or multiple variables on a process instance
     *
     * @param  string $process_instance_id The id of the process instance to create the new variable for. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createOrUpdateProcessVariableAsync($process_instance_id)
    {
        return $this->createOrUpdateProcessVariableAsyncWithHttpInfo($process_instance_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createOrUpdateProcessVariableAsyncWithHttpInfo
     *
     * Update a single or binary variable or multiple variables on a process instance
     *
     * @param  string $process_instance_id The id of the process instance to create the new variable for. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createOrUpdateProcessVariableAsyncWithHttpInfo($process_instance_id)
    {
        $returnType = 'object';
        $request = $this->createOrUpdateProcessVariableRequest($process_instance_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createOrUpdateProcessVariable'
     *
     * @param  string $process_instance_id The id of the process instance to create the new variable for. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createOrUpdateProcessVariableRequest($process_instance_id)
    {
        // verify the required parameter 'process_instance_id' is set
        if ($process_instance_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $process_instance_id when calling createOrUpdateProcessVariable'
            );
        }

        $resourcePath = '/runtime/process-instances/{processInstanceId}/variables';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($process_instance_id !== null) {
            $resourcePath = str_replace(
                '{' . 'processInstanceId' . '}',
                ObjectSerializer::toPathValue($process_instance_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createProcessInstance
     *
     * Start a process instance
     *
     * @param  \Swagger\Client\Model\ProcessInstanceCreateRequest $body body (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ProcessInstanceResponse
     */
    public function createProcessInstance($body = null)
    {
        list($response) = $this->createProcessInstanceWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation createProcessInstanceWithHttpInfo
     *
     * Start a process instance
     *
     * @param  \Swagger\Client\Model\ProcessInstanceCreateRequest $body (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ProcessInstanceResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createProcessInstanceWithHttpInfo($body = null)
    {
        $returnType = '\Swagger\Client\Model\ProcessInstanceResponse';
        $request = $this->createProcessInstanceRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()->getBody()->getContents()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ProcessInstanceResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createProcessInstanceAsync
     *
     * Start a process instance
     *
     * @param  \Swagger\Client\Model\ProcessInstanceCreateRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createProcessInstanceAsync($body = null)
    {
        return $this->createProcessInstanceAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createProcessInstanceAsyncWithHttpInfo
     *
     * Start a process instance
     *
     * @param  \Swagger\Client\Model\ProcessInstanceCreateRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createProcessInstanceAsyncWithHttpInfo($body = null)
    {
        $returnType = '\Swagger\Client\Model\ProcessInstanceResponse';
        $request = $this->createProcessInstanceRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createProcessInstance'
     *
     * @param  \Swagger\Client\Model\ProcessInstanceCreateRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createProcessInstanceRequest($body = null)
    {

        $resourcePath = '/runtime/process-instances';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createProcessInstanceIdentityLinks
     *
     * Add an involved user to a process instance
     *
     * @param  string $process_instance_id The id of the process instance to the links for. (required)
     * @param  \Swagger\Client\Model\RestIdentityLink $body body (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\RestIdentityLink
     */
    public function createProcessInstanceIdentityLinks($process_instance_id, $body = null)
    {
        list($response) = $this->createProcessInstanceIdentityLinksWithHttpInfo($process_instance_id, $body);
        return $response;
    }

    /**
     * Operation createProcessInstanceIdentityLinksWithHttpInfo
     *
     * Add an involved user to a process instance
     *
     * @param  string $process_instance_id The id of the process instance to the links for. (required)
     * @param  \Swagger\Client\Model\RestIdentityLink $body (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\RestIdentityLink, HTTP status code, HTTP response headers (array of strings)
     */
    public function createProcessInstanceIdentityLinksWithHttpInfo($process_instance_id, $body = null)
    {
        $returnType = '\Swagger\Client\Model\RestIdentityLink';
        $request = $this->createProcessInstanceIdentityLinksRequest($process_instance_id, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()->getBody()->getContents()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\RestIdentityLink',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createProcessInstanceIdentityLinksAsync
     *
     * Add an involved user to a process instance
     *
     * @param  string $process_instance_id The id of the process instance to the links for. (required)
     * @param  \Swagger\Client\Model\RestIdentityLink $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createProcessInstanceIdentityLinksAsync($process_instance_id, $body = null)
    {
        return $this->createProcessInstanceIdentityLinksAsyncWithHttpInfo($process_instance_id, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createProcessInstanceIdentityLinksAsyncWithHttpInfo
     *
     * Add an involved user to a process instance
     *
     * @param  string $process_instance_id The id of the process instance to the links for. (required)
     * @param  \Swagger\Client\Model\RestIdentityLink $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createProcessInstanceIdentityLinksAsyncWithHttpInfo($process_instance_id, $body = null)
    {
        $returnType = '\Swagger\Client\Model\RestIdentityLink';
        $request = $this->createProcessInstanceIdentityLinksRequest($process_instance_id, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createProcessInstanceIdentityLinks'
     *
     * @param  string $process_instance_id The id of the process instance to the links for. (required)
     * @param  \Swagger\Client\Model\RestIdentityLink $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createProcessInstanceIdentityLinksRequest($process_instance_id, $body = null)
    {
        // verify the required parameter 'process_instance_id' is set
        if ($process_instance_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $process_instance_id when calling createProcessInstanceIdentityLinks'
            );
        }

        $resourcePath = '/runtime/process-instances/{processInstanceId}/identitylinks';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($process_instance_id !== null) {
            $resourcePath = str_replace(
                '{' . 'processInstanceId' . '}',
                ObjectSerializer::toPathValue($process_instance_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createProcessInstanceVariable
     *
     * Create variables or new binary variable on a process instance
     *
     * @param  string $process_instance_id The id of the process instance to create the new variable for (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function createProcessInstanceVariable($process_instance_id)
    {
        list($response) = $this->createProcessInstanceVariableWithHttpInfo($process_instance_id);
        return $response;
    }

    /**
     * Operation createProcessInstanceVariableWithHttpInfo
     *
     * Create variables or new binary variable on a process instance
     *
     * @param  string $process_instance_id The id of the process instance to create the new variable for (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function createProcessInstanceVariableWithHttpInfo($process_instance_id)
    {
        $returnType = 'object';
        $request = $this->createProcessInstanceVariableRequest($process_instance_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()->getBody()->getContents()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createProcessInstanceVariableAsync
     *
     * Create variables or new binary variable on a process instance
     *
     * @param  string $process_instance_id The id of the process instance to create the new variable for (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createProcessInstanceVariableAsync($process_instance_id)
    {
        return $this->createProcessInstanceVariableAsyncWithHttpInfo($process_instance_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createProcessInstanceVariableAsyncWithHttpInfo
     *
     * Create variables or new binary variable on a process instance
     *
     * @param  string $process_instance_id The id of the process instance to create the new variable for (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createProcessInstanceVariableAsyncWithHttpInfo($process_instance_id)
    {
        $returnType = 'object';
        $request = $this->createProcessInstanceVariableRequest($process_instance_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createProcessInstanceVariable'
     *
     * @param  string $process_instance_id The id of the process instance to create the new variable for (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createProcessInstanceVariableRequest($process_instance_id)
    {
        // verify the required parameter 'process_instance_id' is set
        if ($process_instance_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $process_instance_id when calling createProcessInstanceVariable'
            );
        }

        $resourcePath = '/runtime/process-instances/{processInstanceId}/variables';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($process_instance_id !== null) {
            $resourcePath = str_replace(
                '{' . 'processInstanceId' . '}',
                ObjectSerializer::toPathValue($process_instance_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteLocalProcessVariable
     *
     * Delete all variables
     *
     * @param  string $process_instance_id process_instance_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteLocalProcessVariable($process_instance_id)
    {
        $this->deleteLocalProcessVariableWithHttpInfo($process_instance_id);
    }

    /**
     * Operation deleteLocalProcessVariableWithHttpInfo
     *
     * Delete all variables
     *
     * @param  string $process_instance_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteLocalProcessVariableWithHttpInfo($process_instance_id)
    {
        $returnType = '';
        $request = $this->deleteLocalProcessVariableRequest($process_instance_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()->getBody()->getContents()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteLocalProcessVariableAsync
     *
     * Delete all variables
     *
     * @param  string $process_instance_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteLocalProcessVariableAsync($process_instance_id)
    {
        return $this->deleteLocalProcessVariableAsyncWithHttpInfo($process_instance_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteLocalProcessVariableAsyncWithHttpInfo
     *
     * Delete all variables
     *
     * @param  string $process_instance_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteLocalProcessVariableAsyncWithHttpInfo($process_instance_id)
    {
        $returnType = '';
        $request = $this->deleteLocalProcessVariableRequest($process_instance_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteLocalProcessVariable'
     *
     * @param  string $process_instance_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteLocalProcessVariableRequest($process_instance_id)
    {
        // verify the required parameter 'process_instance_id' is set
        if ($process_instance_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $process_instance_id when calling deleteLocalProcessVariable'
            );
        }

        $resourcePath = '/runtime/process-instances/{processInstanceId}/variables';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($process_instance_id !== null) {
            $resourcePath = str_replace(
                '{' . 'processInstanceId' . '}',
                ObjectSerializer::toPathValue($process_instance_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteProcessInstance
     *
     * Delete a process instance
     *
     * @param  string $process_instance_id The id of the process instance to delete. (required)
     * @param  string $delete_reason delete_reason (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteProcessInstance($process_instance_id, $delete_reason = null)
    {
        $this->deleteProcessInstanceWithHttpInfo($process_instance_id, $delete_reason);
    }

    /**
     * Operation deleteProcessInstanceWithHttpInfo
     *
     * Delete a process instance
     *
     * @param  string $process_instance_id The id of the process instance to delete. (required)
     * @param  string $delete_reason (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteProcessInstanceWithHttpInfo($process_instance_id, $delete_reason = null)
    {
        $returnType = '';
        $request = $this->deleteProcessInstanceRequest($process_instance_id, $delete_reason);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()->getBody()->getContents()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteProcessInstanceAsync
     *
     * Delete a process instance
     *
     * @param  string $process_instance_id The id of the process instance to delete. (required)
     * @param  string $delete_reason (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteProcessInstanceAsync($process_instance_id, $delete_reason = null)
    {
        return $this->deleteProcessInstanceAsyncWithHttpInfo($process_instance_id, $delete_reason)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteProcessInstanceAsyncWithHttpInfo
     *
     * Delete a process instance
     *
     * @param  string $process_instance_id The id of the process instance to delete. (required)
     * @param  string $delete_reason (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteProcessInstanceAsyncWithHttpInfo($process_instance_id, $delete_reason = null)
    {
        $returnType = '';
        $request = $this->deleteProcessInstanceRequest($process_instance_id, $delete_reason);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteProcessInstance'
     *
     * @param  string $process_instance_id The id of the process instance to delete. (required)
     * @param  string $delete_reason (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteProcessInstanceRequest($process_instance_id, $delete_reason = null)
    {
        // verify the required parameter 'process_instance_id' is set
        if ($process_instance_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $process_instance_id when calling deleteProcessInstance'
            );
        }

        $resourcePath = '/runtime/process-instances/{processInstanceId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($delete_reason !== null) {
            $queryParams['deleteReason'] = ObjectSerializer::toQueryValue($delete_reason);
        }

        // path params
        if ($process_instance_id !== null) {
            $resourcePath = str_replace(
                '{' . 'processInstanceId' . '}',
                ObjectSerializer::toPathValue($process_instance_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteProcessInstanceIdentityLinks
     *
     * Remove an involved user to from process instance
     *
     * @param  string $process_instance_id The id of the process instance. (required)
     * @param  string $identity_id The id of the user to delete link for. (required)
     * @param  string $type Type of link to delete. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteProcessInstanceIdentityLinks($process_instance_id, $identity_id, $type)
    {
        $this->deleteProcessInstanceIdentityLinksWithHttpInfo($process_instance_id, $identity_id, $type);
    }

    /**
     * Operation deleteProcessInstanceIdentityLinksWithHttpInfo
     *
     * Remove an involved user to from process instance
     *
     * @param  string $process_instance_id The id of the process instance. (required)
     * @param  string $identity_id The id of the user to delete link for. (required)
     * @param  string $type Type of link to delete. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteProcessInstanceIdentityLinksWithHttpInfo($process_instance_id, $identity_id, $type)
    {
        $returnType = '';
        $request = $this->deleteProcessInstanceIdentityLinksRequest($process_instance_id, $identity_id, $type);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()->getBody()->getContents()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteProcessInstanceIdentityLinksAsync
     *
     * Remove an involved user to from process instance
     *
     * @param  string $process_instance_id The id of the process instance. (required)
     * @param  string $identity_id The id of the user to delete link for. (required)
     * @param  string $type Type of link to delete. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteProcessInstanceIdentityLinksAsync($process_instance_id, $identity_id, $type)
    {
        return $this->deleteProcessInstanceIdentityLinksAsyncWithHttpInfo($process_instance_id, $identity_id, $type)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteProcessInstanceIdentityLinksAsyncWithHttpInfo
     *
     * Remove an involved user to from process instance
     *
     * @param  string $process_instance_id The id of the process instance. (required)
     * @param  string $identity_id The id of the user to delete link for. (required)
     * @param  string $type Type of link to delete. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteProcessInstanceIdentityLinksAsyncWithHttpInfo($process_instance_id, $identity_id, $type)
    {
        $returnType = '';
        $request = $this->deleteProcessInstanceIdentityLinksRequest($process_instance_id, $identity_id, $type);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteProcessInstanceIdentityLinks'
     *
     * @param  string $process_instance_id The id of the process instance. (required)
     * @param  string $identity_id The id of the user to delete link for. (required)
     * @param  string $type Type of link to delete. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteProcessInstanceIdentityLinksRequest($process_instance_id, $identity_id, $type)
    {
        // verify the required parameter 'process_instance_id' is set
        if ($process_instance_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $process_instance_id when calling deleteProcessInstanceIdentityLinks'
            );
        }
        // verify the required parameter 'identity_id' is set
        if ($identity_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $identity_id when calling deleteProcessInstanceIdentityLinks'
            );
        }
        // verify the required parameter 'type' is set
        if ($type === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $type when calling deleteProcessInstanceIdentityLinks'
            );
        }

        $resourcePath = '/runtime/process-instances/{processInstanceId}/identitylinks/users/{identityId}/{type}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($process_instance_id !== null) {
            $resourcePath = str_replace(
                '{' . 'processInstanceId' . '}',
                ObjectSerializer::toPathValue($process_instance_id),
                $resourcePath
            );
        }
        // path params
        if ($identity_id !== null) {
            $resourcePath = str_replace(
                '{' . 'identityId' . '}',
                ObjectSerializer::toPathValue($identity_id),
                $resourcePath
            );
        }
        // path params
        if ($type !== null) {
            $resourcePath = str_replace(
                '{' . 'type' . '}',
                ObjectSerializer::toPathValue($type),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteProcessInstanceVariable
     *
     * Delete a variable
     *
     * @param  string $process_instance_id process_instance_id (required)
     * @param  string $variable_name variable_name (required)
     * @param  string $scope scope (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteProcessInstanceVariable($process_instance_id, $variable_name, $scope = null)
    {
        $this->deleteProcessInstanceVariableWithHttpInfo($process_instance_id, $variable_name, $scope);
    }

    /**
     * Operation deleteProcessInstanceVariableWithHttpInfo
     *
     * Delete a variable
     *
     * @param  string $process_instance_id (required)
     * @param  string $variable_name (required)
     * @param  string $scope (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteProcessInstanceVariableWithHttpInfo($process_instance_id, $variable_name, $scope = null)
    {
        $returnType = '';
        $request = $this->deleteProcessInstanceVariableRequest($process_instance_id, $variable_name, $scope);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()->getBody()->getContents()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteProcessInstanceVariableAsync
     *
     * Delete a variable
     *
     * @param  string $process_instance_id (required)
     * @param  string $variable_name (required)
     * @param  string $scope (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteProcessInstanceVariableAsync($process_instance_id, $variable_name, $scope = null)
    {
        return $this->deleteProcessInstanceVariableAsyncWithHttpInfo($process_instance_id, $variable_name, $scope)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteProcessInstanceVariableAsyncWithHttpInfo
     *
     * Delete a variable
     *
     * @param  string $process_instance_id (required)
     * @param  string $variable_name (required)
     * @param  string $scope (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteProcessInstanceVariableAsyncWithHttpInfo($process_instance_id, $variable_name, $scope = null)
    {
        $returnType = '';
        $request = $this->deleteProcessInstanceVariableRequest($process_instance_id, $variable_name, $scope);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteProcessInstanceVariable'
     *
     * @param  string $process_instance_id (required)
     * @param  string $variable_name (required)
     * @param  string $scope (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteProcessInstanceVariableRequest($process_instance_id, $variable_name, $scope = null)
    {
        // verify the required parameter 'process_instance_id' is set
        if ($process_instance_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $process_instance_id when calling deleteProcessInstanceVariable'
            );
        }
        // verify the required parameter 'variable_name' is set
        if ($variable_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $variable_name when calling deleteProcessInstanceVariable'
            );
        }

        $resourcePath = '/runtime/process-instances/{processInstanceId}/variables/{variableName}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($scope !== null) {
            $queryParams['scope'] = ObjectSerializer::toQueryValue($scope);
        }

        // path params
        if ($process_instance_id !== null) {
            $resourcePath = str_replace(
                '{' . 'processInstanceId' . '}',
                ObjectSerializer::toPathValue($process_instance_id),
                $resourcePath
            );
        }
        // path params
        if ($variable_name !== null) {
            $resourcePath = str_replace(
                '{' . 'variableName' . '}',
                ObjectSerializer::toPathValue($variable_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getProcessInstance
     *
     * Get a process instance
     *
     * @param  string $process_instance_id The id of the process instance to get. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ProcessInstanceResponse
     */
    public function getProcessInstance($process_instance_id)
    {
        list($response) = $this->getProcessInstanceWithHttpInfo($process_instance_id);
        return $response;
    }

    /**
     * Operation getProcessInstanceWithHttpInfo
     *
     * Get a process instance
     *
     * @param  string $process_instance_id The id of the process instance to get. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ProcessInstanceResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getProcessInstanceWithHttpInfo($process_instance_id)
    {
        $returnType = '\Swagger\Client\Model\ProcessInstanceResponse';
        $request = $this->getProcessInstanceRequest($process_instance_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()->getBody()->getContents()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ProcessInstanceResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getProcessInstanceAsync
     *
     * Get a process instance
     *
     * @param  string $process_instance_id The id of the process instance to get. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProcessInstanceAsync($process_instance_id)
    {
        return $this->getProcessInstanceAsyncWithHttpInfo($process_instance_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getProcessInstanceAsyncWithHttpInfo
     *
     * Get a process instance
     *
     * @param  string $process_instance_id The id of the process instance to get. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProcessInstanceAsyncWithHttpInfo($process_instance_id)
    {
        $returnType = '\Swagger\Client\Model\ProcessInstanceResponse';
        $request = $this->getProcessInstanceRequest($process_instance_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getProcessInstance'
     *
     * @param  string $process_instance_id The id of the process instance to get. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getProcessInstanceRequest($process_instance_id)
    {
        // verify the required parameter 'process_instance_id' is set
        if ($process_instance_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $process_instance_id when calling getProcessInstance'
            );
        }

        $resourcePath = '/runtime/process-instances/{processInstanceId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($process_instance_id !== null) {
            $resourcePath = str_replace(
                '{' . 'processInstanceId' . '}',
                ObjectSerializer::toPathValue($process_instance_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getProcessInstanceDiagram
     *
     * Get diagram for a process instance
     *
     * @param  string $process_instance_id The id of the process instance to get the diagram for. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string[]
     */
    public function getProcessInstanceDiagram($process_instance_id)
    {
        list($response) = $this->getProcessInstanceDiagramWithHttpInfo($process_instance_id);
        return $response;
    }

    /**
     * Operation getProcessInstanceDiagramWithHttpInfo
     *
     * Get diagram for a process instance
     *
     * @param  string $process_instance_id The id of the process instance to get the diagram for. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getProcessInstanceDiagramWithHttpInfo($process_instance_id)
    {
        $returnType = 'string[]';
        $request = $this->getProcessInstanceDiagramRequest($process_instance_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()->getBody()->getContents()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getProcessInstanceDiagramAsync
     *
     * Get diagram for a process instance
     *
     * @param  string $process_instance_id The id of the process instance to get the diagram for. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProcessInstanceDiagramAsync($process_instance_id)
    {
        return $this->getProcessInstanceDiagramAsyncWithHttpInfo($process_instance_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getProcessInstanceDiagramAsyncWithHttpInfo
     *
     * Get diagram for a process instance
     *
     * @param  string $process_instance_id The id of the process instance to get the diagram for. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProcessInstanceDiagramAsyncWithHttpInfo($process_instance_id)
    {
        $returnType = 'string[]';
        $request = $this->getProcessInstanceDiagramRequest($process_instance_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getProcessInstanceDiagram'
     *
     * @param  string $process_instance_id The id of the process instance to get the diagram for. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getProcessInstanceDiagramRequest($process_instance_id)
    {
        // verify the required parameter 'process_instance_id' is set
        if ($process_instance_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $process_instance_id when calling getProcessInstanceDiagram'
            );
        }

        $resourcePath = '/runtime/process-instances/{processInstanceId}/diagram';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($process_instance_id !== null) {
            $resourcePath = str_replace(
                '{' . 'processInstanceId' . '}',
                ObjectSerializer::toPathValue($process_instance_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getProcessInstanceIdentityLinks
     *
     * Get a specific involved people from process instance
     *
     * @param  string $process_instance_id The id of the process instance to get. (required)
     * @param  string $identity_id identity_id (required)
     * @param  string $type type (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\RestIdentityLink
     */
    public function getProcessInstanceIdentityLinks($process_instance_id, $identity_id, $type)
    {
        list($response) = $this->getProcessInstanceIdentityLinksWithHttpInfo($process_instance_id, $identity_id, $type);
        return $response;
    }

    /**
     * Operation getProcessInstanceIdentityLinksWithHttpInfo
     *
     * Get a specific involved people from process instance
     *
     * @param  string $process_instance_id The id of the process instance to get. (required)
     * @param  string $identity_id (required)
     * @param  string $type (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\RestIdentityLink, HTTP status code, HTTP response headers (array of strings)
     */
    public function getProcessInstanceIdentityLinksWithHttpInfo($process_instance_id, $identity_id, $type)
    {
        $returnType = '\Swagger\Client\Model\RestIdentityLink';
        $request = $this->getProcessInstanceIdentityLinksRequest($process_instance_id, $identity_id, $type);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()->getBody()->getContents()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\RestIdentityLink',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getProcessInstanceIdentityLinksAsync
     *
     * Get a specific involved people from process instance
     *
     * @param  string $process_instance_id The id of the process instance to get. (required)
     * @param  string $identity_id (required)
     * @param  string $type (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProcessInstanceIdentityLinksAsync($process_instance_id, $identity_id, $type)
    {
        return $this->getProcessInstanceIdentityLinksAsyncWithHttpInfo($process_instance_id, $identity_id, $type)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getProcessInstanceIdentityLinksAsyncWithHttpInfo
     *
     * Get a specific involved people from process instance
     *
     * @param  string $process_instance_id The id of the process instance to get. (required)
     * @param  string $identity_id (required)
     * @param  string $type (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProcessInstanceIdentityLinksAsyncWithHttpInfo($process_instance_id, $identity_id, $type)
    {
        $returnType = '\Swagger\Client\Model\RestIdentityLink';
        $request = $this->getProcessInstanceIdentityLinksRequest($process_instance_id, $identity_id, $type);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getProcessInstanceIdentityLinks'
     *
     * @param  string $process_instance_id The id of the process instance to get. (required)
     * @param  string $identity_id (required)
     * @param  string $type (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getProcessInstanceIdentityLinksRequest($process_instance_id, $identity_id, $type)
    {
        // verify the required parameter 'process_instance_id' is set
        if ($process_instance_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $process_instance_id when calling getProcessInstanceIdentityLinks'
            );
        }
        // verify the required parameter 'identity_id' is set
        if ($identity_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $identity_id when calling getProcessInstanceIdentityLinks'
            );
        }
        // verify the required parameter 'type' is set
        if ($type === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $type when calling getProcessInstanceIdentityLinks'
            );
        }

        $resourcePath = '/runtime/process-instances/{processInstanceId}/identitylinks/users/{identityId}/{type}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($process_instance_id !== null) {
            $resourcePath = str_replace(
                '{' . 'processInstanceId' . '}',
                ObjectSerializer::toPathValue($process_instance_id),
                $resourcePath
            );
        }
        // path params
        if ($identity_id !== null) {
            $resourcePath = str_replace(
                '{' . 'identityId' . '}',
                ObjectSerializer::toPathValue($identity_id),
                $resourcePath
            );
        }
        // path params
        if ($type !== null) {
            $resourcePath = str_replace(
                '{' . 'type' . '}',
                ObjectSerializer::toPathValue($type),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getProcessInstanceVariable
     *
     * Get a variable for a process instance
     *
     * @param  string $process_instance_id The id of the process instance to the variables for. (required)
     * @param  string $variable_name Name of the variable to get. (required)
     * @param  string $scope scope (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\RestVariable
     */
    public function getProcessInstanceVariable($process_instance_id, $variable_name, $scope = null)
    {
        list($response) = $this->getProcessInstanceVariableWithHttpInfo($process_instance_id, $variable_name, $scope);
        return $response;
    }

    /**
     * Operation getProcessInstanceVariableWithHttpInfo
     *
     * Get a variable for a process instance
     *
     * @param  string $process_instance_id The id of the process instance to the variables for. (required)
     * @param  string $variable_name Name of the variable to get. (required)
     * @param  string $scope (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\RestVariable, HTTP status code, HTTP response headers (array of strings)
     */
    public function getProcessInstanceVariableWithHttpInfo($process_instance_id, $variable_name, $scope = null)
    {
        $returnType = '\Swagger\Client\Model\RestVariable';
        $request = $this->getProcessInstanceVariableRequest($process_instance_id, $variable_name, $scope);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()->getBody()->getContents()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\RestVariable',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getProcessInstanceVariableAsync
     *
     * Get a variable for a process instance
     *
     * @param  string $process_instance_id The id of the process instance to the variables for. (required)
     * @param  string $variable_name Name of the variable to get. (required)
     * @param  string $scope (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProcessInstanceVariableAsync($process_instance_id, $variable_name, $scope = null)
    {
        return $this->getProcessInstanceVariableAsyncWithHttpInfo($process_instance_id, $variable_name, $scope)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getProcessInstanceVariableAsyncWithHttpInfo
     *
     * Get a variable for a process instance
     *
     * @param  string $process_instance_id The id of the process instance to the variables for. (required)
     * @param  string $variable_name Name of the variable to get. (required)
     * @param  string $scope (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProcessInstanceVariableAsyncWithHttpInfo($process_instance_id, $variable_name, $scope = null)
    {
        $returnType = '\Swagger\Client\Model\RestVariable';
        $request = $this->getProcessInstanceVariableRequest($process_instance_id, $variable_name, $scope);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getProcessInstanceVariable'
     *
     * @param  string $process_instance_id The id of the process instance to the variables for. (required)
     * @param  string $variable_name Name of the variable to get. (required)
     * @param  string $scope (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getProcessInstanceVariableRequest($process_instance_id, $variable_name, $scope = null)
    {
        // verify the required parameter 'process_instance_id' is set
        if ($process_instance_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $process_instance_id when calling getProcessInstanceVariable'
            );
        }
        // verify the required parameter 'variable_name' is set
        if ($variable_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $variable_name when calling getProcessInstanceVariable'
            );
        }

        $resourcePath = '/runtime/process-instances/{processInstanceId}/variables/{variableName}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($scope !== null) {
            $queryParams['scope'] = ObjectSerializer::toQueryValue($scope);
        }

        // path params
        if ($process_instance_id !== null) {
            $resourcePath = str_replace(
                '{' . 'processInstanceId' . '}',
                ObjectSerializer::toPathValue($process_instance_id),
                $resourcePath
            );
        }
        // path params
        if ($variable_name !== null) {
            $resourcePath = str_replace(
                '{' . 'variableName' . '}',
                ObjectSerializer::toPathValue($variable_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getProcessInstanceVariableData
     *
     * Get the binary data for a variable
     *
     * @param  string $process_instance_id process_instance_id (required)
     * @param  string $variable_name variable_name (required)
     * @param  string $scope scope (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string[]
     */
    public function getProcessInstanceVariableData($process_instance_id, $variable_name, $scope = null)
    {
        list($response) = $this->getProcessInstanceVariableDataWithHttpInfo($process_instance_id, $variable_name, $scope);
        return $response;
    }

    /**
     * Operation getProcessInstanceVariableDataWithHttpInfo
     *
     * Get the binary data for a variable
     *
     * @param  string $process_instance_id (required)
     * @param  string $variable_name (required)
     * @param  string $scope (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getProcessInstanceVariableDataWithHttpInfo($process_instance_id, $variable_name, $scope = null)
    {
        $returnType = 'string[]';
        $request = $this->getProcessInstanceVariableDataRequest($process_instance_id, $variable_name, $scope);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()->getBody()->getContents()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getProcessInstanceVariableDataAsync
     *
     * Get the binary data for a variable
     *
     * @param  string $process_instance_id (required)
     * @param  string $variable_name (required)
     * @param  string $scope (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProcessInstanceVariableDataAsync($process_instance_id, $variable_name, $scope = null)
    {
        return $this->getProcessInstanceVariableDataAsyncWithHttpInfo($process_instance_id, $variable_name, $scope)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getProcessInstanceVariableDataAsyncWithHttpInfo
     *
     * Get the binary data for a variable
     *
     * @param  string $process_instance_id (required)
     * @param  string $variable_name (required)
     * @param  string $scope (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProcessInstanceVariableDataAsyncWithHttpInfo($process_instance_id, $variable_name, $scope = null)
    {
        $returnType = 'string[]';
        $request = $this->getProcessInstanceVariableDataRequest($process_instance_id, $variable_name, $scope);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getProcessInstanceVariableData'
     *
     * @param  string $process_instance_id (required)
     * @param  string $variable_name (required)
     * @param  string $scope (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getProcessInstanceVariableDataRequest($process_instance_id, $variable_name, $scope = null)
    {
        // verify the required parameter 'process_instance_id' is set
        if ($process_instance_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $process_instance_id when calling getProcessInstanceVariableData'
            );
        }
        // verify the required parameter 'variable_name' is set
        if ($variable_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $variable_name when calling getProcessInstanceVariableData'
            );
        }

        $resourcePath = '/runtime/process-instances/{processInstanceId}/variables/{variableName}/data';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($scope !== null) {
            $queryParams['scope'] = ObjectSerializer::toQueryValue($scope);
        }

        // path params
        if ($process_instance_id !== null) {
            $resourcePath = str_replace(
                '{' . 'processInstanceId' . '}',
                ObjectSerializer::toPathValue($process_instance_id),
                $resourcePath
            );
        }
        // path params
        if ($variable_name !== null) {
            $resourcePath = str_replace(
                '{' . 'variableName' . '}',
                ObjectSerializer::toPathValue($variable_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getProcessInstances
     *
     * List of process instances
     *
     * @param  string $id Only return models with the given version. (optional)
     * @param  string $process_definition_key Only return process instances with the given process definition key. (optional)
     * @param  string $process_definition_id Only return process instances with the given process definition id. (optional)
     * @param  string $business_key Only return process instances with the given businessKey. (optional)
     * @param  string $involved_user Only return process instances in which the given user is involved. (optional)
     * @param  bool $suspended If true, only return process instance which are suspended. If false, only return process instances which are not suspended (active). (optional)
     * @param  string $super_process_instance_id Only return process instances which have the given super process-instance id (for processes that have a call-activities). (optional)
     * @param  string $sub_process_instance_id Only return process instances which have the given sub process-instance id (for processes started as a call-activity). (optional)
     * @param  bool $exclude_subprocesses Return only process instances which aren�t sub processes. (optional)
     * @param  bool $include_process_variables Indication to include process variables in the result. (optional)
     * @param  string $tenant_id Only return process instances with the given tenantId. (optional)
     * @param  string $tenant_id_like Only return process instances with a tenantId like the given value. (optional)
     * @param  bool $without_tenant_id If true, only returns process instances without a tenantId set. If false, the withoutTenantId parameter is ignored. (optional)
     * @param  string $sort Property to sort on, to be used together with the order. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\DataResponse
     */
    public function getProcessInstances($id = null, $process_definition_key = null, $process_definition_id = null, $business_key = null, $involved_user = null, $suspended = null, $super_process_instance_id = null, $sub_process_instance_id = null, $exclude_subprocesses = null, $include_process_variables = null, $tenant_id = null, $tenant_id_like = null, $without_tenant_id = null, $sort = null)
    {
        list($response) = $this->getProcessInstancesWithHttpInfo($id, $process_definition_key, $process_definition_id, $business_key, $involved_user, $suspended, $super_process_instance_id, $sub_process_instance_id, $exclude_subprocesses, $include_process_variables, $tenant_id, $tenant_id_like, $without_tenant_id, $sort);
        return $response;
    }

    /**
     * Operation getProcessInstancesWithHttpInfo
     *
     * List of process instances
     *
     * @param  string $id Only return models with the given version. (optional)
     * @param  string $process_definition_key Only return process instances with the given process definition key. (optional)
     * @param  string $process_definition_id Only return process instances with the given process definition id. (optional)
     * @param  string $business_key Only return process instances with the given businessKey. (optional)
     * @param  string $involved_user Only return process instances in which the given user is involved. (optional)
     * @param  bool $suspended If true, only return process instance which are suspended. If false, only return process instances which are not suspended (active). (optional)
     * @param  string $super_process_instance_id Only return process instances which have the given super process-instance id (for processes that have a call-activities). (optional)
     * @param  string $sub_process_instance_id Only return process instances which have the given sub process-instance id (for processes started as a call-activity). (optional)
     * @param  bool $exclude_subprocesses Return only process instances which aren�t sub processes. (optional)
     * @param  bool $include_process_variables Indication to include process variables in the result. (optional)
     * @param  string $tenant_id Only return process instances with the given tenantId. (optional)
     * @param  string $tenant_id_like Only return process instances with a tenantId like the given value. (optional)
     * @param  bool $without_tenant_id If true, only returns process instances without a tenantId set. If false, the withoutTenantId parameter is ignored. (optional)
     * @param  string $sort Property to sort on, to be used together with the order. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\DataResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getProcessInstancesWithHttpInfo($id = null, $process_definition_key = null, $process_definition_id = null, $business_key = null, $involved_user = null, $suspended = null, $super_process_instance_id = null, $sub_process_instance_id = null, $exclude_subprocesses = null, $include_process_variables = null, $tenant_id = null, $tenant_id_like = null, $without_tenant_id = null, $sort = null)
    {
        $returnType = '\Swagger\Client\Model\DataResponse';
        $request = $this->getProcessInstancesRequest($id, $process_definition_key, $process_definition_id, $business_key, $involved_user, $suspended, $super_process_instance_id, $sub_process_instance_id, $exclude_subprocesses, $include_process_variables, $tenant_id, $tenant_id_like, $without_tenant_id, $sort);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()->getBody()->getContents()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\DataResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getProcessInstancesAsync
     *
     * List of process instances
     *
     * @param  string $id Only return models with the given version. (optional)
     * @param  string $process_definition_key Only return process instances with the given process definition key. (optional)
     * @param  string $process_definition_id Only return process instances with the given process definition id. (optional)
     * @param  string $business_key Only return process instances with the given businessKey. (optional)
     * @param  string $involved_user Only return process instances in which the given user is involved. (optional)
     * @param  bool $suspended If true, only return process instance which are suspended. If false, only return process instances which are not suspended (active). (optional)
     * @param  string $super_process_instance_id Only return process instances which have the given super process-instance id (for processes that have a call-activities). (optional)
     * @param  string $sub_process_instance_id Only return process instances which have the given sub process-instance id (for processes started as a call-activity). (optional)
     * @param  bool $exclude_subprocesses Return only process instances which aren�t sub processes. (optional)
     * @param  bool $include_process_variables Indication to include process variables in the result. (optional)
     * @param  string $tenant_id Only return process instances with the given tenantId. (optional)
     * @param  string $tenant_id_like Only return process instances with a tenantId like the given value. (optional)
     * @param  bool $without_tenant_id If true, only returns process instances without a tenantId set. If false, the withoutTenantId parameter is ignored. (optional)
     * @param  string $sort Property to sort on, to be used together with the order. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProcessInstancesAsync($id = null, $process_definition_key = null, $process_definition_id = null, $business_key = null, $involved_user = null, $suspended = null, $super_process_instance_id = null, $sub_process_instance_id = null, $exclude_subprocesses = null, $include_process_variables = null, $tenant_id = null, $tenant_id_like = null, $without_tenant_id = null, $sort = null)
    {
        return $this->getProcessInstancesAsyncWithHttpInfo($id, $process_definition_key, $process_definition_id, $business_key, $involved_user, $suspended, $super_process_instance_id, $sub_process_instance_id, $exclude_subprocesses, $include_process_variables, $tenant_id, $tenant_id_like, $without_tenant_id, $sort)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getProcessInstancesAsyncWithHttpInfo
     *
     * List of process instances
     *
     * @param  string $id Only return models with the given version. (optional)
     * @param  string $process_definition_key Only return process instances with the given process definition key. (optional)
     * @param  string $process_definition_id Only return process instances with the given process definition id. (optional)
     * @param  string $business_key Only return process instances with the given businessKey. (optional)
     * @param  string $involved_user Only return process instances in which the given user is involved. (optional)
     * @param  bool $suspended If true, only return process instance which are suspended. If false, only return process instances which are not suspended (active). (optional)
     * @param  string $super_process_instance_id Only return process instances which have the given super process-instance id (for processes that have a call-activities). (optional)
     * @param  string $sub_process_instance_id Only return process instances which have the given sub process-instance id (for processes started as a call-activity). (optional)
     * @param  bool $exclude_subprocesses Return only process instances which aren�t sub processes. (optional)
     * @param  bool $include_process_variables Indication to include process variables in the result. (optional)
     * @param  string $tenant_id Only return process instances with the given tenantId. (optional)
     * @param  string $tenant_id_like Only return process instances with a tenantId like the given value. (optional)
     * @param  bool $without_tenant_id If true, only returns process instances without a tenantId set. If false, the withoutTenantId parameter is ignored. (optional)
     * @param  string $sort Property to sort on, to be used together with the order. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProcessInstancesAsyncWithHttpInfo($id = null, $process_definition_key = null, $process_definition_id = null, $business_key = null, $involved_user = null, $suspended = null, $super_process_instance_id = null, $sub_process_instance_id = null, $exclude_subprocesses = null, $include_process_variables = null, $tenant_id = null, $tenant_id_like = null, $without_tenant_id = null, $sort = null)
    {
        $returnType = '\Swagger\Client\Model\DataResponse';
        $request = $this->getProcessInstancesRequest($id, $process_definition_key, $process_definition_id, $business_key, $involved_user, $suspended, $super_process_instance_id, $sub_process_instance_id, $exclude_subprocesses, $include_process_variables, $tenant_id, $tenant_id_like, $without_tenant_id, $sort);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getProcessInstances'
     *
     * @param  string $id Only return models with the given version. (optional)
     * @param  string $process_definition_key Only return process instances with the given process definition key. (optional)
     * @param  string $process_definition_id Only return process instances with the given process definition id. (optional)
     * @param  string $business_key Only return process instances with the given businessKey. (optional)
     * @param  string $involved_user Only return process instances in which the given user is involved. (optional)
     * @param  bool $suspended If true, only return process instance which are suspended. If false, only return process instances which are not suspended (active). (optional)
     * @param  string $super_process_instance_id Only return process instances which have the given super process-instance id (for processes that have a call-activities). (optional)
     * @param  string $sub_process_instance_id Only return process instances which have the given sub process-instance id (for processes started as a call-activity). (optional)
     * @param  bool $exclude_subprocesses Return only process instances which aren�t sub processes. (optional)
     * @param  bool $include_process_variables Indication to include process variables in the result. (optional)
     * @param  string $tenant_id Only return process instances with the given tenantId. (optional)
     * @param  string $tenant_id_like Only return process instances with a tenantId like the given value. (optional)
     * @param  bool $without_tenant_id If true, only returns process instances without a tenantId set. If false, the withoutTenantId parameter is ignored. (optional)
     * @param  string $sort Property to sort on, to be used together with the order. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getProcessInstancesRequest($id = null, $process_definition_key = null, $process_definition_id = null, $business_key = null, $involved_user = null, $suspended = null, $super_process_instance_id = null, $sub_process_instance_id = null, $exclude_subprocesses = null, $include_process_variables = null, $tenant_id = null, $tenant_id_like = null, $without_tenant_id = null, $sort = null)
    {

        $resourcePath = '/runtime/process-instances';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($id !== null) {
            $queryParams['id'] = ObjectSerializer::toQueryValue($id);
        }
        // query params
        if ($process_definition_key !== null) {
            $queryParams['processDefinitionKey'] = ObjectSerializer::toQueryValue($process_definition_key);
        }
        // query params
        if ($process_definition_id !== null) {
            $queryParams['processDefinitionId'] = ObjectSerializer::toQueryValue($process_definition_id);
        }
        // query params
        if ($business_key !== null) {
            $queryParams['businessKey'] = ObjectSerializer::toQueryValue($business_key);
        }
        // query params
        if ($involved_user !== null) {
            $queryParams['involvedUser'] = ObjectSerializer::toQueryValue($involved_user);
        }
        // query params
        if ($suspended !== null) {
            $queryParams['suspended'] = ObjectSerializer::toQueryValue($suspended);
        }
        // query params
        if ($super_process_instance_id !== null) {
            $queryParams['superProcessInstanceId'] = ObjectSerializer::toQueryValue($super_process_instance_id);
        }
        // query params
        if ($sub_process_instance_id !== null) {
            $queryParams['subProcessInstanceId'] = ObjectSerializer::toQueryValue($sub_process_instance_id);
        }
        // query params
        if ($exclude_subprocesses !== null) {
            $queryParams['excludeSubprocesses'] = ObjectSerializer::toQueryValue($exclude_subprocesses);
        }
        // query params
        if ($include_process_variables !== null) {
            $queryParams['includeProcessVariables'] = ObjectSerializer::toQueryValue($include_process_variables);
        }
        // query params
        if ($tenant_id !== null) {
            $queryParams['tenantId'] = ObjectSerializer::toQueryValue($tenant_id);
        }
        // query params
        if ($tenant_id_like !== null) {
            $queryParams['tenantIdLike'] = ObjectSerializer::toQueryValue($tenant_id_like);
        }
        // query params
        if ($without_tenant_id !== null) {
            $queryParams['withoutTenantId'] = ObjectSerializer::toQueryValue($without_tenant_id);
        }
        // query params
        if ($sort !== null) {
            $queryParams['sort'] = ObjectSerializer::toQueryValue($sort);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getVariables
     *
     * List of variables for a process instance
     *
     * @param  string $process_instance_id The id of the process instance to the variables for. (required)
     * @param  string $scope scope (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\RestVariable[]
     */
    public function getVariables($process_instance_id, $scope = null)
    {
        list($response) = $this->getVariablesWithHttpInfo($process_instance_id, $scope);
        return $response;
    }

    /**
     * Operation getVariablesWithHttpInfo
     *
     * List of variables for a process instance
     *
     * @param  string $process_instance_id The id of the process instance to the variables for. (required)
     * @param  string $scope (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\RestVariable[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getVariablesWithHttpInfo($process_instance_id, $scope = null)
    {
        $returnType = '\Swagger\Client\Model\RestVariable[]';
        $request = $this->getVariablesRequest($process_instance_id, $scope);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()->getBody()->getContents()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\RestVariable[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getVariablesAsync
     *
     * List of variables for a process instance
     *
     * @param  string $process_instance_id The id of the process instance to the variables for. (required)
     * @param  string $scope (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getVariablesAsync($process_instance_id, $scope = null)
    {
        return $this->getVariablesAsyncWithHttpInfo($process_instance_id, $scope)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getVariablesAsyncWithHttpInfo
     *
     * List of variables for a process instance
     *
     * @param  string $process_instance_id The id of the process instance to the variables for. (required)
     * @param  string $scope (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getVariablesAsyncWithHttpInfo($process_instance_id, $scope = null)
    {
        $returnType = '\Swagger\Client\Model\RestVariable[]';
        $request = $this->getVariablesRequest($process_instance_id, $scope);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getVariables'
     *
     * @param  string $process_instance_id The id of the process instance to the variables for. (required)
     * @param  string $scope (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getVariablesRequest($process_instance_id, $scope = null)
    {
        // verify the required parameter 'process_instance_id' is set
        if ($process_instance_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $process_instance_id when calling getVariables'
            );
        }

        $resourcePath = '/runtime/process-instances/{processInstanceId}/variables';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($scope !== null) {
            $queryParams['scope'] = ObjectSerializer::toQueryValue($scope);
        }

        // path params
        if ($process_instance_id !== null) {
            $resourcePath = str_replace(
                '{' . 'processInstanceId' . '}',
                ObjectSerializer::toPathValue($process_instance_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listProcessInstanceIdentityLinks
     *
     * Get involved people for process instance
     *
     * @param  string $process_instance_id The id of the process instance to the links for. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\RestIdentityLink[]
     */
    public function listProcessInstanceIdentityLinks($process_instance_id)
    {
        list($response) = $this->listProcessInstanceIdentityLinksWithHttpInfo($process_instance_id);
        return $response;
    }

    /**
     * Operation listProcessInstanceIdentityLinksWithHttpInfo
     *
     * Get involved people for process instance
     *
     * @param  string $process_instance_id The id of the process instance to the links for. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\RestIdentityLink[], HTTP status code, HTTP response headers (array of strings)
     */
    public function listProcessInstanceIdentityLinksWithHttpInfo($process_instance_id)
    {
        $returnType = '\Swagger\Client\Model\RestIdentityLink[]';
        $request = $this->listProcessInstanceIdentityLinksRequest($process_instance_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()->getBody()->getContents()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\RestIdentityLink[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listProcessInstanceIdentityLinksAsync
     *
     * Get involved people for process instance
     *
     * @param  string $process_instance_id The id of the process instance to the links for. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listProcessInstanceIdentityLinksAsync($process_instance_id)
    {
        return $this->listProcessInstanceIdentityLinksAsyncWithHttpInfo($process_instance_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listProcessInstanceIdentityLinksAsyncWithHttpInfo
     *
     * Get involved people for process instance
     *
     * @param  string $process_instance_id The id of the process instance to the links for. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listProcessInstanceIdentityLinksAsyncWithHttpInfo($process_instance_id)
    {
        $returnType = '\Swagger\Client\Model\RestIdentityLink[]';
        $request = $this->listProcessInstanceIdentityLinksRequest($process_instance_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listProcessInstanceIdentityLinks'
     *
     * @param  string $process_instance_id The id of the process instance to the links for. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function listProcessInstanceIdentityLinksRequest($process_instance_id)
    {
        // verify the required parameter 'process_instance_id' is set
        if ($process_instance_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $process_instance_id when calling listProcessInstanceIdentityLinks'
            );
        }

        $resourcePath = '/runtime/process-instances/{processInstanceId}/identitylinks';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($process_instance_id !== null) {
            $resourcePath = str_replace(
                '{' . 'processInstanceId' . '}',
                ObjectSerializer::toPathValue($process_instance_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation performProcessInstanceAction
     *
     * Activate or suspend a process instance
     *
     * @param  string $process_instance_id The id of the process instance to activate/suspend. (required)
     * @param  \Swagger\Client\Model\ProcessInstanceActionRequest $body body (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ProcessInstanceResponse
     */
    public function performProcessInstanceAction($process_instance_id, $body = null)
    {
        list($response) = $this->performProcessInstanceActionWithHttpInfo($process_instance_id, $body);
        return $response;
    }

    /**
     * Operation performProcessInstanceActionWithHttpInfo
     *
     * Activate or suspend a process instance
     *
     * @param  string $process_instance_id The id of the process instance to activate/suspend. (required)
     * @param  \Swagger\Client\Model\ProcessInstanceActionRequest $body (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ProcessInstanceResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function performProcessInstanceActionWithHttpInfo($process_instance_id, $body = null)
    {
        $returnType = '\Swagger\Client\Model\ProcessInstanceResponse';
        $request = $this->performProcessInstanceActionRequest($process_instance_id, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()->getBody()->getContents()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ProcessInstanceResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation performProcessInstanceActionAsync
     *
     * Activate or suspend a process instance
     *
     * @param  string $process_instance_id The id of the process instance to activate/suspend. (required)
     * @param  \Swagger\Client\Model\ProcessInstanceActionRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function performProcessInstanceActionAsync($process_instance_id, $body = null)
    {
        return $this->performProcessInstanceActionAsyncWithHttpInfo($process_instance_id, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation performProcessInstanceActionAsyncWithHttpInfo
     *
     * Activate or suspend a process instance
     *
     * @param  string $process_instance_id The id of the process instance to activate/suspend. (required)
     * @param  \Swagger\Client\Model\ProcessInstanceActionRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function performProcessInstanceActionAsyncWithHttpInfo($process_instance_id, $body = null)
    {
        $returnType = '\Swagger\Client\Model\ProcessInstanceResponse';
        $request = $this->performProcessInstanceActionRequest($process_instance_id, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'performProcessInstanceAction'
     *
     * @param  string $process_instance_id The id of the process instance to activate/suspend. (required)
     * @param  \Swagger\Client\Model\ProcessInstanceActionRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function performProcessInstanceActionRequest($process_instance_id, $body = null)
    {
        // verify the required parameter 'process_instance_id' is set
        if ($process_instance_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $process_instance_id when calling performProcessInstanceAction'
            );
        }

        $resourcePath = '/runtime/process-instances/{processInstanceId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($process_instance_id !== null) {
            $resourcePath = str_replace(
                '{' . 'processInstanceId' . '}',
                ObjectSerializer::toPathValue($process_instance_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation queryProcessInstances
     *
     * Query process instances
     *
     * @param  \Swagger\Client\Model\ProcessInstanceQueryRequest $body body (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\DataResponse
     */
    public function queryProcessInstances($body = null)
    {
        list($response) = $this->queryProcessInstancesWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation queryProcessInstancesWithHttpInfo
     *
     * Query process instances
     *
     * @param  \Swagger\Client\Model\ProcessInstanceQueryRequest $body (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\DataResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function queryProcessInstancesWithHttpInfo($body = null)
    {
        $returnType = '\Swagger\Client\Model\DataResponse';
        $request = $this->queryProcessInstancesRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()->getBody()->getContents()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\DataResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation queryProcessInstancesAsync
     *
     * Query process instances
     *
     * @param  \Swagger\Client\Model\ProcessInstanceQueryRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function queryProcessInstancesAsync($body = null)
    {
        return $this->queryProcessInstancesAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation queryProcessInstancesAsyncWithHttpInfo
     *
     * Query process instances
     *
     * @param  \Swagger\Client\Model\ProcessInstanceQueryRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function queryProcessInstancesAsyncWithHttpInfo($body = null)
    {
        $returnType = '\Swagger\Client\Model\DataResponse';
        $request = $this->queryProcessInstancesRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'queryProcessInstances'
     *
     * @param  \Swagger\Client\Model\ProcessInstanceQueryRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function queryProcessInstancesRequest($body = null)
    {

        $resourcePath = '/query/process-instances';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateProcessInstanceVariable
     *
     * Update a single variable on a process instance
     *
     * @param  string $process_instance_id The id of the process instance to the variables for. (required)
     * @param  string $variable_name Name of the variable to get. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\RestVariable
     */
    public function updateProcessInstanceVariable($process_instance_id, $variable_name)
    {
        list($response) = $this->updateProcessInstanceVariableWithHttpInfo($process_instance_id, $variable_name);
        return $response;
    }

    /**
     * Operation updateProcessInstanceVariableWithHttpInfo
     *
     * Update a single variable on a process instance
     *
     * @param  string $process_instance_id The id of the process instance to the variables for. (required)
     * @param  string $variable_name Name of the variable to get. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\RestVariable, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateProcessInstanceVariableWithHttpInfo($process_instance_id, $variable_name)
    {
        $returnType = '\Swagger\Client\Model\RestVariable';
        $request = $this->updateProcessInstanceVariableRequest($process_instance_id, $variable_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()->getBody()->getContents()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\RestVariable',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateProcessInstanceVariableAsync
     *
     * Update a single variable on a process instance
     *
     * @param  string $process_instance_id The id of the process instance to the variables for. (required)
     * @param  string $variable_name Name of the variable to get. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateProcessInstanceVariableAsync($process_instance_id, $variable_name)
    {
        return $this->updateProcessInstanceVariableAsyncWithHttpInfo($process_instance_id, $variable_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateProcessInstanceVariableAsyncWithHttpInfo
     *
     * Update a single variable on a process instance
     *
     * @param  string $process_instance_id The id of the process instance to the variables for. (required)
     * @param  string $variable_name Name of the variable to get. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateProcessInstanceVariableAsyncWithHttpInfo($process_instance_id, $variable_name)
    {
        $returnType = '\Swagger\Client\Model\RestVariable';
        $request = $this->updateProcessInstanceVariableRequest($process_instance_id, $variable_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateProcessInstanceVariable'
     *
     * @param  string $process_instance_id The id of the process instance to the variables for. (required)
     * @param  string $variable_name Name of the variable to get. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateProcessInstanceVariableRequest($process_instance_id, $variable_name)
    {
        // verify the required parameter 'process_instance_id' is set
        if ($process_instance_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $process_instance_id when calling updateProcessInstanceVariable'
            );
        }
        // verify the required parameter 'variable_name' is set
        if ($variable_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $variable_name when calling updateProcessInstanceVariable'
            );
        }

        $resourcePath = '/runtime/process-instances/{processInstanceId}/variables/{variableName}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($process_instance_id !== null) {
            $resourcePath = str_replace(
                '{' . 'processInstanceId' . '}',
                ObjectSerializer::toPathValue($process_instance_id),
                $resourcePath
            );
        }
        // path params
        if ($variable_name !== null) {
            $resourcePath = str_replace(
                '{' . 'variableName' . '}',
                ObjectSerializer::toPathValue($variable_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
