<?php
/**
 * ProcessDefinitionsApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * sWIm Activiti REST API
 *
 * here be dragons
 *
 * OpenAPI spec version: v0.2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * ProcessDefinitionsApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ProcessDefinitionsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation createIdentityLink
     *
     * Add a candidate starter to a process definition
     *
     * @param  string $process_definition_id The id of the process definition. (required)
     * @param  \Swagger\Client\Model\RestIdentityLink $body body (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\RestIdentityLink
     */
    public function createIdentityLink($process_definition_id, $body = null)
    {
        list($response) = $this->createIdentityLinkWithHttpInfo($process_definition_id, $body);
        return $response;
    }

    /**
     * Operation createIdentityLinkWithHttpInfo
     *
     * Add a candidate starter to a process definition
     *
     * @param  string $process_definition_id The id of the process definition. (required)
     * @param  \Swagger\Client\Model\RestIdentityLink $body (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\RestIdentityLink, HTTP status code, HTTP response headers (array of strings)
     */
    public function createIdentityLinkWithHttpInfo($process_definition_id, $body = null)
    {
        $returnType = '\Swagger\Client\Model\RestIdentityLink';
        $request = $this->createIdentityLinkRequest($process_definition_id, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()->getBody()->getContents()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\RestIdentityLink',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createIdentityLinkAsync
     *
     * Add a candidate starter to a process definition
     *
     * @param  string $process_definition_id The id of the process definition. (required)
     * @param  \Swagger\Client\Model\RestIdentityLink $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createIdentityLinkAsync($process_definition_id, $body = null)
    {
        return $this->createIdentityLinkAsyncWithHttpInfo($process_definition_id, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createIdentityLinkAsyncWithHttpInfo
     *
     * Add a candidate starter to a process definition
     *
     * @param  string $process_definition_id The id of the process definition. (required)
     * @param  \Swagger\Client\Model\RestIdentityLink $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createIdentityLinkAsyncWithHttpInfo($process_definition_id, $body = null)
    {
        $returnType = '\Swagger\Client\Model\RestIdentityLink';
        $request = $this->createIdentityLinkRequest($process_definition_id, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createIdentityLink'
     *
     * @param  string $process_definition_id The id of the process definition. (required)
     * @param  \Swagger\Client\Model\RestIdentityLink $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createIdentityLinkRequest($process_definition_id, $body = null)
    {
        // verify the required parameter 'process_definition_id' is set
        if ($process_definition_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $process_definition_id when calling createIdentityLink'
            );
        }

        $resourcePath = '/repository/process-definitions/{processDefinitionId}/identitylinks';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($process_definition_id !== null) {
            $resourcePath = str_replace(
                '{' . 'processDefinitionId' . '}',
                ObjectSerializer::toPathValue($process_definition_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteIdentityLink
     *
     * Delete a candidate starter from a process definition
     *
     * @param  string $process_definition_id The id of the process definition. (required)
     * @param  string $family Either users or groups, depending on the type of identity link. (required)
     * @param  string $identity_id Either the user or group of the identity to remove as candidate starter. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteIdentityLink($process_definition_id, $family, $identity_id)
    {
        $this->deleteIdentityLinkWithHttpInfo($process_definition_id, $family, $identity_id);
    }

    /**
     * Operation deleteIdentityLinkWithHttpInfo
     *
     * Delete a candidate starter from a process definition
     *
     * @param  string $process_definition_id The id of the process definition. (required)
     * @param  string $family Either users or groups, depending on the type of identity link. (required)
     * @param  string $identity_id Either the user or group of the identity to remove as candidate starter. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteIdentityLinkWithHttpInfo($process_definition_id, $family, $identity_id)
    {
        $returnType = '';
        $request = $this->deleteIdentityLinkRequest($process_definition_id, $family, $identity_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()->getBody()->getContents()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteIdentityLinkAsync
     *
     * Delete a candidate starter from a process definition
     *
     * @param  string $process_definition_id The id of the process definition. (required)
     * @param  string $family Either users or groups, depending on the type of identity link. (required)
     * @param  string $identity_id Either the user or group of the identity to remove as candidate starter. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteIdentityLinkAsync($process_definition_id, $family, $identity_id)
    {
        return $this->deleteIdentityLinkAsyncWithHttpInfo($process_definition_id, $family, $identity_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteIdentityLinkAsyncWithHttpInfo
     *
     * Delete a candidate starter from a process definition
     *
     * @param  string $process_definition_id The id of the process definition. (required)
     * @param  string $family Either users or groups, depending on the type of identity link. (required)
     * @param  string $identity_id Either the user or group of the identity to remove as candidate starter. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteIdentityLinkAsyncWithHttpInfo($process_definition_id, $family, $identity_id)
    {
        $returnType = '';
        $request = $this->deleteIdentityLinkRequest($process_definition_id, $family, $identity_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteIdentityLink'
     *
     * @param  string $process_definition_id The id of the process definition. (required)
     * @param  string $family Either users or groups, depending on the type of identity link. (required)
     * @param  string $identity_id Either the user or group of the identity to remove as candidate starter. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteIdentityLinkRequest($process_definition_id, $family, $identity_id)
    {
        // verify the required parameter 'process_definition_id' is set
        if ($process_definition_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $process_definition_id when calling deleteIdentityLink'
            );
        }
        // verify the required parameter 'family' is set
        if ($family === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $family when calling deleteIdentityLink'
            );
        }
        // verify the required parameter 'identity_id' is set
        if ($identity_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $identity_id when calling deleteIdentityLink'
            );
        }

        $resourcePath = '/repository/process-definitions/{processDefinitionId}/identitylinks/{family}/{identityId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($process_definition_id !== null) {
            $resourcePath = str_replace(
                '{' . 'processDefinitionId' . '}',
                ObjectSerializer::toPathValue($process_definition_id),
                $resourcePath
            );
        }
        // path params
        if ($family !== null) {
            $resourcePath = str_replace(
                '{' . 'family' . '}',
                ObjectSerializer::toPathValue($family),
                $resourcePath
            );
        }
        // path params
        if ($identity_id !== null) {
            $resourcePath = str_replace(
                '{' . 'identityId' . '}',
                ObjectSerializer::toPathValue($identity_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation executeProcessDefinitionAction
     *
     * Execute actions for a process definition (Update category, Suspend or Activate)
     *
     * @param  string $process_definition_id process_definition_id (required)
     * @param  \Swagger\Client\Model\ProcessDefinitionActionRequest $body body (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ProcessDefinitionResponse
     */
    public function executeProcessDefinitionAction($process_definition_id, $body)
    {
        list($response) = $this->executeProcessDefinitionActionWithHttpInfo($process_definition_id, $body);
        return $response;
    }

    /**
     * Operation executeProcessDefinitionActionWithHttpInfo
     *
     * Execute actions for a process definition (Update category, Suspend or Activate)
     *
     * @param  string $process_definition_id (required)
     * @param  \Swagger\Client\Model\ProcessDefinitionActionRequest $body (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ProcessDefinitionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function executeProcessDefinitionActionWithHttpInfo($process_definition_id, $body)
    {
        $returnType = '\Swagger\Client\Model\ProcessDefinitionResponse';
        $request = $this->executeProcessDefinitionActionRequest($process_definition_id, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()->getBody()->getContents()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ProcessDefinitionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation executeProcessDefinitionActionAsync
     *
     * Execute actions for a process definition (Update category, Suspend or Activate)
     *
     * @param  string $process_definition_id (required)
     * @param  \Swagger\Client\Model\ProcessDefinitionActionRequest $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function executeProcessDefinitionActionAsync($process_definition_id, $body)
    {
        return $this->executeProcessDefinitionActionAsyncWithHttpInfo($process_definition_id, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation executeProcessDefinitionActionAsyncWithHttpInfo
     *
     * Execute actions for a process definition (Update category, Suspend or Activate)
     *
     * @param  string $process_definition_id (required)
     * @param  \Swagger\Client\Model\ProcessDefinitionActionRequest $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function executeProcessDefinitionActionAsyncWithHttpInfo($process_definition_id, $body)
    {
        $returnType = '\Swagger\Client\Model\ProcessDefinitionResponse';
        $request = $this->executeProcessDefinitionActionRequest($process_definition_id, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'executeProcessDefinitionAction'
     *
     * @param  string $process_definition_id (required)
     * @param  \Swagger\Client\Model\ProcessDefinitionActionRequest $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function executeProcessDefinitionActionRequest($process_definition_id, $body)
    {
        // verify the required parameter 'process_definition_id' is set
        if ($process_definition_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $process_definition_id when calling executeProcessDefinitionAction'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling executeProcessDefinitionAction'
            );
        }

        $resourcePath = '/repository/process-definitions/{processDefinitionId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($process_definition_id !== null) {
            $resourcePath = str_replace(
                '{' . 'processDefinitionId' . '}',
                ObjectSerializer::toPathValue($process_definition_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getBpmnModelResource
     *
     * Get a process definition BPMN model
     *
     * @param  string $process_definition_id The id of the process definition to get the model for. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\BpmnModel
     */
    public function getBpmnModelResource($process_definition_id)
    {
        list($response) = $this->getBpmnModelResourceWithHttpInfo($process_definition_id);
        return $response;
    }

    /**
     * Operation getBpmnModelResourceWithHttpInfo
     *
     * Get a process definition BPMN model
     *
     * @param  string $process_definition_id The id of the process definition to get the model for. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\BpmnModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function getBpmnModelResourceWithHttpInfo($process_definition_id)
    {
        $returnType = '\Swagger\Client\Model\BpmnModel';
        $request = $this->getBpmnModelResourceRequest($process_definition_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()->getBody()->getContents()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\BpmnModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getBpmnModelResourceAsync
     *
     * Get a process definition BPMN model
     *
     * @param  string $process_definition_id The id of the process definition to get the model for. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getBpmnModelResourceAsync($process_definition_id)
    {
        return $this->getBpmnModelResourceAsyncWithHttpInfo($process_definition_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getBpmnModelResourceAsyncWithHttpInfo
     *
     * Get a process definition BPMN model
     *
     * @param  string $process_definition_id The id of the process definition to get the model for. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getBpmnModelResourceAsyncWithHttpInfo($process_definition_id)
    {
        $returnType = '\Swagger\Client\Model\BpmnModel';
        $request = $this->getBpmnModelResourceRequest($process_definition_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getBpmnModelResource'
     *
     * @param  string $process_definition_id The id of the process definition to get the model for. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getBpmnModelResourceRequest($process_definition_id)
    {
        // verify the required parameter 'process_definition_id' is set
        if ($process_definition_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $process_definition_id when calling getBpmnModelResource'
            );
        }

        $resourcePath = '/repository/process-definitions/{processDefinitionId}/model';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($process_definition_id !== null) {
            $resourcePath = str_replace(
                '{' . 'processDefinitionId' . '}',
                ObjectSerializer::toPathValue($process_definition_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getIdentityLink
     *
     * Get a candidate starter from a process definition
     *
     * @param  string $process_definition_id The id of the process definition. (required)
     * @param  string $family Either users or groups, depending on the type of identity link. (required)
     * @param  string $identity_id Either the user or group of the identity to get as candidate starter. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\RestIdentityLink
     */
    public function getIdentityLink($process_definition_id, $family, $identity_id)
    {
        list($response) = $this->getIdentityLinkWithHttpInfo($process_definition_id, $family, $identity_id);
        return $response;
    }

    /**
     * Operation getIdentityLinkWithHttpInfo
     *
     * Get a candidate starter from a process definition
     *
     * @param  string $process_definition_id The id of the process definition. (required)
     * @param  string $family Either users or groups, depending on the type of identity link. (required)
     * @param  string $identity_id Either the user or group of the identity to get as candidate starter. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\RestIdentityLink, HTTP status code, HTTP response headers (array of strings)
     */
    public function getIdentityLinkWithHttpInfo($process_definition_id, $family, $identity_id)
    {
        $returnType = '\Swagger\Client\Model\RestIdentityLink';
        $request = $this->getIdentityLinkRequest($process_definition_id, $family, $identity_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()->getBody()->getContents()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\RestIdentityLink',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getIdentityLinkAsync
     *
     * Get a candidate starter from a process definition
     *
     * @param  string $process_definition_id The id of the process definition. (required)
     * @param  string $family Either users or groups, depending on the type of identity link. (required)
     * @param  string $identity_id Either the user or group of the identity to get as candidate starter. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getIdentityLinkAsync($process_definition_id, $family, $identity_id)
    {
        return $this->getIdentityLinkAsyncWithHttpInfo($process_definition_id, $family, $identity_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getIdentityLinkAsyncWithHttpInfo
     *
     * Get a candidate starter from a process definition
     *
     * @param  string $process_definition_id The id of the process definition. (required)
     * @param  string $family Either users or groups, depending on the type of identity link. (required)
     * @param  string $identity_id Either the user or group of the identity to get as candidate starter. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getIdentityLinkAsyncWithHttpInfo($process_definition_id, $family, $identity_id)
    {
        $returnType = '\Swagger\Client\Model\RestIdentityLink';
        $request = $this->getIdentityLinkRequest($process_definition_id, $family, $identity_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getIdentityLink'
     *
     * @param  string $process_definition_id The id of the process definition. (required)
     * @param  string $family Either users or groups, depending on the type of identity link. (required)
     * @param  string $identity_id Either the user or group of the identity to get as candidate starter. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getIdentityLinkRequest($process_definition_id, $family, $identity_id)
    {
        // verify the required parameter 'process_definition_id' is set
        if ($process_definition_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $process_definition_id when calling getIdentityLink'
            );
        }
        // verify the required parameter 'family' is set
        if ($family === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $family when calling getIdentityLink'
            );
        }
        // verify the required parameter 'identity_id' is set
        if ($identity_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $identity_id when calling getIdentityLink'
            );
        }

        $resourcePath = '/repository/process-definitions/{processDefinitionId}/identitylinks/{family}/{identityId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($process_definition_id !== null) {
            $resourcePath = str_replace(
                '{' . 'processDefinitionId' . '}',
                ObjectSerializer::toPathValue($process_definition_id),
                $resourcePath
            );
        }
        // path params
        if ($family !== null) {
            $resourcePath = str_replace(
                '{' . 'family' . '}',
                ObjectSerializer::toPathValue($family),
                $resourcePath
            );
        }
        // path params
        if ($identity_id !== null) {
            $resourcePath = str_replace(
                '{' . 'identityId' . '}',
                ObjectSerializer::toPathValue($identity_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getIdentityLinks
     *
     * Get all candidate starters for a process-definition
     *
     * @param  string $process_definition_id The id of the process definition to get the identity links for. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\RestIdentityLink[]
     */
    public function getIdentityLinks($process_definition_id)
    {
        list($response) = $this->getIdentityLinksWithHttpInfo($process_definition_id);
        return $response;
    }

    /**
     * Operation getIdentityLinksWithHttpInfo
     *
     * Get all candidate starters for a process-definition
     *
     * @param  string $process_definition_id The id of the process definition to get the identity links for. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\RestIdentityLink[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getIdentityLinksWithHttpInfo($process_definition_id)
    {
        $returnType = '\Swagger\Client\Model\RestIdentityLink[]';
        $request = $this->getIdentityLinksRequest($process_definition_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()->getBody()->getContents()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\RestIdentityLink[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getIdentityLinksAsync
     *
     * Get all candidate starters for a process-definition
     *
     * @param  string $process_definition_id The id of the process definition to get the identity links for. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getIdentityLinksAsync($process_definition_id)
    {
        return $this->getIdentityLinksAsyncWithHttpInfo($process_definition_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getIdentityLinksAsyncWithHttpInfo
     *
     * Get all candidate starters for a process-definition
     *
     * @param  string $process_definition_id The id of the process definition to get the identity links for. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getIdentityLinksAsyncWithHttpInfo($process_definition_id)
    {
        $returnType = '\Swagger\Client\Model\RestIdentityLink[]';
        $request = $this->getIdentityLinksRequest($process_definition_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getIdentityLinks'
     *
     * @param  string $process_definition_id The id of the process definition to get the identity links for. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getIdentityLinksRequest($process_definition_id)
    {
        // verify the required parameter 'process_definition_id' is set
        if ($process_definition_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $process_definition_id when calling getIdentityLinks'
            );
        }

        $resourcePath = '/repository/process-definitions/{processDefinitionId}/identitylinks';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($process_definition_id !== null) {
            $resourcePath = str_replace(
                '{' . 'processDefinitionId' . '}',
                ObjectSerializer::toPathValue($process_definition_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getModelResource
     *
     * Get a process definition image
     *
     * @param  string $process_definition_id process_definition_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string[]
     */
    public function getModelResource($process_definition_id)
    {
        list($response) = $this->getModelResourceWithHttpInfo($process_definition_id);
        return $response;
    }

    /**
     * Operation getModelResourceWithHttpInfo
     *
     * Get a process definition image
     *
     * @param  string $process_definition_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getModelResourceWithHttpInfo($process_definition_id)
    {
        $returnType = 'string[]';
        $request = $this->getModelResourceRequest($process_definition_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()->getBody()->getContents()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getModelResourceAsync
     *
     * Get a process definition image
     *
     * @param  string $process_definition_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getModelResourceAsync($process_definition_id)
    {
        return $this->getModelResourceAsyncWithHttpInfo($process_definition_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getModelResourceAsyncWithHttpInfo
     *
     * Get a process definition image
     *
     * @param  string $process_definition_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getModelResourceAsyncWithHttpInfo($process_definition_id)
    {
        $returnType = 'string[]';
        $request = $this->getModelResourceRequest($process_definition_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getModelResource'
     *
     * @param  string $process_definition_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getModelResourceRequest($process_definition_id)
    {
        // verify the required parameter 'process_definition_id' is set
        if ($process_definition_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $process_definition_id when calling getModelResource'
            );
        }

        $resourcePath = '/repository/process-definitions/{processDefinitionId}/image';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($process_definition_id !== null) {
            $resourcePath = str_replace(
                '{' . 'processDefinitionId' . '}',
                ObjectSerializer::toPathValue($process_definition_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getProcessDefinition
     *
     * Get a process definition
     *
     * @param  string $process_definition_id The id of the process definition to get. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ProcessDefinitionResponse
     */
    public function getProcessDefinition($process_definition_id)
    {
        list($response) = $this->getProcessDefinitionWithHttpInfo($process_definition_id);
        return $response;
    }

    /**
     * Operation getProcessDefinitionWithHttpInfo
     *
     * Get a process definition
     *
     * @param  string $process_definition_id The id of the process definition to get. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ProcessDefinitionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getProcessDefinitionWithHttpInfo($process_definition_id)
    {
        $returnType = '\Swagger\Client\Model\ProcessDefinitionResponse';
        $request = $this->getProcessDefinitionRequest($process_definition_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()->getBody()->getContents()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ProcessDefinitionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getProcessDefinitionAsync
     *
     * Get a process definition
     *
     * @param  string $process_definition_id The id of the process definition to get. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProcessDefinitionAsync($process_definition_id)
    {
        return $this->getProcessDefinitionAsyncWithHttpInfo($process_definition_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getProcessDefinitionAsyncWithHttpInfo
     *
     * Get a process definition
     *
     * @param  string $process_definition_id The id of the process definition to get. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProcessDefinitionAsyncWithHttpInfo($process_definition_id)
    {
        $returnType = '\Swagger\Client\Model\ProcessDefinitionResponse';
        $request = $this->getProcessDefinitionRequest($process_definition_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getProcessDefinition'
     *
     * @param  string $process_definition_id The id of the process definition to get. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getProcessDefinitionRequest($process_definition_id)
    {
        // verify the required parameter 'process_definition_id' is set
        if ($process_definition_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $process_definition_id when calling getProcessDefinition'
            );
        }

        $resourcePath = '/repository/process-definitions/{processDefinitionId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($process_definition_id !== null) {
            $resourcePath = str_replace(
                '{' . 'processDefinitionId' . '}',
                ObjectSerializer::toPathValue($process_definition_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getProcessDefinitionResource
     *
     * Get a process definition resource content
     *
     * @param  string $process_definition_id The id of the process definition to get the resource data for. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string[]
     */
    public function getProcessDefinitionResource($process_definition_id)
    {
        list($response) = $this->getProcessDefinitionResourceWithHttpInfo($process_definition_id);
        return $response;
    }

    /**
     * Operation getProcessDefinitionResourceWithHttpInfo
     *
     * Get a process definition resource content
     *
     * @param  string $process_definition_id The id of the process definition to get the resource data for. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getProcessDefinitionResourceWithHttpInfo($process_definition_id)
    {
        $returnType = 'string[]';
        $request = $this->getProcessDefinitionResourceRequest($process_definition_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()->getBody()->getContents()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getProcessDefinitionResourceAsync
     *
     * Get a process definition resource content
     *
     * @param  string $process_definition_id The id of the process definition to get the resource data for. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProcessDefinitionResourceAsync($process_definition_id)
    {
        return $this->getProcessDefinitionResourceAsyncWithHttpInfo($process_definition_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getProcessDefinitionResourceAsyncWithHttpInfo
     *
     * Get a process definition resource content
     *
     * @param  string $process_definition_id The id of the process definition to get the resource data for. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProcessDefinitionResourceAsyncWithHttpInfo($process_definition_id)
    {
        $returnType = 'string[]';
        $request = $this->getProcessDefinitionResourceRequest($process_definition_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getProcessDefinitionResource'
     *
     * @param  string $process_definition_id The id of the process definition to get the resource data for. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getProcessDefinitionResourceRequest($process_definition_id)
    {
        // verify the required parameter 'process_definition_id' is set
        if ($process_definition_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $process_definition_id when calling getProcessDefinitionResource'
            );
        }

        $resourcePath = '/repository/process-definitions/{processDefinitionId}/resourcedata';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($process_definition_id !== null) {
            $resourcePath = str_replace(
                '{' . 'processDefinitionId' . '}',
                ObjectSerializer::toPathValue($process_definition_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getProcessDefinitions
     *
     * List of process definitions
     *
     * @param  int $version Only return process definitions with the given version. (optional)
     * @param  string $name Only return process definitions with the given name. (optional)
     * @param  string $name_like Only return process definitions with a name like the given name. (optional)
     * @param  string $key Only return process definitions with the given key. (optional)
     * @param  string $key_like Only return process definitions with a name like the given key. (optional)
     * @param  string $resource_name Only return process definitions with the given resource name. (optional)
     * @param  string $resource_name_like Only return process definitions with a name like the given resource name. (optional)
     * @param  string $category Only return process definitions with the given category. (optional)
     * @param  string $category_like Only return process definitions with a category like the given name. (optional)
     * @param  string $category_not_equals Only return process definitions which don�t have the given category. (optional)
     * @param  string $deployment_id Only return process definitions with the given category. (optional)
     * @param  string $startable_by_user Only return process definitions which are part of a deployment with the given id. (optional)
     * @param  bool $latest Only return the latest process definition versions. Can only be used together with key and keyLike parameters, using any other parameter will result in a 400-response. (optional)
     * @param  bool $suspended If true, only returns process definitions which are suspended. If false, only active process definitions (which are not suspended) are returned. (optional)
     * @param  string $sort Property to sort on, to be used together with the order. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\DataResponse
     */
    public function getProcessDefinitions($version = null, $name = null, $name_like = null, $key = null, $key_like = null, $resource_name = null, $resource_name_like = null, $category = null, $category_like = null, $category_not_equals = null, $deployment_id = null, $startable_by_user = null, $latest = null, $suspended = null, $sort = null)
    {
        list($response) = $this->getProcessDefinitionsWithHttpInfo($version, $name, $name_like, $key, $key_like, $resource_name, $resource_name_like, $category, $category_like, $category_not_equals, $deployment_id, $startable_by_user, $latest, $suspended, $sort);
        return $response;
    }

    /**
     * Operation getProcessDefinitionsWithHttpInfo
     *
     * List of process definitions
     *
     * @param  int $version Only return process definitions with the given version. (optional)
     * @param  string $name Only return process definitions with the given name. (optional)
     * @param  string $name_like Only return process definitions with a name like the given name. (optional)
     * @param  string $key Only return process definitions with the given key. (optional)
     * @param  string $key_like Only return process definitions with a name like the given key. (optional)
     * @param  string $resource_name Only return process definitions with the given resource name. (optional)
     * @param  string $resource_name_like Only return process definitions with a name like the given resource name. (optional)
     * @param  string $category Only return process definitions with the given category. (optional)
     * @param  string $category_like Only return process definitions with a category like the given name. (optional)
     * @param  string $category_not_equals Only return process definitions which don�t have the given category. (optional)
     * @param  string $deployment_id Only return process definitions with the given category. (optional)
     * @param  string $startable_by_user Only return process definitions which are part of a deployment with the given id. (optional)
     * @param  bool $latest Only return the latest process definition versions. Can only be used together with key and keyLike parameters, using any other parameter will result in a 400-response. (optional)
     * @param  bool $suspended If true, only returns process definitions which are suspended. If false, only active process definitions (which are not suspended) are returned. (optional)
     * @param  string $sort Property to sort on, to be used together with the order. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\DataResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getProcessDefinitionsWithHttpInfo($version = null, $name = null, $name_like = null, $key = null, $key_like = null, $resource_name = null, $resource_name_like = null, $category = null, $category_like = null, $category_not_equals = null, $deployment_id = null, $startable_by_user = null, $latest = null, $suspended = null, $sort = null)
    {
        $returnType = '\Swagger\Client\Model\DataResponse';
        $request = $this->getProcessDefinitionsRequest($version, $name, $name_like, $key, $key_like, $resource_name, $resource_name_like, $category, $category_like, $category_not_equals, $deployment_id, $startable_by_user, $latest, $suspended, $sort);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()->getBody()->getContents()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\DataResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getProcessDefinitionsAsync
     *
     * List of process definitions
     *
     * @param  int $version Only return process definitions with the given version. (optional)
     * @param  string $name Only return process definitions with the given name. (optional)
     * @param  string $name_like Only return process definitions with a name like the given name. (optional)
     * @param  string $key Only return process definitions with the given key. (optional)
     * @param  string $key_like Only return process definitions with a name like the given key. (optional)
     * @param  string $resource_name Only return process definitions with the given resource name. (optional)
     * @param  string $resource_name_like Only return process definitions with a name like the given resource name. (optional)
     * @param  string $category Only return process definitions with the given category. (optional)
     * @param  string $category_like Only return process definitions with a category like the given name. (optional)
     * @param  string $category_not_equals Only return process definitions which don�t have the given category. (optional)
     * @param  string $deployment_id Only return process definitions with the given category. (optional)
     * @param  string $startable_by_user Only return process definitions which are part of a deployment with the given id. (optional)
     * @param  bool $latest Only return the latest process definition versions. Can only be used together with key and keyLike parameters, using any other parameter will result in a 400-response. (optional)
     * @param  bool $suspended If true, only returns process definitions which are suspended. If false, only active process definitions (which are not suspended) are returned. (optional)
     * @param  string $sort Property to sort on, to be used together with the order. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProcessDefinitionsAsync($version = null, $name = null, $name_like = null, $key = null, $key_like = null, $resource_name = null, $resource_name_like = null, $category = null, $category_like = null, $category_not_equals = null, $deployment_id = null, $startable_by_user = null, $latest = null, $suspended = null, $sort = null)
    {
        return $this->getProcessDefinitionsAsyncWithHttpInfo($version, $name, $name_like, $key, $key_like, $resource_name, $resource_name_like, $category, $category_like, $category_not_equals, $deployment_id, $startable_by_user, $latest, $suspended, $sort)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getProcessDefinitionsAsyncWithHttpInfo
     *
     * List of process definitions
     *
     * @param  int $version Only return process definitions with the given version. (optional)
     * @param  string $name Only return process definitions with the given name. (optional)
     * @param  string $name_like Only return process definitions with a name like the given name. (optional)
     * @param  string $key Only return process definitions with the given key. (optional)
     * @param  string $key_like Only return process definitions with a name like the given key. (optional)
     * @param  string $resource_name Only return process definitions with the given resource name. (optional)
     * @param  string $resource_name_like Only return process definitions with a name like the given resource name. (optional)
     * @param  string $category Only return process definitions with the given category. (optional)
     * @param  string $category_like Only return process definitions with a category like the given name. (optional)
     * @param  string $category_not_equals Only return process definitions which don�t have the given category. (optional)
     * @param  string $deployment_id Only return process definitions with the given category. (optional)
     * @param  string $startable_by_user Only return process definitions which are part of a deployment with the given id. (optional)
     * @param  bool $latest Only return the latest process definition versions. Can only be used together with key and keyLike parameters, using any other parameter will result in a 400-response. (optional)
     * @param  bool $suspended If true, only returns process definitions which are suspended. If false, only active process definitions (which are not suspended) are returned. (optional)
     * @param  string $sort Property to sort on, to be used together with the order. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProcessDefinitionsAsyncWithHttpInfo($version = null, $name = null, $name_like = null, $key = null, $key_like = null, $resource_name = null, $resource_name_like = null, $category = null, $category_like = null, $category_not_equals = null, $deployment_id = null, $startable_by_user = null, $latest = null, $suspended = null, $sort = null)
    {
        $returnType = '\Swagger\Client\Model\DataResponse';
        $request = $this->getProcessDefinitionsRequest($version, $name, $name_like, $key, $key_like, $resource_name, $resource_name_like, $category, $category_like, $category_not_equals, $deployment_id, $startable_by_user, $latest, $suspended, $sort);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getProcessDefinitions'
     *
     * @param  int $version Only return process definitions with the given version. (optional)
     * @param  string $name Only return process definitions with the given name. (optional)
     * @param  string $name_like Only return process definitions with a name like the given name. (optional)
     * @param  string $key Only return process definitions with the given key. (optional)
     * @param  string $key_like Only return process definitions with a name like the given key. (optional)
     * @param  string $resource_name Only return process definitions with the given resource name. (optional)
     * @param  string $resource_name_like Only return process definitions with a name like the given resource name. (optional)
     * @param  string $category Only return process definitions with the given category. (optional)
     * @param  string $category_like Only return process definitions with a category like the given name. (optional)
     * @param  string $category_not_equals Only return process definitions which don�t have the given category. (optional)
     * @param  string $deployment_id Only return process definitions with the given category. (optional)
     * @param  string $startable_by_user Only return process definitions which are part of a deployment with the given id. (optional)
     * @param  bool $latest Only return the latest process definition versions. Can only be used together with key and keyLike parameters, using any other parameter will result in a 400-response. (optional)
     * @param  bool $suspended If true, only returns process definitions which are suspended. If false, only active process definitions (which are not suspended) are returned. (optional)
     * @param  string $sort Property to sort on, to be used together with the order. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getProcessDefinitionsRequest($version = null, $name = null, $name_like = null, $key = null, $key_like = null, $resource_name = null, $resource_name_like = null, $category = null, $category_like = null, $category_not_equals = null, $deployment_id = null, $startable_by_user = null, $latest = null, $suspended = null, $sort = null)
    {

        $resourcePath = '/repository/process-definitions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($version !== null) {
            $queryParams['version'] = ObjectSerializer::toQueryValue($version);
        }
        // query params
        if ($name !== null) {
            $queryParams['name'] = ObjectSerializer::toQueryValue($name);
        }
        // query params
        if ($name_like !== null) {
            $queryParams['nameLike'] = ObjectSerializer::toQueryValue($name_like);
        }
        // query params
        if ($key !== null) {
            $queryParams['key'] = ObjectSerializer::toQueryValue($key);
        }
        // query params
        if ($key_like !== null) {
            $queryParams['keyLike'] = ObjectSerializer::toQueryValue($key_like);
        }
        // query params
        if ($resource_name !== null) {
            $queryParams['resourceName'] = ObjectSerializer::toQueryValue($resource_name);
        }
        // query params
        if ($resource_name_like !== null) {
            $queryParams['resourceNameLike'] = ObjectSerializer::toQueryValue($resource_name_like);
        }
        // query params
        if ($category !== null) {
            $queryParams['category'] = ObjectSerializer::toQueryValue($category);
        }
        // query params
        if ($category_like !== null) {
            $queryParams['categoryLike'] = ObjectSerializer::toQueryValue($category_like);
        }
        // query params
        if ($category_not_equals !== null) {
            $queryParams['categoryNotEquals'] = ObjectSerializer::toQueryValue($category_not_equals);
        }
        // query params
        if ($deployment_id !== null) {
            $queryParams['deploymentId'] = ObjectSerializer::toQueryValue($deployment_id);
        }
        // query params
        if ($startable_by_user !== null) {
            $queryParams['startableByUser'] = ObjectSerializer::toQueryValue($startable_by_user);
        }
        // query params
        if ($latest !== null) {
            $queryParams['latest'] = ObjectSerializer::toQueryValue($latest);
        }
        // query params
        if ($suspended !== null) {
            $queryParams['suspended'] = ObjectSerializer::toQueryValue($suspended);
        }
        // query params
        if ($sort !== null) {
            $queryParams['sort'] = ObjectSerializer::toQueryValue($sort);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
