<?php
/**
 * JobsApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * sWIm Activiti REST API
 *
 * here be dragons
 *
 * OpenAPI spec version: v0.2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * JobsApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class JobsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation deleteDeadLetterJob
     *
     * Delete a deadletter job
     *
     * @param  string $job_id job_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteDeadLetterJob($job_id)
    {
        $this->deleteDeadLetterJobWithHttpInfo($job_id);
    }

    /**
     * Operation deleteDeadLetterJobWithHttpInfo
     *
     * Delete a deadletter job
     *
     * @param  string $job_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteDeadLetterJobWithHttpInfo($job_id)
    {
        $returnType = '';
        $request = $this->deleteDeadLetterJobRequest($job_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()->getBody()->getContents()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteDeadLetterJobAsync
     *
     * Delete a deadletter job
     *
     * @param  string $job_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteDeadLetterJobAsync($job_id)
    {
        return $this->deleteDeadLetterJobAsyncWithHttpInfo($job_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteDeadLetterJobAsyncWithHttpInfo
     *
     * Delete a deadletter job
     *
     * @param  string $job_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteDeadLetterJobAsyncWithHttpInfo($job_id)
    {
        $returnType = '';
        $request = $this->deleteDeadLetterJobRequest($job_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteDeadLetterJob'
     *
     * @param  string $job_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteDeadLetterJobRequest($job_id)
    {
        // verify the required parameter 'job_id' is set
        if ($job_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $job_id when calling deleteDeadLetterJob'
            );
        }

        $resourcePath = '/management/deadletter-jobs/{jobId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($job_id !== null) {
            $resourcePath = str_replace(
                '{' . 'jobId' . '}',
                ObjectSerializer::toPathValue($job_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteJob
     *
     * Delete a job
     *
     * @param  string $job_id The id of the job to delete. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteJob($job_id)
    {
        $this->deleteJobWithHttpInfo($job_id);
    }

    /**
     * Operation deleteJobWithHttpInfo
     *
     * Delete a job
     *
     * @param  string $job_id The id of the job to delete. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteJobWithHttpInfo($job_id)
    {
        $returnType = '';
        $request = $this->deleteJobRequest($job_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()->getBody()->getContents()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteJobAsync
     *
     * Delete a job
     *
     * @param  string $job_id The id of the job to delete. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteJobAsync($job_id)
    {
        return $this->deleteJobAsyncWithHttpInfo($job_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteJobAsyncWithHttpInfo
     *
     * Delete a job
     *
     * @param  string $job_id The id of the job to delete. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteJobAsyncWithHttpInfo($job_id)
    {
        $returnType = '';
        $request = $this->deleteJobRequest($job_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteJob'
     *
     * @param  string $job_id The id of the job to delete. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteJobRequest($job_id)
    {
        // verify the required parameter 'job_id' is set
        if ($job_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $job_id when calling deleteJob'
            );
        }

        $resourcePath = '/management/jobs/{jobId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($job_id !== null) {
            $resourcePath = str_replace(
                '{' . 'jobId' . '}',
                ObjectSerializer::toPathValue($job_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteTimerJob
     *
     * Delete a timer job
     *
     * @param  string $job_id job_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteTimerJob($job_id)
    {
        $this->deleteTimerJobWithHttpInfo($job_id);
    }

    /**
     * Operation deleteTimerJobWithHttpInfo
     *
     * Delete a timer job
     *
     * @param  string $job_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteTimerJobWithHttpInfo($job_id)
    {
        $returnType = '';
        $request = $this->deleteTimerJobRequest($job_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()->getBody()->getContents()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteTimerJobAsync
     *
     * Delete a timer job
     *
     * @param  string $job_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteTimerJobAsync($job_id)
    {
        return $this->deleteTimerJobAsyncWithHttpInfo($job_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteTimerJobAsyncWithHttpInfo
     *
     * Delete a timer job
     *
     * @param  string $job_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteTimerJobAsyncWithHttpInfo($job_id)
    {
        $returnType = '';
        $request = $this->deleteTimerJobRequest($job_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteTimerJob'
     *
     * @param  string $job_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteTimerJobRequest($job_id)
    {
        // verify the required parameter 'job_id' is set
        if ($job_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $job_id when calling deleteTimerJob'
            );
        }

        $resourcePath = '/management/timer-jobs/{jobId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($job_id !== null) {
            $resourcePath = str_replace(
                '{' . 'jobId' . '}',
                ObjectSerializer::toPathValue($job_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation executeJobAction
     *
     * Execute a single job
     *
     * @param  string $job_id job_id (required)
     * @param  \Swagger\Client\Model\RestActionRequest $action_request Action to perform. Only execute is supported. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function executeJobAction($job_id, $action_request = null)
    {
        $this->executeJobActionWithHttpInfo($job_id, $action_request);
    }

    /**
     * Operation executeJobActionWithHttpInfo
     *
     * Execute a single job
     *
     * @param  string $job_id (required)
     * @param  \Swagger\Client\Model\RestActionRequest $action_request Action to perform. Only execute is supported. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function executeJobActionWithHttpInfo($job_id, $action_request = null)
    {
        $returnType = '';
        $request = $this->executeJobActionRequest($job_id, $action_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()->getBody()->getContents()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation executeJobActionAsync
     *
     * Execute a single job
     *
     * @param  string $job_id (required)
     * @param  \Swagger\Client\Model\RestActionRequest $action_request Action to perform. Only execute is supported. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function executeJobActionAsync($job_id, $action_request = null)
    {
        return $this->executeJobActionAsyncWithHttpInfo($job_id, $action_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation executeJobActionAsyncWithHttpInfo
     *
     * Execute a single job
     *
     * @param  string $job_id (required)
     * @param  \Swagger\Client\Model\RestActionRequest $action_request Action to perform. Only execute is supported. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function executeJobActionAsyncWithHttpInfo($job_id, $action_request = null)
    {
        $returnType = '';
        $request = $this->executeJobActionRequest($job_id, $action_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'executeJobAction'
     *
     * @param  string $job_id (required)
     * @param  \Swagger\Client\Model\RestActionRequest $action_request Action to perform. Only execute is supported. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function executeJobActionRequest($job_id, $action_request = null)
    {
        // verify the required parameter 'job_id' is set
        if ($job_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $job_id when calling executeJobAction'
            );
        }

        $resourcePath = '/management/jobs/{jobId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($job_id !== null) {
            $resourcePath = str_replace(
                '{' . 'jobId' . '}',
                ObjectSerializer::toPathValue($job_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($action_request)) {
            $_tempBody = $action_request;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getDeadLetterJobStacktrace
     *
     * Get the exception stacktrace for a deadletter job
     *
     * @param  string $job_id job_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function getDeadLetterJobStacktrace($job_id)
    {
        list($response) = $this->getDeadLetterJobStacktraceWithHttpInfo($job_id);
        return $response;
    }

    /**
     * Operation getDeadLetterJobStacktraceWithHttpInfo
     *
     * Get the exception stacktrace for a deadletter job
     *
     * @param  string $job_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function getDeadLetterJobStacktraceWithHttpInfo($job_id)
    {
        $returnType = 'string';
        $request = $this->getDeadLetterJobStacktraceRequest($job_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()->getBody()->getContents()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getDeadLetterJobStacktraceAsync
     *
     * Get the exception stacktrace for a deadletter job
     *
     * @param  string $job_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDeadLetterJobStacktraceAsync($job_id)
    {
        return $this->getDeadLetterJobStacktraceAsyncWithHttpInfo($job_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getDeadLetterJobStacktraceAsyncWithHttpInfo
     *
     * Get the exception stacktrace for a deadletter job
     *
     * @param  string $job_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDeadLetterJobStacktraceAsyncWithHttpInfo($job_id)
    {
        $returnType = 'string';
        $request = $this->getDeadLetterJobStacktraceRequest($job_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getDeadLetterJobStacktrace'
     *
     * @param  string $job_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getDeadLetterJobStacktraceRequest($job_id)
    {
        // verify the required parameter 'job_id' is set
        if ($job_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $job_id when calling getDeadLetterJobStacktrace'
            );
        }

        $resourcePath = '/management/deadletter-jobs/{jobId}/exception-stacktrace';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($job_id !== null) {
            $resourcePath = str_replace(
                '{' . 'jobId' . '}',
                ObjectSerializer::toPathValue($job_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getDeadletterJob
     *
     * Get a single deadletter job
     *
     * @param  string $job_id job_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\JobResponse
     */
    public function getDeadletterJob($job_id)
    {
        list($response) = $this->getDeadletterJobWithHttpInfo($job_id);
        return $response;
    }

    /**
     * Operation getDeadletterJobWithHttpInfo
     *
     * Get a single deadletter job
     *
     * @param  string $job_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\JobResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getDeadletterJobWithHttpInfo($job_id)
    {
        $returnType = '\Swagger\Client\Model\JobResponse';
        $request = $this->getDeadletterJobRequest($job_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()->getBody()->getContents()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\JobResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getDeadletterJobAsync
     *
     * Get a single deadletter job
     *
     * @param  string $job_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDeadletterJobAsync($job_id)
    {
        return $this->getDeadletterJobAsyncWithHttpInfo($job_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getDeadletterJobAsyncWithHttpInfo
     *
     * Get a single deadletter job
     *
     * @param  string $job_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDeadletterJobAsyncWithHttpInfo($job_id)
    {
        $returnType = '\Swagger\Client\Model\JobResponse';
        $request = $this->getDeadletterJobRequest($job_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getDeadletterJob'
     *
     * @param  string $job_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getDeadletterJobRequest($job_id)
    {
        // verify the required parameter 'job_id' is set
        if ($job_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $job_id when calling getDeadletterJob'
            );
        }

        $resourcePath = '/management/deadletter-jobs/{jobId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($job_id !== null) {
            $resourcePath = str_replace(
                '{' . 'jobId' . '}',
                ObjectSerializer::toPathValue($job_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getJob
     *
     * Get a single job
     *
     * @param  string $job_id The id of the job to get. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\JobResponse
     */
    public function getJob($job_id)
    {
        list($response) = $this->getJobWithHttpInfo($job_id);
        return $response;
    }

    /**
     * Operation getJobWithHttpInfo
     *
     * Get a single job
     *
     * @param  string $job_id The id of the job to get. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\JobResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getJobWithHttpInfo($job_id)
    {
        $returnType = '\Swagger\Client\Model\JobResponse';
        $request = $this->getJobRequest($job_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()->getBody()->getContents()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\JobResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getJobAsync
     *
     * Get a single job
     *
     * @param  string $job_id The id of the job to get. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getJobAsync($job_id)
    {
        return $this->getJobAsyncWithHttpInfo($job_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getJobAsyncWithHttpInfo
     *
     * Get a single job
     *
     * @param  string $job_id The id of the job to get. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getJobAsyncWithHttpInfo($job_id)
    {
        $returnType = '\Swagger\Client\Model\JobResponse';
        $request = $this->getJobRequest($job_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getJob'
     *
     * @param  string $job_id The id of the job to get. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getJobRequest($job_id)
    {
        // verify the required parameter 'job_id' is set
        if ($job_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $job_id when calling getJob'
            );
        }

        $resourcePath = '/management/jobs/{jobId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($job_id !== null) {
            $resourcePath = str_replace(
                '{' . 'jobId' . '}',
                ObjectSerializer::toPathValue($job_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getJobStacktrace
     *
     * Get the exception stacktrace for a job
     *
     * @param  string $job_id Id of the job to get the stacktrace for. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function getJobStacktrace($job_id)
    {
        list($response) = $this->getJobStacktraceWithHttpInfo($job_id);
        return $response;
    }

    /**
     * Operation getJobStacktraceWithHttpInfo
     *
     * Get the exception stacktrace for a job
     *
     * @param  string $job_id Id of the job to get the stacktrace for. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function getJobStacktraceWithHttpInfo($job_id)
    {
        $returnType = 'string';
        $request = $this->getJobStacktraceRequest($job_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()->getBody()->getContents()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getJobStacktraceAsync
     *
     * Get the exception stacktrace for a job
     *
     * @param  string $job_id Id of the job to get the stacktrace for. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getJobStacktraceAsync($job_id)
    {
        return $this->getJobStacktraceAsyncWithHttpInfo($job_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getJobStacktraceAsyncWithHttpInfo
     *
     * Get the exception stacktrace for a job
     *
     * @param  string $job_id Id of the job to get the stacktrace for. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getJobStacktraceAsyncWithHttpInfo($job_id)
    {
        $returnType = 'string';
        $request = $this->getJobStacktraceRequest($job_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getJobStacktrace'
     *
     * @param  string $job_id Id of the job to get the stacktrace for. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getJobStacktraceRequest($job_id)
    {
        // verify the required parameter 'job_id' is set
        if ($job_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $job_id when calling getJobStacktrace'
            );
        }

        $resourcePath = '/management/jobs/{jobId}/exception-stacktrace';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($job_id !== null) {
            $resourcePath = str_replace(
                '{' . 'jobId' . '}',
                ObjectSerializer::toPathValue($job_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getSuspendedJob
     *
     * Get a single suspended job
     *
     * @param  string $job_id job_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\JobResponse
     */
    public function getSuspendedJob($job_id)
    {
        list($response) = $this->getSuspendedJobWithHttpInfo($job_id);
        return $response;
    }

    /**
     * Operation getSuspendedJobWithHttpInfo
     *
     * Get a single suspended job
     *
     * @param  string $job_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\JobResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getSuspendedJobWithHttpInfo($job_id)
    {
        $returnType = '\Swagger\Client\Model\JobResponse';
        $request = $this->getSuspendedJobRequest($job_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()->getBody()->getContents()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\JobResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getSuspendedJobAsync
     *
     * Get a single suspended job
     *
     * @param  string $job_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSuspendedJobAsync($job_id)
    {
        return $this->getSuspendedJobAsyncWithHttpInfo($job_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getSuspendedJobAsyncWithHttpInfo
     *
     * Get a single suspended job
     *
     * @param  string $job_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSuspendedJobAsyncWithHttpInfo($job_id)
    {
        $returnType = '\Swagger\Client\Model\JobResponse';
        $request = $this->getSuspendedJobRequest($job_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getSuspendedJob'
     *
     * @param  string $job_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getSuspendedJobRequest($job_id)
    {
        // verify the required parameter 'job_id' is set
        if ($job_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $job_id when calling getSuspendedJob'
            );
        }

        $resourcePath = '/management/suspended-jobs/{jobId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($job_id !== null) {
            $resourcePath = str_replace(
                '{' . 'jobId' . '}',
                ObjectSerializer::toPathValue($job_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getSuspendedJobStacktrace
     *
     * Get the exception stacktrace for a suspended job
     *
     * @param  string $job_id job_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function getSuspendedJobStacktrace($job_id)
    {
        list($response) = $this->getSuspendedJobStacktraceWithHttpInfo($job_id);
        return $response;
    }

    /**
     * Operation getSuspendedJobStacktraceWithHttpInfo
     *
     * Get the exception stacktrace for a suspended job
     *
     * @param  string $job_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function getSuspendedJobStacktraceWithHttpInfo($job_id)
    {
        $returnType = 'string';
        $request = $this->getSuspendedJobStacktraceRequest($job_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()->getBody()->getContents()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getSuspendedJobStacktraceAsync
     *
     * Get the exception stacktrace for a suspended job
     *
     * @param  string $job_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSuspendedJobStacktraceAsync($job_id)
    {
        return $this->getSuspendedJobStacktraceAsyncWithHttpInfo($job_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getSuspendedJobStacktraceAsyncWithHttpInfo
     *
     * Get the exception stacktrace for a suspended job
     *
     * @param  string $job_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSuspendedJobStacktraceAsyncWithHttpInfo($job_id)
    {
        $returnType = 'string';
        $request = $this->getSuspendedJobStacktraceRequest($job_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getSuspendedJobStacktrace'
     *
     * @param  string $job_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getSuspendedJobStacktraceRequest($job_id)
    {
        // verify the required parameter 'job_id' is set
        if ($job_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $job_id when calling getSuspendedJobStacktrace'
            );
        }

        $resourcePath = '/management/suspended-jobs/{jobId}/exception-stacktrace';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($job_id !== null) {
            $resourcePath = str_replace(
                '{' . 'jobId' . '}',
                ObjectSerializer::toPathValue($job_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getTimerJob
     *
     * Get a single timer job
     *
     * @param  string $job_id job_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\JobResponse
     */
    public function getTimerJob($job_id)
    {
        list($response) = $this->getTimerJobWithHttpInfo($job_id);
        return $response;
    }

    /**
     * Operation getTimerJobWithHttpInfo
     *
     * Get a single timer job
     *
     * @param  string $job_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\JobResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getTimerJobWithHttpInfo($job_id)
    {
        $returnType = '\Swagger\Client\Model\JobResponse';
        $request = $this->getTimerJobRequest($job_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()->getBody()->getContents()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\JobResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getTimerJobAsync
     *
     * Get a single timer job
     *
     * @param  string $job_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTimerJobAsync($job_id)
    {
        return $this->getTimerJobAsyncWithHttpInfo($job_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getTimerJobAsyncWithHttpInfo
     *
     * Get a single timer job
     *
     * @param  string $job_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTimerJobAsyncWithHttpInfo($job_id)
    {
        $returnType = '\Swagger\Client\Model\JobResponse';
        $request = $this->getTimerJobRequest($job_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getTimerJob'
     *
     * @param  string $job_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getTimerJobRequest($job_id)
    {
        // verify the required parameter 'job_id' is set
        if ($job_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $job_id when calling getTimerJob'
            );
        }

        $resourcePath = '/management/timer-jobs/{jobId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($job_id !== null) {
            $resourcePath = str_replace(
                '{' . 'jobId' . '}',
                ObjectSerializer::toPathValue($job_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getTimerJobStacktrace
     *
     * Get the exception stacktrace for a timer job
     *
     * @param  string $job_id job_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function getTimerJobStacktrace($job_id)
    {
        list($response) = $this->getTimerJobStacktraceWithHttpInfo($job_id);
        return $response;
    }

    /**
     * Operation getTimerJobStacktraceWithHttpInfo
     *
     * Get the exception stacktrace for a timer job
     *
     * @param  string $job_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function getTimerJobStacktraceWithHttpInfo($job_id)
    {
        $returnType = 'string';
        $request = $this->getTimerJobStacktraceRequest($job_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()->getBody()->getContents()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getTimerJobStacktraceAsync
     *
     * Get the exception stacktrace for a timer job
     *
     * @param  string $job_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTimerJobStacktraceAsync($job_id)
    {
        return $this->getTimerJobStacktraceAsyncWithHttpInfo($job_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getTimerJobStacktraceAsyncWithHttpInfo
     *
     * Get the exception stacktrace for a timer job
     *
     * @param  string $job_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTimerJobStacktraceAsyncWithHttpInfo($job_id)
    {
        $returnType = 'string';
        $request = $this->getTimerJobStacktraceRequest($job_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getTimerJobStacktrace'
     *
     * @param  string $job_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getTimerJobStacktraceRequest($job_id)
    {
        // verify the required parameter 'job_id' is set
        if ($job_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $job_id when calling getTimerJobStacktrace'
            );
        }

        $resourcePath = '/management/timer-jobs/{jobId}/exception-stacktrace';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($job_id !== null) {
            $resourcePath = str_replace(
                '{' . 'jobId' . '}',
                ObjectSerializer::toPathValue($job_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listDeadLetterJobs
     *
     * Get a list of deadletter jobs
     *
     * @param  string $id Only return job with the given id (optional)
     * @param  string $process_instance_id Only return jobs part of a process with the given id (optional)
     * @param  string $execution_id Only return jobs part of an execution with the given id (optional)
     * @param  string $process_definition_id Only return jobs with the given process definition id (optional)
     * @param  bool $timers_only If true, only return jobs which are timers. If false, this parameter is ignored. Cannot be used together with &#39;messagesOnly&#39;. (optional)
     * @param  bool $messages_only If true, only return jobs which are messages. If false, this parameter is ignored. Cannot be used together with &#39;timersOnly&#39; (optional)
     * @param  bool $with_exception If true, only return jobs for which an exception occurred while executing it. If false, this parameter is ignored. (optional)
     * @param  string $due_before Only return jobs which are due to be executed before the given date. Jobs without duedate are never returned using this parameter. (optional)
     * @param  string $due_after Only return jobs which are due to be executed after the given date. Jobs without duedate are never returned using this parameter. (optional)
     * @param  string $exception_message Only return jobs with the given exception message (optional)
     * @param  string $tenant_id Only return jobs with the given tenantId. (optional)
     * @param  string $tenant_id_like Only return jobs with a tenantId like the given value. (optional)
     * @param  bool $without_tenant_id If true, only returns jobs without a tenantId set. If false, the withoutTenantId parameter is ignored. (optional)
     * @param  bool $locked If true, only return jobs which are locked.  If false, this parameter is ignored. (optional)
     * @param  bool $unlocked If true, only return jobs which are unlocked. If false, this parameter is ignored. (optional)
     * @param  string $sort Property to sort on, to be used together with the order. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\DataResponse
     */
    public function listDeadLetterJobs($id = null, $process_instance_id = null, $execution_id = null, $process_definition_id = null, $timers_only = null, $messages_only = null, $with_exception = null, $due_before = null, $due_after = null, $exception_message = null, $tenant_id = null, $tenant_id_like = null, $without_tenant_id = null, $locked = null, $unlocked = null, $sort = null)
    {
        list($response) = $this->listDeadLetterJobsWithHttpInfo($id, $process_instance_id, $execution_id, $process_definition_id, $timers_only, $messages_only, $with_exception, $due_before, $due_after, $exception_message, $tenant_id, $tenant_id_like, $without_tenant_id, $locked, $unlocked, $sort);
        return $response;
    }

    /**
     * Operation listDeadLetterJobsWithHttpInfo
     *
     * Get a list of deadletter jobs
     *
     * @param  string $id Only return job with the given id (optional)
     * @param  string $process_instance_id Only return jobs part of a process with the given id (optional)
     * @param  string $execution_id Only return jobs part of an execution with the given id (optional)
     * @param  string $process_definition_id Only return jobs with the given process definition id (optional)
     * @param  bool $timers_only If true, only return jobs which are timers. If false, this parameter is ignored. Cannot be used together with &#39;messagesOnly&#39;. (optional)
     * @param  bool $messages_only If true, only return jobs which are messages. If false, this parameter is ignored. Cannot be used together with &#39;timersOnly&#39; (optional)
     * @param  bool $with_exception If true, only return jobs for which an exception occurred while executing it. If false, this parameter is ignored. (optional)
     * @param  string $due_before Only return jobs which are due to be executed before the given date. Jobs without duedate are never returned using this parameter. (optional)
     * @param  string $due_after Only return jobs which are due to be executed after the given date. Jobs without duedate are never returned using this parameter. (optional)
     * @param  string $exception_message Only return jobs with the given exception message (optional)
     * @param  string $tenant_id Only return jobs with the given tenantId. (optional)
     * @param  string $tenant_id_like Only return jobs with a tenantId like the given value. (optional)
     * @param  bool $without_tenant_id If true, only returns jobs without a tenantId set. If false, the withoutTenantId parameter is ignored. (optional)
     * @param  bool $locked If true, only return jobs which are locked.  If false, this parameter is ignored. (optional)
     * @param  bool $unlocked If true, only return jobs which are unlocked. If false, this parameter is ignored. (optional)
     * @param  string $sort Property to sort on, to be used together with the order. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\DataResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function listDeadLetterJobsWithHttpInfo($id = null, $process_instance_id = null, $execution_id = null, $process_definition_id = null, $timers_only = null, $messages_only = null, $with_exception = null, $due_before = null, $due_after = null, $exception_message = null, $tenant_id = null, $tenant_id_like = null, $without_tenant_id = null, $locked = null, $unlocked = null, $sort = null)
    {
        $returnType = '\Swagger\Client\Model\DataResponse';
        $request = $this->listDeadLetterJobsRequest($id, $process_instance_id, $execution_id, $process_definition_id, $timers_only, $messages_only, $with_exception, $due_before, $due_after, $exception_message, $tenant_id, $tenant_id_like, $without_tenant_id, $locked, $unlocked, $sort);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()->getBody()->getContents()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\DataResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listDeadLetterJobsAsync
     *
     * Get a list of deadletter jobs
     *
     * @param  string $id Only return job with the given id (optional)
     * @param  string $process_instance_id Only return jobs part of a process with the given id (optional)
     * @param  string $execution_id Only return jobs part of an execution with the given id (optional)
     * @param  string $process_definition_id Only return jobs with the given process definition id (optional)
     * @param  bool $timers_only If true, only return jobs which are timers. If false, this parameter is ignored. Cannot be used together with &#39;messagesOnly&#39;. (optional)
     * @param  bool $messages_only If true, only return jobs which are messages. If false, this parameter is ignored. Cannot be used together with &#39;timersOnly&#39; (optional)
     * @param  bool $with_exception If true, only return jobs for which an exception occurred while executing it. If false, this parameter is ignored. (optional)
     * @param  string $due_before Only return jobs which are due to be executed before the given date. Jobs without duedate are never returned using this parameter. (optional)
     * @param  string $due_after Only return jobs which are due to be executed after the given date. Jobs without duedate are never returned using this parameter. (optional)
     * @param  string $exception_message Only return jobs with the given exception message (optional)
     * @param  string $tenant_id Only return jobs with the given tenantId. (optional)
     * @param  string $tenant_id_like Only return jobs with a tenantId like the given value. (optional)
     * @param  bool $without_tenant_id If true, only returns jobs without a tenantId set. If false, the withoutTenantId parameter is ignored. (optional)
     * @param  bool $locked If true, only return jobs which are locked.  If false, this parameter is ignored. (optional)
     * @param  bool $unlocked If true, only return jobs which are unlocked. If false, this parameter is ignored. (optional)
     * @param  string $sort Property to sort on, to be used together with the order. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listDeadLetterJobsAsync($id = null, $process_instance_id = null, $execution_id = null, $process_definition_id = null, $timers_only = null, $messages_only = null, $with_exception = null, $due_before = null, $due_after = null, $exception_message = null, $tenant_id = null, $tenant_id_like = null, $without_tenant_id = null, $locked = null, $unlocked = null, $sort = null)
    {
        return $this->listDeadLetterJobsAsyncWithHttpInfo($id, $process_instance_id, $execution_id, $process_definition_id, $timers_only, $messages_only, $with_exception, $due_before, $due_after, $exception_message, $tenant_id, $tenant_id_like, $without_tenant_id, $locked, $unlocked, $sort)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listDeadLetterJobsAsyncWithHttpInfo
     *
     * Get a list of deadletter jobs
     *
     * @param  string $id Only return job with the given id (optional)
     * @param  string $process_instance_id Only return jobs part of a process with the given id (optional)
     * @param  string $execution_id Only return jobs part of an execution with the given id (optional)
     * @param  string $process_definition_id Only return jobs with the given process definition id (optional)
     * @param  bool $timers_only If true, only return jobs which are timers. If false, this parameter is ignored. Cannot be used together with &#39;messagesOnly&#39;. (optional)
     * @param  bool $messages_only If true, only return jobs which are messages. If false, this parameter is ignored. Cannot be used together with &#39;timersOnly&#39; (optional)
     * @param  bool $with_exception If true, only return jobs for which an exception occurred while executing it. If false, this parameter is ignored. (optional)
     * @param  string $due_before Only return jobs which are due to be executed before the given date. Jobs without duedate are never returned using this parameter. (optional)
     * @param  string $due_after Only return jobs which are due to be executed after the given date. Jobs without duedate are never returned using this parameter. (optional)
     * @param  string $exception_message Only return jobs with the given exception message (optional)
     * @param  string $tenant_id Only return jobs with the given tenantId. (optional)
     * @param  string $tenant_id_like Only return jobs with a tenantId like the given value. (optional)
     * @param  bool $without_tenant_id If true, only returns jobs without a tenantId set. If false, the withoutTenantId parameter is ignored. (optional)
     * @param  bool $locked If true, only return jobs which are locked.  If false, this parameter is ignored. (optional)
     * @param  bool $unlocked If true, only return jobs which are unlocked. If false, this parameter is ignored. (optional)
     * @param  string $sort Property to sort on, to be used together with the order. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listDeadLetterJobsAsyncWithHttpInfo($id = null, $process_instance_id = null, $execution_id = null, $process_definition_id = null, $timers_only = null, $messages_only = null, $with_exception = null, $due_before = null, $due_after = null, $exception_message = null, $tenant_id = null, $tenant_id_like = null, $without_tenant_id = null, $locked = null, $unlocked = null, $sort = null)
    {
        $returnType = '\Swagger\Client\Model\DataResponse';
        $request = $this->listDeadLetterJobsRequest($id, $process_instance_id, $execution_id, $process_definition_id, $timers_only, $messages_only, $with_exception, $due_before, $due_after, $exception_message, $tenant_id, $tenant_id_like, $without_tenant_id, $locked, $unlocked, $sort);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listDeadLetterJobs'
     *
     * @param  string $id Only return job with the given id (optional)
     * @param  string $process_instance_id Only return jobs part of a process with the given id (optional)
     * @param  string $execution_id Only return jobs part of an execution with the given id (optional)
     * @param  string $process_definition_id Only return jobs with the given process definition id (optional)
     * @param  bool $timers_only If true, only return jobs which are timers. If false, this parameter is ignored. Cannot be used together with &#39;messagesOnly&#39;. (optional)
     * @param  bool $messages_only If true, only return jobs which are messages. If false, this parameter is ignored. Cannot be used together with &#39;timersOnly&#39; (optional)
     * @param  bool $with_exception If true, only return jobs for which an exception occurred while executing it. If false, this parameter is ignored. (optional)
     * @param  string $due_before Only return jobs which are due to be executed before the given date. Jobs without duedate are never returned using this parameter. (optional)
     * @param  string $due_after Only return jobs which are due to be executed after the given date. Jobs without duedate are never returned using this parameter. (optional)
     * @param  string $exception_message Only return jobs with the given exception message (optional)
     * @param  string $tenant_id Only return jobs with the given tenantId. (optional)
     * @param  string $tenant_id_like Only return jobs with a tenantId like the given value. (optional)
     * @param  bool $without_tenant_id If true, only returns jobs without a tenantId set. If false, the withoutTenantId parameter is ignored. (optional)
     * @param  bool $locked If true, only return jobs which are locked.  If false, this parameter is ignored. (optional)
     * @param  bool $unlocked If true, only return jobs which are unlocked. If false, this parameter is ignored. (optional)
     * @param  string $sort Property to sort on, to be used together with the order. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function listDeadLetterJobsRequest($id = null, $process_instance_id = null, $execution_id = null, $process_definition_id = null, $timers_only = null, $messages_only = null, $with_exception = null, $due_before = null, $due_after = null, $exception_message = null, $tenant_id = null, $tenant_id_like = null, $without_tenant_id = null, $locked = null, $unlocked = null, $sort = null)
    {

        $resourcePath = '/management/deadletter-jobs';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($id !== null) {
            $queryParams['id'] = ObjectSerializer::toQueryValue($id);
        }
        // query params
        if ($process_instance_id !== null) {
            $queryParams['processInstanceId'] = ObjectSerializer::toQueryValue($process_instance_id);
        }
        // query params
        if ($execution_id !== null) {
            $queryParams['executionId'] = ObjectSerializer::toQueryValue($execution_id);
        }
        // query params
        if ($process_definition_id !== null) {
            $queryParams['processDefinitionId'] = ObjectSerializer::toQueryValue($process_definition_id);
        }
        // query params
        if ($timers_only !== null) {
            $queryParams['timersOnly'] = ObjectSerializer::toQueryValue($timers_only);
        }
        // query params
        if ($messages_only !== null) {
            $queryParams['messagesOnly'] = ObjectSerializer::toQueryValue($messages_only);
        }
        // query params
        if ($with_exception !== null) {
            $queryParams['withException'] = ObjectSerializer::toQueryValue($with_exception);
        }
        // query params
        if ($due_before !== null) {
            $queryParams['dueBefore'] = ObjectSerializer::toQueryValue($due_before);
        }
        // query params
        if ($due_after !== null) {
            $queryParams['dueAfter'] = ObjectSerializer::toQueryValue($due_after);
        }
        // query params
        if ($exception_message !== null) {
            $queryParams['exceptionMessage'] = ObjectSerializer::toQueryValue($exception_message);
        }
        // query params
        if ($tenant_id !== null) {
            $queryParams['tenantId'] = ObjectSerializer::toQueryValue($tenant_id);
        }
        // query params
        if ($tenant_id_like !== null) {
            $queryParams['tenantIdLike'] = ObjectSerializer::toQueryValue($tenant_id_like);
        }
        // query params
        if ($without_tenant_id !== null) {
            $queryParams['withoutTenantId'] = ObjectSerializer::toQueryValue($without_tenant_id);
        }
        // query params
        if ($locked !== null) {
            $queryParams['locked'] = ObjectSerializer::toQueryValue($locked);
        }
        // query params
        if ($unlocked !== null) {
            $queryParams['unlocked'] = ObjectSerializer::toQueryValue($unlocked);
        }
        // query params
        if ($sort !== null) {
            $queryParams['sort'] = ObjectSerializer::toQueryValue($sort);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listJobs
     *
     * Get a list of jobs
     *
     * @param  string $id Only return job with the given id (optional)
     * @param  string $process_instance_id Only return jobs part of a process with the given id (optional)
     * @param  string $execution_id Only return jobs part of an execution with the given id (optional)
     * @param  string $process_definition_id Only return jobs with the given process definition id (optional)
     * @param  bool $timers_only If true, only return jobs which are timers. If false, this parameter is ignored. Cannot be used together with &#39;messagesOnly&#39;. (optional)
     * @param  bool $messages_only If true, only return jobs which are messages. If false, this parameter is ignored. Cannot be used together with &#39;timersOnly&#39; (optional)
     * @param  bool $with_exception If true, only return jobs for which an exception occurred while executing it. If false, this parameter is ignored. (optional)
     * @param  string $due_before Only return jobs which are due to be executed before the given date. Jobs without duedate are never returned using this parameter. (optional)
     * @param  string $due_after Only return jobs which are due to be executed after the given date. Jobs without duedate are never returned using this parameter. (optional)
     * @param  string $exception_message Only return jobs with the given exception message (optional)
     * @param  string $tenant_id Only return jobs with the given tenantId. (optional)
     * @param  string $tenant_id_like Only return jobs with a tenantId like the given value. (optional)
     * @param  bool $without_tenant_id If true, only returns jobs without a tenantId set. If false, the withoutTenantId parameter is ignored. (optional)
     * @param  bool $locked If true, only return jobs which are locked.  If false, this parameter is ignored. (optional)
     * @param  bool $unlocked If true, only return jobs which are unlocked. If false, this parameter is ignored. (optional)
     * @param  string $sort Property to sort on, to be used together with the order. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\DataResponse
     */
    public function listJobs($id = null, $process_instance_id = null, $execution_id = null, $process_definition_id = null, $timers_only = null, $messages_only = null, $with_exception = null, $due_before = null, $due_after = null, $exception_message = null, $tenant_id = null, $tenant_id_like = null, $without_tenant_id = null, $locked = null, $unlocked = null, $sort = null)
    {
        list($response) = $this->listJobsWithHttpInfo($id, $process_instance_id, $execution_id, $process_definition_id, $timers_only, $messages_only, $with_exception, $due_before, $due_after, $exception_message, $tenant_id, $tenant_id_like, $without_tenant_id, $locked, $unlocked, $sort);
        return $response;
    }

    /**
     * Operation listJobsWithHttpInfo
     *
     * Get a list of jobs
     *
     * @param  string $id Only return job with the given id (optional)
     * @param  string $process_instance_id Only return jobs part of a process with the given id (optional)
     * @param  string $execution_id Only return jobs part of an execution with the given id (optional)
     * @param  string $process_definition_id Only return jobs with the given process definition id (optional)
     * @param  bool $timers_only If true, only return jobs which are timers. If false, this parameter is ignored. Cannot be used together with &#39;messagesOnly&#39;. (optional)
     * @param  bool $messages_only If true, only return jobs which are messages. If false, this parameter is ignored. Cannot be used together with &#39;timersOnly&#39; (optional)
     * @param  bool $with_exception If true, only return jobs for which an exception occurred while executing it. If false, this parameter is ignored. (optional)
     * @param  string $due_before Only return jobs which are due to be executed before the given date. Jobs without duedate are never returned using this parameter. (optional)
     * @param  string $due_after Only return jobs which are due to be executed after the given date. Jobs without duedate are never returned using this parameter. (optional)
     * @param  string $exception_message Only return jobs with the given exception message (optional)
     * @param  string $tenant_id Only return jobs with the given tenantId. (optional)
     * @param  string $tenant_id_like Only return jobs with a tenantId like the given value. (optional)
     * @param  bool $without_tenant_id If true, only returns jobs without a tenantId set. If false, the withoutTenantId parameter is ignored. (optional)
     * @param  bool $locked If true, only return jobs which are locked.  If false, this parameter is ignored. (optional)
     * @param  bool $unlocked If true, only return jobs which are unlocked. If false, this parameter is ignored. (optional)
     * @param  string $sort Property to sort on, to be used together with the order. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\DataResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function listJobsWithHttpInfo($id = null, $process_instance_id = null, $execution_id = null, $process_definition_id = null, $timers_only = null, $messages_only = null, $with_exception = null, $due_before = null, $due_after = null, $exception_message = null, $tenant_id = null, $tenant_id_like = null, $without_tenant_id = null, $locked = null, $unlocked = null, $sort = null)
    {
        $returnType = '\Swagger\Client\Model\DataResponse';
        $request = $this->listJobsRequest($id, $process_instance_id, $execution_id, $process_definition_id, $timers_only, $messages_only, $with_exception, $due_before, $due_after, $exception_message, $tenant_id, $tenant_id_like, $without_tenant_id, $locked, $unlocked, $sort);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()->getBody()->getContents()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\DataResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listJobsAsync
     *
     * Get a list of jobs
     *
     * @param  string $id Only return job with the given id (optional)
     * @param  string $process_instance_id Only return jobs part of a process with the given id (optional)
     * @param  string $execution_id Only return jobs part of an execution with the given id (optional)
     * @param  string $process_definition_id Only return jobs with the given process definition id (optional)
     * @param  bool $timers_only If true, only return jobs which are timers. If false, this parameter is ignored. Cannot be used together with &#39;messagesOnly&#39;. (optional)
     * @param  bool $messages_only If true, only return jobs which are messages. If false, this parameter is ignored. Cannot be used together with &#39;timersOnly&#39; (optional)
     * @param  bool $with_exception If true, only return jobs for which an exception occurred while executing it. If false, this parameter is ignored. (optional)
     * @param  string $due_before Only return jobs which are due to be executed before the given date. Jobs without duedate are never returned using this parameter. (optional)
     * @param  string $due_after Only return jobs which are due to be executed after the given date. Jobs without duedate are never returned using this parameter. (optional)
     * @param  string $exception_message Only return jobs with the given exception message (optional)
     * @param  string $tenant_id Only return jobs with the given tenantId. (optional)
     * @param  string $tenant_id_like Only return jobs with a tenantId like the given value. (optional)
     * @param  bool $without_tenant_id If true, only returns jobs without a tenantId set. If false, the withoutTenantId parameter is ignored. (optional)
     * @param  bool $locked If true, only return jobs which are locked.  If false, this parameter is ignored. (optional)
     * @param  bool $unlocked If true, only return jobs which are unlocked. If false, this parameter is ignored. (optional)
     * @param  string $sort Property to sort on, to be used together with the order. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listJobsAsync($id = null, $process_instance_id = null, $execution_id = null, $process_definition_id = null, $timers_only = null, $messages_only = null, $with_exception = null, $due_before = null, $due_after = null, $exception_message = null, $tenant_id = null, $tenant_id_like = null, $without_tenant_id = null, $locked = null, $unlocked = null, $sort = null)
    {
        return $this->listJobsAsyncWithHttpInfo($id, $process_instance_id, $execution_id, $process_definition_id, $timers_only, $messages_only, $with_exception, $due_before, $due_after, $exception_message, $tenant_id, $tenant_id_like, $without_tenant_id, $locked, $unlocked, $sort)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listJobsAsyncWithHttpInfo
     *
     * Get a list of jobs
     *
     * @param  string $id Only return job with the given id (optional)
     * @param  string $process_instance_id Only return jobs part of a process with the given id (optional)
     * @param  string $execution_id Only return jobs part of an execution with the given id (optional)
     * @param  string $process_definition_id Only return jobs with the given process definition id (optional)
     * @param  bool $timers_only If true, only return jobs which are timers. If false, this parameter is ignored. Cannot be used together with &#39;messagesOnly&#39;. (optional)
     * @param  bool $messages_only If true, only return jobs which are messages. If false, this parameter is ignored. Cannot be used together with &#39;timersOnly&#39; (optional)
     * @param  bool $with_exception If true, only return jobs for which an exception occurred while executing it. If false, this parameter is ignored. (optional)
     * @param  string $due_before Only return jobs which are due to be executed before the given date. Jobs without duedate are never returned using this parameter. (optional)
     * @param  string $due_after Only return jobs which are due to be executed after the given date. Jobs without duedate are never returned using this parameter. (optional)
     * @param  string $exception_message Only return jobs with the given exception message (optional)
     * @param  string $tenant_id Only return jobs with the given tenantId. (optional)
     * @param  string $tenant_id_like Only return jobs with a tenantId like the given value. (optional)
     * @param  bool $without_tenant_id If true, only returns jobs without a tenantId set. If false, the withoutTenantId parameter is ignored. (optional)
     * @param  bool $locked If true, only return jobs which are locked.  If false, this parameter is ignored. (optional)
     * @param  bool $unlocked If true, only return jobs which are unlocked. If false, this parameter is ignored. (optional)
     * @param  string $sort Property to sort on, to be used together with the order. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listJobsAsyncWithHttpInfo($id = null, $process_instance_id = null, $execution_id = null, $process_definition_id = null, $timers_only = null, $messages_only = null, $with_exception = null, $due_before = null, $due_after = null, $exception_message = null, $tenant_id = null, $tenant_id_like = null, $without_tenant_id = null, $locked = null, $unlocked = null, $sort = null)
    {
        $returnType = '\Swagger\Client\Model\DataResponse';
        $request = $this->listJobsRequest($id, $process_instance_id, $execution_id, $process_definition_id, $timers_only, $messages_only, $with_exception, $due_before, $due_after, $exception_message, $tenant_id, $tenant_id_like, $without_tenant_id, $locked, $unlocked, $sort);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listJobs'
     *
     * @param  string $id Only return job with the given id (optional)
     * @param  string $process_instance_id Only return jobs part of a process with the given id (optional)
     * @param  string $execution_id Only return jobs part of an execution with the given id (optional)
     * @param  string $process_definition_id Only return jobs with the given process definition id (optional)
     * @param  bool $timers_only If true, only return jobs which are timers. If false, this parameter is ignored. Cannot be used together with &#39;messagesOnly&#39;. (optional)
     * @param  bool $messages_only If true, only return jobs which are messages. If false, this parameter is ignored. Cannot be used together with &#39;timersOnly&#39; (optional)
     * @param  bool $with_exception If true, only return jobs for which an exception occurred while executing it. If false, this parameter is ignored. (optional)
     * @param  string $due_before Only return jobs which are due to be executed before the given date. Jobs without duedate are never returned using this parameter. (optional)
     * @param  string $due_after Only return jobs which are due to be executed after the given date. Jobs without duedate are never returned using this parameter. (optional)
     * @param  string $exception_message Only return jobs with the given exception message (optional)
     * @param  string $tenant_id Only return jobs with the given tenantId. (optional)
     * @param  string $tenant_id_like Only return jobs with a tenantId like the given value. (optional)
     * @param  bool $without_tenant_id If true, only returns jobs without a tenantId set. If false, the withoutTenantId parameter is ignored. (optional)
     * @param  bool $locked If true, only return jobs which are locked.  If false, this parameter is ignored. (optional)
     * @param  bool $unlocked If true, only return jobs which are unlocked. If false, this parameter is ignored. (optional)
     * @param  string $sort Property to sort on, to be used together with the order. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function listJobsRequest($id = null, $process_instance_id = null, $execution_id = null, $process_definition_id = null, $timers_only = null, $messages_only = null, $with_exception = null, $due_before = null, $due_after = null, $exception_message = null, $tenant_id = null, $tenant_id_like = null, $without_tenant_id = null, $locked = null, $unlocked = null, $sort = null)
    {

        $resourcePath = '/management/jobs';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($id !== null) {
            $queryParams['id'] = ObjectSerializer::toQueryValue($id);
        }
        // query params
        if ($process_instance_id !== null) {
            $queryParams['processInstanceId'] = ObjectSerializer::toQueryValue($process_instance_id);
        }
        // query params
        if ($execution_id !== null) {
            $queryParams['executionId'] = ObjectSerializer::toQueryValue($execution_id);
        }
        // query params
        if ($process_definition_id !== null) {
            $queryParams['processDefinitionId'] = ObjectSerializer::toQueryValue($process_definition_id);
        }
        // query params
        if ($timers_only !== null) {
            $queryParams['timersOnly'] = ObjectSerializer::toQueryValue($timers_only);
        }
        // query params
        if ($messages_only !== null) {
            $queryParams['messagesOnly'] = ObjectSerializer::toQueryValue($messages_only);
        }
        // query params
        if ($with_exception !== null) {
            $queryParams['withException'] = ObjectSerializer::toQueryValue($with_exception);
        }
        // query params
        if ($due_before !== null) {
            $queryParams['dueBefore'] = ObjectSerializer::toQueryValue($due_before);
        }
        // query params
        if ($due_after !== null) {
            $queryParams['dueAfter'] = ObjectSerializer::toQueryValue($due_after);
        }
        // query params
        if ($exception_message !== null) {
            $queryParams['exceptionMessage'] = ObjectSerializer::toQueryValue($exception_message);
        }
        // query params
        if ($tenant_id !== null) {
            $queryParams['tenantId'] = ObjectSerializer::toQueryValue($tenant_id);
        }
        // query params
        if ($tenant_id_like !== null) {
            $queryParams['tenantIdLike'] = ObjectSerializer::toQueryValue($tenant_id_like);
        }
        // query params
        if ($without_tenant_id !== null) {
            $queryParams['withoutTenantId'] = ObjectSerializer::toQueryValue($without_tenant_id);
        }
        // query params
        if ($locked !== null) {
            $queryParams['locked'] = ObjectSerializer::toQueryValue($locked);
        }
        // query params
        if ($unlocked !== null) {
            $queryParams['unlocked'] = ObjectSerializer::toQueryValue($unlocked);
        }
        // query params
        if ($sort !== null) {
            $queryParams['sort'] = ObjectSerializer::toQueryValue($sort);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listSuspendedJobs
     *
     * Get a list of suspended jobs
     *
     * @param  string $id Only return job with the given id (optional)
     * @param  string $process_instance_id Only return jobs part of a process with the given id (optional)
     * @param  string $execution_id Only return jobs part of an execution with the given id (optional)
     * @param  string $process_definition_id Only return jobs with the given process definition id (optional)
     * @param  bool $timers_only If true, only return jobs which are timers. If false, this parameter is ignored. Cannot be used together with &#39;messagesOnly&#39;. (optional)
     * @param  bool $messages_only If true, only return jobs which are messages. If false, this parameter is ignored. Cannot be used together with &#39;timersOnly&#39; (optional)
     * @param  bool $with_exception If true, only return jobs for which an exception occurred while executing it. If false, this parameter is ignored. (optional)
     * @param  string $due_before Only return jobs which are due to be executed before the given date. Jobs without duedate are never returned using this parameter. (optional)
     * @param  string $due_after Only return jobs which are due to be executed after the given date. Jobs without duedate are never returned using this parameter. (optional)
     * @param  string $exception_message Only return jobs with the given exception message (optional)
     * @param  string $tenant_id Only return jobs with the given tenantId. (optional)
     * @param  string $tenant_id_like Only return jobs with a tenantId like the given value. (optional)
     * @param  bool $without_tenant_id If true, only returns jobs without a tenantId set. If false, the withoutTenantId parameter is ignored. (optional)
     * @param  bool $locked If true, only return jobs which are locked.  If false, this parameter is ignored. (optional)
     * @param  bool $unlocked If true, only return jobs which are unlocked. If false, this parameter is ignored. (optional)
     * @param  string $sort Property to sort on, to be used together with the order. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\DataResponse
     */
    public function listSuspendedJobs($id = null, $process_instance_id = null, $execution_id = null, $process_definition_id = null, $timers_only = null, $messages_only = null, $with_exception = null, $due_before = null, $due_after = null, $exception_message = null, $tenant_id = null, $tenant_id_like = null, $without_tenant_id = null, $locked = null, $unlocked = null, $sort = null)
    {
        list($response) = $this->listSuspendedJobsWithHttpInfo($id, $process_instance_id, $execution_id, $process_definition_id, $timers_only, $messages_only, $with_exception, $due_before, $due_after, $exception_message, $tenant_id, $tenant_id_like, $without_tenant_id, $locked, $unlocked, $sort);
        return $response;
    }

    /**
     * Operation listSuspendedJobsWithHttpInfo
     *
     * Get a list of suspended jobs
     *
     * @param  string $id Only return job with the given id (optional)
     * @param  string $process_instance_id Only return jobs part of a process with the given id (optional)
     * @param  string $execution_id Only return jobs part of an execution with the given id (optional)
     * @param  string $process_definition_id Only return jobs with the given process definition id (optional)
     * @param  bool $timers_only If true, only return jobs which are timers. If false, this parameter is ignored. Cannot be used together with &#39;messagesOnly&#39;. (optional)
     * @param  bool $messages_only If true, only return jobs which are messages. If false, this parameter is ignored. Cannot be used together with &#39;timersOnly&#39; (optional)
     * @param  bool $with_exception If true, only return jobs for which an exception occurred while executing it. If false, this parameter is ignored. (optional)
     * @param  string $due_before Only return jobs which are due to be executed before the given date. Jobs without duedate are never returned using this parameter. (optional)
     * @param  string $due_after Only return jobs which are due to be executed after the given date. Jobs without duedate are never returned using this parameter. (optional)
     * @param  string $exception_message Only return jobs with the given exception message (optional)
     * @param  string $tenant_id Only return jobs with the given tenantId. (optional)
     * @param  string $tenant_id_like Only return jobs with a tenantId like the given value. (optional)
     * @param  bool $without_tenant_id If true, only returns jobs without a tenantId set. If false, the withoutTenantId parameter is ignored. (optional)
     * @param  bool $locked If true, only return jobs which are locked.  If false, this parameter is ignored. (optional)
     * @param  bool $unlocked If true, only return jobs which are unlocked. If false, this parameter is ignored. (optional)
     * @param  string $sort Property to sort on, to be used together with the order. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\DataResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function listSuspendedJobsWithHttpInfo($id = null, $process_instance_id = null, $execution_id = null, $process_definition_id = null, $timers_only = null, $messages_only = null, $with_exception = null, $due_before = null, $due_after = null, $exception_message = null, $tenant_id = null, $tenant_id_like = null, $without_tenant_id = null, $locked = null, $unlocked = null, $sort = null)
    {
        $returnType = '\Swagger\Client\Model\DataResponse';
        $request = $this->listSuspendedJobsRequest($id, $process_instance_id, $execution_id, $process_definition_id, $timers_only, $messages_only, $with_exception, $due_before, $due_after, $exception_message, $tenant_id, $tenant_id_like, $without_tenant_id, $locked, $unlocked, $sort);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()->getBody()->getContents()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\DataResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listSuspendedJobsAsync
     *
     * Get a list of suspended jobs
     *
     * @param  string $id Only return job with the given id (optional)
     * @param  string $process_instance_id Only return jobs part of a process with the given id (optional)
     * @param  string $execution_id Only return jobs part of an execution with the given id (optional)
     * @param  string $process_definition_id Only return jobs with the given process definition id (optional)
     * @param  bool $timers_only If true, only return jobs which are timers. If false, this parameter is ignored. Cannot be used together with &#39;messagesOnly&#39;. (optional)
     * @param  bool $messages_only If true, only return jobs which are messages. If false, this parameter is ignored. Cannot be used together with &#39;timersOnly&#39; (optional)
     * @param  bool $with_exception If true, only return jobs for which an exception occurred while executing it. If false, this parameter is ignored. (optional)
     * @param  string $due_before Only return jobs which are due to be executed before the given date. Jobs without duedate are never returned using this parameter. (optional)
     * @param  string $due_after Only return jobs which are due to be executed after the given date. Jobs without duedate are never returned using this parameter. (optional)
     * @param  string $exception_message Only return jobs with the given exception message (optional)
     * @param  string $tenant_id Only return jobs with the given tenantId. (optional)
     * @param  string $tenant_id_like Only return jobs with a tenantId like the given value. (optional)
     * @param  bool $without_tenant_id If true, only returns jobs without a tenantId set. If false, the withoutTenantId parameter is ignored. (optional)
     * @param  bool $locked If true, only return jobs which are locked.  If false, this parameter is ignored. (optional)
     * @param  bool $unlocked If true, only return jobs which are unlocked. If false, this parameter is ignored. (optional)
     * @param  string $sort Property to sort on, to be used together with the order. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listSuspendedJobsAsync($id = null, $process_instance_id = null, $execution_id = null, $process_definition_id = null, $timers_only = null, $messages_only = null, $with_exception = null, $due_before = null, $due_after = null, $exception_message = null, $tenant_id = null, $tenant_id_like = null, $without_tenant_id = null, $locked = null, $unlocked = null, $sort = null)
    {
        return $this->listSuspendedJobsAsyncWithHttpInfo($id, $process_instance_id, $execution_id, $process_definition_id, $timers_only, $messages_only, $with_exception, $due_before, $due_after, $exception_message, $tenant_id, $tenant_id_like, $without_tenant_id, $locked, $unlocked, $sort)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listSuspendedJobsAsyncWithHttpInfo
     *
     * Get a list of suspended jobs
     *
     * @param  string $id Only return job with the given id (optional)
     * @param  string $process_instance_id Only return jobs part of a process with the given id (optional)
     * @param  string $execution_id Only return jobs part of an execution with the given id (optional)
     * @param  string $process_definition_id Only return jobs with the given process definition id (optional)
     * @param  bool $timers_only If true, only return jobs which are timers. If false, this parameter is ignored. Cannot be used together with &#39;messagesOnly&#39;. (optional)
     * @param  bool $messages_only If true, only return jobs which are messages. If false, this parameter is ignored. Cannot be used together with &#39;timersOnly&#39; (optional)
     * @param  bool $with_exception If true, only return jobs for which an exception occurred while executing it. If false, this parameter is ignored. (optional)
     * @param  string $due_before Only return jobs which are due to be executed before the given date. Jobs without duedate are never returned using this parameter. (optional)
     * @param  string $due_after Only return jobs which are due to be executed after the given date. Jobs without duedate are never returned using this parameter. (optional)
     * @param  string $exception_message Only return jobs with the given exception message (optional)
     * @param  string $tenant_id Only return jobs with the given tenantId. (optional)
     * @param  string $tenant_id_like Only return jobs with a tenantId like the given value. (optional)
     * @param  bool $without_tenant_id If true, only returns jobs without a tenantId set. If false, the withoutTenantId parameter is ignored. (optional)
     * @param  bool $locked If true, only return jobs which are locked.  If false, this parameter is ignored. (optional)
     * @param  bool $unlocked If true, only return jobs which are unlocked. If false, this parameter is ignored. (optional)
     * @param  string $sort Property to sort on, to be used together with the order. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listSuspendedJobsAsyncWithHttpInfo($id = null, $process_instance_id = null, $execution_id = null, $process_definition_id = null, $timers_only = null, $messages_only = null, $with_exception = null, $due_before = null, $due_after = null, $exception_message = null, $tenant_id = null, $tenant_id_like = null, $without_tenant_id = null, $locked = null, $unlocked = null, $sort = null)
    {
        $returnType = '\Swagger\Client\Model\DataResponse';
        $request = $this->listSuspendedJobsRequest($id, $process_instance_id, $execution_id, $process_definition_id, $timers_only, $messages_only, $with_exception, $due_before, $due_after, $exception_message, $tenant_id, $tenant_id_like, $without_tenant_id, $locked, $unlocked, $sort);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listSuspendedJobs'
     *
     * @param  string $id Only return job with the given id (optional)
     * @param  string $process_instance_id Only return jobs part of a process with the given id (optional)
     * @param  string $execution_id Only return jobs part of an execution with the given id (optional)
     * @param  string $process_definition_id Only return jobs with the given process definition id (optional)
     * @param  bool $timers_only If true, only return jobs which are timers. If false, this parameter is ignored. Cannot be used together with &#39;messagesOnly&#39;. (optional)
     * @param  bool $messages_only If true, only return jobs which are messages. If false, this parameter is ignored. Cannot be used together with &#39;timersOnly&#39; (optional)
     * @param  bool $with_exception If true, only return jobs for which an exception occurred while executing it. If false, this parameter is ignored. (optional)
     * @param  string $due_before Only return jobs which are due to be executed before the given date. Jobs without duedate are never returned using this parameter. (optional)
     * @param  string $due_after Only return jobs which are due to be executed after the given date. Jobs without duedate are never returned using this parameter. (optional)
     * @param  string $exception_message Only return jobs with the given exception message (optional)
     * @param  string $tenant_id Only return jobs with the given tenantId. (optional)
     * @param  string $tenant_id_like Only return jobs with a tenantId like the given value. (optional)
     * @param  bool $without_tenant_id If true, only returns jobs without a tenantId set. If false, the withoutTenantId parameter is ignored. (optional)
     * @param  bool $locked If true, only return jobs which are locked.  If false, this parameter is ignored. (optional)
     * @param  bool $unlocked If true, only return jobs which are unlocked. If false, this parameter is ignored. (optional)
     * @param  string $sort Property to sort on, to be used together with the order. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function listSuspendedJobsRequest($id = null, $process_instance_id = null, $execution_id = null, $process_definition_id = null, $timers_only = null, $messages_only = null, $with_exception = null, $due_before = null, $due_after = null, $exception_message = null, $tenant_id = null, $tenant_id_like = null, $without_tenant_id = null, $locked = null, $unlocked = null, $sort = null)
    {

        $resourcePath = '/management/suspended-jobs';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($id !== null) {
            $queryParams['id'] = ObjectSerializer::toQueryValue($id);
        }
        // query params
        if ($process_instance_id !== null) {
            $queryParams['processInstanceId'] = ObjectSerializer::toQueryValue($process_instance_id);
        }
        // query params
        if ($execution_id !== null) {
            $queryParams['executionId'] = ObjectSerializer::toQueryValue($execution_id);
        }
        // query params
        if ($process_definition_id !== null) {
            $queryParams['processDefinitionId'] = ObjectSerializer::toQueryValue($process_definition_id);
        }
        // query params
        if ($timers_only !== null) {
            $queryParams['timersOnly'] = ObjectSerializer::toQueryValue($timers_only);
        }
        // query params
        if ($messages_only !== null) {
            $queryParams['messagesOnly'] = ObjectSerializer::toQueryValue($messages_only);
        }
        // query params
        if ($with_exception !== null) {
            $queryParams['withException'] = ObjectSerializer::toQueryValue($with_exception);
        }
        // query params
        if ($due_before !== null) {
            $queryParams['dueBefore'] = ObjectSerializer::toQueryValue($due_before);
        }
        // query params
        if ($due_after !== null) {
            $queryParams['dueAfter'] = ObjectSerializer::toQueryValue($due_after);
        }
        // query params
        if ($exception_message !== null) {
            $queryParams['exceptionMessage'] = ObjectSerializer::toQueryValue($exception_message);
        }
        // query params
        if ($tenant_id !== null) {
            $queryParams['tenantId'] = ObjectSerializer::toQueryValue($tenant_id);
        }
        // query params
        if ($tenant_id_like !== null) {
            $queryParams['tenantIdLike'] = ObjectSerializer::toQueryValue($tenant_id_like);
        }
        // query params
        if ($without_tenant_id !== null) {
            $queryParams['withoutTenantId'] = ObjectSerializer::toQueryValue($without_tenant_id);
        }
        // query params
        if ($locked !== null) {
            $queryParams['locked'] = ObjectSerializer::toQueryValue($locked);
        }
        // query params
        if ($unlocked !== null) {
            $queryParams['unlocked'] = ObjectSerializer::toQueryValue($unlocked);
        }
        // query params
        if ($sort !== null) {
            $queryParams['sort'] = ObjectSerializer::toQueryValue($sort);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listTimerJobs
     *
     * Get a list of timer jobs
     *
     * @param  string $id Only return job with the given id (optional)
     * @param  string $process_instance_id Only return jobs part of a process with the given id (optional)
     * @param  string $execution_id Only return jobs part of an execution with the given id (optional)
     * @param  string $process_definition_id Only return jobs with the given process definition id (optional)
     * @param  bool $timers_only If true, only return jobs which are timers. If false, this parameter is ignored. Cannot be used together with &#39;messagesOnly&#39;. (optional)
     * @param  bool $messages_only If true, only return jobs which are messages. If false, this parameter is ignored. Cannot be used together with &#39;timersOnly&#39; (optional)
     * @param  bool $with_exception If true, only return jobs for which an exception occurred while executing it. If false, this parameter is ignored. (optional)
     * @param  string $due_before Only return jobs which are due to be executed before the given date. Jobs without duedate are never returned using this parameter. (optional)
     * @param  string $due_after Only return jobs which are due to be executed after the given date. Jobs without duedate are never returned using this parameter. (optional)
     * @param  string $exception_message Only return jobs with the given exception message (optional)
     * @param  string $tenant_id Only return jobs with the given tenantId. (optional)
     * @param  string $tenant_id_like Only return jobs with a tenantId like the given value. (optional)
     * @param  bool $without_tenant_id If true, only returns jobs without a tenantId set. If false, the withoutTenantId parameter is ignored. (optional)
     * @param  bool $locked If true, only return jobs which are locked.  If false, this parameter is ignored. (optional)
     * @param  bool $unlocked If true, only return jobs which are unlocked. If false, this parameter is ignored. (optional)
     * @param  string $sort Property to sort on, to be used together with the order. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\DataResponse
     */
    public function listTimerJobs($id = null, $process_instance_id = null, $execution_id = null, $process_definition_id = null, $timers_only = null, $messages_only = null, $with_exception = null, $due_before = null, $due_after = null, $exception_message = null, $tenant_id = null, $tenant_id_like = null, $without_tenant_id = null, $locked = null, $unlocked = null, $sort = null)
    {
        list($response) = $this->listTimerJobsWithHttpInfo($id, $process_instance_id, $execution_id, $process_definition_id, $timers_only, $messages_only, $with_exception, $due_before, $due_after, $exception_message, $tenant_id, $tenant_id_like, $without_tenant_id, $locked, $unlocked, $sort);
        return $response;
    }

    /**
     * Operation listTimerJobsWithHttpInfo
     *
     * Get a list of timer jobs
     *
     * @param  string $id Only return job with the given id (optional)
     * @param  string $process_instance_id Only return jobs part of a process with the given id (optional)
     * @param  string $execution_id Only return jobs part of an execution with the given id (optional)
     * @param  string $process_definition_id Only return jobs with the given process definition id (optional)
     * @param  bool $timers_only If true, only return jobs which are timers. If false, this parameter is ignored. Cannot be used together with &#39;messagesOnly&#39;. (optional)
     * @param  bool $messages_only If true, only return jobs which are messages. If false, this parameter is ignored. Cannot be used together with &#39;timersOnly&#39; (optional)
     * @param  bool $with_exception If true, only return jobs for which an exception occurred while executing it. If false, this parameter is ignored. (optional)
     * @param  string $due_before Only return jobs which are due to be executed before the given date. Jobs without duedate are never returned using this parameter. (optional)
     * @param  string $due_after Only return jobs which are due to be executed after the given date. Jobs without duedate are never returned using this parameter. (optional)
     * @param  string $exception_message Only return jobs with the given exception message (optional)
     * @param  string $tenant_id Only return jobs with the given tenantId. (optional)
     * @param  string $tenant_id_like Only return jobs with a tenantId like the given value. (optional)
     * @param  bool $without_tenant_id If true, only returns jobs without a tenantId set. If false, the withoutTenantId parameter is ignored. (optional)
     * @param  bool $locked If true, only return jobs which are locked.  If false, this parameter is ignored. (optional)
     * @param  bool $unlocked If true, only return jobs which are unlocked. If false, this parameter is ignored. (optional)
     * @param  string $sort Property to sort on, to be used together with the order. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\DataResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function listTimerJobsWithHttpInfo($id = null, $process_instance_id = null, $execution_id = null, $process_definition_id = null, $timers_only = null, $messages_only = null, $with_exception = null, $due_before = null, $due_after = null, $exception_message = null, $tenant_id = null, $tenant_id_like = null, $without_tenant_id = null, $locked = null, $unlocked = null, $sort = null)
    {
        $returnType = '\Swagger\Client\Model\DataResponse';
        $request = $this->listTimerJobsRequest($id, $process_instance_id, $execution_id, $process_definition_id, $timers_only, $messages_only, $with_exception, $due_before, $due_after, $exception_message, $tenant_id, $tenant_id_like, $without_tenant_id, $locked, $unlocked, $sort);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()->getBody()->getContents()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\DataResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listTimerJobsAsync
     *
     * Get a list of timer jobs
     *
     * @param  string $id Only return job with the given id (optional)
     * @param  string $process_instance_id Only return jobs part of a process with the given id (optional)
     * @param  string $execution_id Only return jobs part of an execution with the given id (optional)
     * @param  string $process_definition_id Only return jobs with the given process definition id (optional)
     * @param  bool $timers_only If true, only return jobs which are timers. If false, this parameter is ignored. Cannot be used together with &#39;messagesOnly&#39;. (optional)
     * @param  bool $messages_only If true, only return jobs which are messages. If false, this parameter is ignored. Cannot be used together with &#39;timersOnly&#39; (optional)
     * @param  bool $with_exception If true, only return jobs for which an exception occurred while executing it. If false, this parameter is ignored. (optional)
     * @param  string $due_before Only return jobs which are due to be executed before the given date. Jobs without duedate are never returned using this parameter. (optional)
     * @param  string $due_after Only return jobs which are due to be executed after the given date. Jobs without duedate are never returned using this parameter. (optional)
     * @param  string $exception_message Only return jobs with the given exception message (optional)
     * @param  string $tenant_id Only return jobs with the given tenantId. (optional)
     * @param  string $tenant_id_like Only return jobs with a tenantId like the given value. (optional)
     * @param  bool $without_tenant_id If true, only returns jobs without a tenantId set. If false, the withoutTenantId parameter is ignored. (optional)
     * @param  bool $locked If true, only return jobs which are locked.  If false, this parameter is ignored. (optional)
     * @param  bool $unlocked If true, only return jobs which are unlocked. If false, this parameter is ignored. (optional)
     * @param  string $sort Property to sort on, to be used together with the order. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listTimerJobsAsync($id = null, $process_instance_id = null, $execution_id = null, $process_definition_id = null, $timers_only = null, $messages_only = null, $with_exception = null, $due_before = null, $due_after = null, $exception_message = null, $tenant_id = null, $tenant_id_like = null, $without_tenant_id = null, $locked = null, $unlocked = null, $sort = null)
    {
        return $this->listTimerJobsAsyncWithHttpInfo($id, $process_instance_id, $execution_id, $process_definition_id, $timers_only, $messages_only, $with_exception, $due_before, $due_after, $exception_message, $tenant_id, $tenant_id_like, $without_tenant_id, $locked, $unlocked, $sort)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listTimerJobsAsyncWithHttpInfo
     *
     * Get a list of timer jobs
     *
     * @param  string $id Only return job with the given id (optional)
     * @param  string $process_instance_id Only return jobs part of a process with the given id (optional)
     * @param  string $execution_id Only return jobs part of an execution with the given id (optional)
     * @param  string $process_definition_id Only return jobs with the given process definition id (optional)
     * @param  bool $timers_only If true, only return jobs which are timers. If false, this parameter is ignored. Cannot be used together with &#39;messagesOnly&#39;. (optional)
     * @param  bool $messages_only If true, only return jobs which are messages. If false, this parameter is ignored. Cannot be used together with &#39;timersOnly&#39; (optional)
     * @param  bool $with_exception If true, only return jobs for which an exception occurred while executing it. If false, this parameter is ignored. (optional)
     * @param  string $due_before Only return jobs which are due to be executed before the given date. Jobs without duedate are never returned using this parameter. (optional)
     * @param  string $due_after Only return jobs which are due to be executed after the given date. Jobs without duedate are never returned using this parameter. (optional)
     * @param  string $exception_message Only return jobs with the given exception message (optional)
     * @param  string $tenant_id Only return jobs with the given tenantId. (optional)
     * @param  string $tenant_id_like Only return jobs with a tenantId like the given value. (optional)
     * @param  bool $without_tenant_id If true, only returns jobs without a tenantId set. If false, the withoutTenantId parameter is ignored. (optional)
     * @param  bool $locked If true, only return jobs which are locked.  If false, this parameter is ignored. (optional)
     * @param  bool $unlocked If true, only return jobs which are unlocked. If false, this parameter is ignored. (optional)
     * @param  string $sort Property to sort on, to be used together with the order. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listTimerJobsAsyncWithHttpInfo($id = null, $process_instance_id = null, $execution_id = null, $process_definition_id = null, $timers_only = null, $messages_only = null, $with_exception = null, $due_before = null, $due_after = null, $exception_message = null, $tenant_id = null, $tenant_id_like = null, $without_tenant_id = null, $locked = null, $unlocked = null, $sort = null)
    {
        $returnType = '\Swagger\Client\Model\DataResponse';
        $request = $this->listTimerJobsRequest($id, $process_instance_id, $execution_id, $process_definition_id, $timers_only, $messages_only, $with_exception, $due_before, $due_after, $exception_message, $tenant_id, $tenant_id_like, $without_tenant_id, $locked, $unlocked, $sort);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listTimerJobs'
     *
     * @param  string $id Only return job with the given id (optional)
     * @param  string $process_instance_id Only return jobs part of a process with the given id (optional)
     * @param  string $execution_id Only return jobs part of an execution with the given id (optional)
     * @param  string $process_definition_id Only return jobs with the given process definition id (optional)
     * @param  bool $timers_only If true, only return jobs which are timers. If false, this parameter is ignored. Cannot be used together with &#39;messagesOnly&#39;. (optional)
     * @param  bool $messages_only If true, only return jobs which are messages. If false, this parameter is ignored. Cannot be used together with &#39;timersOnly&#39; (optional)
     * @param  bool $with_exception If true, only return jobs for which an exception occurred while executing it. If false, this parameter is ignored. (optional)
     * @param  string $due_before Only return jobs which are due to be executed before the given date. Jobs without duedate are never returned using this parameter. (optional)
     * @param  string $due_after Only return jobs which are due to be executed after the given date. Jobs without duedate are never returned using this parameter. (optional)
     * @param  string $exception_message Only return jobs with the given exception message (optional)
     * @param  string $tenant_id Only return jobs with the given tenantId. (optional)
     * @param  string $tenant_id_like Only return jobs with a tenantId like the given value. (optional)
     * @param  bool $without_tenant_id If true, only returns jobs without a tenantId set. If false, the withoutTenantId parameter is ignored. (optional)
     * @param  bool $locked If true, only return jobs which are locked.  If false, this parameter is ignored. (optional)
     * @param  bool $unlocked If true, only return jobs which are unlocked. If false, this parameter is ignored. (optional)
     * @param  string $sort Property to sort on, to be used together with the order. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function listTimerJobsRequest($id = null, $process_instance_id = null, $execution_id = null, $process_definition_id = null, $timers_only = null, $messages_only = null, $with_exception = null, $due_before = null, $due_after = null, $exception_message = null, $tenant_id = null, $tenant_id_like = null, $without_tenant_id = null, $locked = null, $unlocked = null, $sort = null)
    {

        $resourcePath = '/management/timer-jobs';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($id !== null) {
            $queryParams['id'] = ObjectSerializer::toQueryValue($id);
        }
        // query params
        if ($process_instance_id !== null) {
            $queryParams['processInstanceId'] = ObjectSerializer::toQueryValue($process_instance_id);
        }
        // query params
        if ($execution_id !== null) {
            $queryParams['executionId'] = ObjectSerializer::toQueryValue($execution_id);
        }
        // query params
        if ($process_definition_id !== null) {
            $queryParams['processDefinitionId'] = ObjectSerializer::toQueryValue($process_definition_id);
        }
        // query params
        if ($timers_only !== null) {
            $queryParams['timersOnly'] = ObjectSerializer::toQueryValue($timers_only);
        }
        // query params
        if ($messages_only !== null) {
            $queryParams['messagesOnly'] = ObjectSerializer::toQueryValue($messages_only);
        }
        // query params
        if ($with_exception !== null) {
            $queryParams['withException'] = ObjectSerializer::toQueryValue($with_exception);
        }
        // query params
        if ($due_before !== null) {
            $queryParams['dueBefore'] = ObjectSerializer::toQueryValue($due_before);
        }
        // query params
        if ($due_after !== null) {
            $queryParams['dueAfter'] = ObjectSerializer::toQueryValue($due_after);
        }
        // query params
        if ($exception_message !== null) {
            $queryParams['exceptionMessage'] = ObjectSerializer::toQueryValue($exception_message);
        }
        // query params
        if ($tenant_id !== null) {
            $queryParams['tenantId'] = ObjectSerializer::toQueryValue($tenant_id);
        }
        // query params
        if ($tenant_id_like !== null) {
            $queryParams['tenantIdLike'] = ObjectSerializer::toQueryValue($tenant_id_like);
        }
        // query params
        if ($without_tenant_id !== null) {
            $queryParams['withoutTenantId'] = ObjectSerializer::toQueryValue($without_tenant_id);
        }
        // query params
        if ($locked !== null) {
            $queryParams['locked'] = ObjectSerializer::toQueryValue($locked);
        }
        // query params
        if ($unlocked !== null) {
            $queryParams['unlocked'] = ObjectSerializer::toQueryValue($unlocked);
        }
        // query params
        if ($sort !== null) {
            $queryParams['sort'] = ObjectSerializer::toQueryValue($sort);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
